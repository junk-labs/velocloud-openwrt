diff -ruN cloud-init-0.7.2.orig/cloudinit/distros/openwrt.py cloud-init-0.7.2/cloudinit/distros/openwrt.py
--- cloud-init-0.7.2.orig/cloudinit/distros/openwrt.py	1970-01-01 05:30:00.000000000 +0530
+++ cloud-init-0.7.2/cloudinit/distros/openwrt.py	2016-06-13 20:33:06.211274974 +0530
@@ -0,0 +1,148 @@
+# vi: ts=4 expandtab
+#
+#    Copyright (C) 2012 Canonical Ltd.
+#    Copyright (C) 2012 Hewlett-Packard Development Company, L.P.
+#    Copyright (C) 2012 Yahoo! Inc.
+#
+#    Author: Scott Moser <scott.moser@canonical.com>
+#    Author: Juerg Haefliger <juerg.haefliger@hp.com>
+#    Author: Joshua Harlow <harlowja@yahoo-inc.com>
+#    Author: Ben Howard <ben.howard@canonical.com>
+#
+#    This program is free software: you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License version 3, as
+#    published by the Free Software Foundation.
+#
+#    This program is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+import os
+from cloudinit import distros
+from cloudinit import helpers
+from cloudinit import log as logging
+from cloudinit import util
+
+from cloudinit.distros.parsers.hostname import HostnameConf
+
+from cloudinit.settings import PER_INSTANCE
+
+LOG = logging.getLogger(__name__)
+
+# meta-data
+#
+# network-interfaces:
+#   GE4:
+#      type: dhcp
+#
+# or
+#
+# network-interfaces:
+#   GE4:
+#      type: static
+#      ipaddr: 192.168.150.5
+#      netmask: 255.255.255.0
+#      gateway: 192.168.150.1
+#
+# or
+#
+# network-interfaces:
+#   GE4:
+#      type: pppoe
+#      username: user
+#      passwd: pass
+#
+
+
+class Distro(distros.Distro):
+
+    def __init__(self, name, cfg, paths):
+        distros.Distro.__init__(self, name, cfg, paths)
+        self._runner = helpers.Runners(paths)
+        self.osfamily = 'openwrt'
+
+    def apply_locale(self, locale, out_fn=None):
+        raise NotImplementedError()
+
+    def install_packages(self, pkglist):
+        raise NotImplementedError()
+
+    def update_package_sources(self):
+        raise NotImplementedError()
+
+    def _write_network(self, settings):
+        # util.write_file(self.network_conf_fn, settings)
+        for (intf, intf_conf) in settings.items():
+            cmd_wan_config = ["/opt/vc/bin/set_wan_config.sh", intf]
+            type = intf_conf["type"]
+            # [DHCP | STATIC ipaddr netmask gateway | PPPOE username passwd]
+            if type == "dhcp":
+                cmd_wan_config.append("DHCP")
+            elif type == "static":
+                cmd_wan_config.extend(("STATIC", intf_conf["ipaddr"], intf_conf["netmask"], intf_conf["gateway"]))
+	    elif type == "pppoe":
+	        cmd_wan_config.extend(("PPPOE", intf_conf["username"], intf_conf["passwd"]))
+            else:
+	        raise ValueError("invalid interface type: %s" % type)
+	    util.subp(cmd_wan_config)
+        return settings.keys()
+
+    def _select_hostname(self, hostname, fqdn):
+        if not hostname:
+            return fqdn
+        return hostname
+
+    def _write_hostname(self, your_hostname, out_fn):
+        # uci set system.@system[0].hostname=<your_hostname>
+        # uci commit system
+        cmd_set = ['uci', 'set', 'system.@system[0].hostname='+your_hostname]
+        cmd_commit = ['uci', 'commit', 'system']
+
+        try:
+                util.subp(cmd_set)
+                util.subp(cmd_commit)
+        except IOError:
+                pass
+        return
+
+    def _read_hostname(self, filename, default=None):
+        hostname = None
+        try:
+            hostname = self._read_system_hostname()
+        except IOError:
+            pass
+        if not hostname:
+            return default
+        return hostname
+
+    def _read_system_hostname(self):
+        # Read from UCI
+        # uci get system.@system[0].hostname
+        sys_hostname = None
+        cmd = ['uci', 'get', 'system.@system[0].hostname']
+        try:
+            (sys_hostname, _err) = util.subp(cmd)
+        except IOError:
+            pass
+        except Exception as e:
+            raise e
+
+        if not sys_hostname:
+                return None
+
+        return sys_hostname
+
+    def _get_localhost_ip(self):
+        return "127.0.0.1"
+
+    def set_timezone(self, tz):
+        raise NotImplementedError()
+
+    def package_command(self, command, args=None, pkgs=None):
+        raise NotImplementedError()
+
+
