From 54e48afaa2541580cc793c7764081753a1e8e48f Mon Sep 17 00:00:00 2001
From: Aleksander Morgado <aleksander@aleksander.es>
Date: Wed, 20 Jul 2016 21:43:59 +0200
Subject: [PATCH 02/12] build: allow disabling messaging interface support

---
 cli/Makefile.am                                    |    9 +-
 cli/mmcli-common.c                                 |   10 +
 cli/mmcli-common.h                                 |    6 +
 cli/mmcli.c                                        |   12 +
 cli/mmcli.h                                        |    2 +
 configure.ac                                       |   15 +
 include/Makefile.am                                |    4 +
 include/ModemManager-enums-messaging.h             |  426 +++++++++
 include/ModemManager-enums.h                       |  393 --------
 include/ModemManager-version.h.in                  |   15 +
 include/ModemManager.h                             |    3 +
 introspection/Makefile.am                          |    5 +
 libmm-glib/Makefile.am                             |   36 +-
 libmm-glib/generated/Makefile.am                   |   31 +-
 libmm-glib/libmm-glib.h                            |   12 +-
 libmm-glib/mm-common-helpers.c                     |  393 ++++----
 libmm-glib/mm-common-helpers.h                     |   37 +-
 libmm-glib/mm-manager.c                            |    2 +
 libmm-glib/mm-object.c                             |    4 +
 libmm-glib/mm-object.h                             |   11 +-
 plugins/altair/mm-broadband-modem-altair-lte.c     |   16 +-
 plugins/cinterion/mm-broadband-modem-cinterion.c   |   17 +-
 plugins/iridium/mm-broadband-modem-iridium.c       |   20 +-
 plugins/nokia/mm-broadband-modem-nokia.c           |   16 +-
 plugins/novatel/mm-broadband-modem-novatel-lte.c   |    1 -
 plugins/novatel/mm-broadband-modem-novatel.c       |   19 +-
 plugins/pantech/mm-broadband-modem-pantech.c       |   21 +-
 plugins/thuraya/mm-broadband-modem-thuraya.c       |   20 +-
 plugins/thuraya/mm-modem-helpers-thuraya.c         |    4 +-
 plugins/thuraya/mm-modem-helpers-thuraya.h         |    4 +
 .../thuraya/tests/test-mm-modem-helpers-thuraya.c  |    8 +-
 src/Makefile.am                                    |   43 +-
 src/mm-broadband-modem-mbim.c                      |   41 +-
 src/mm-broadband-modem-qmi.c                       |   30 +-
 src/mm-broadband-modem.c                           |   90 +-
 src/mm-broadband-modem.h                           |    7 +-
 src/mm-call-list.c                                 |    1 -
 src/mm-modem-helpers-mbim.c                        |    4 +
 src/mm-modem-helpers-mbim.h                        |    4 +
 src/mm-modem-helpers-qmi.c                         |    4 +
 src/mm-modem-helpers-qmi.h                         |    4 +
 src/mm-modem-helpers.c                             | 1006 ++++++++++----------
 src/mm-modem-helpers.h                             |   85 +-
 src/tests/Makefile.am                              |    5 +
 src/tests/test-modem-helpers.c                     |   15 +-
 45 files changed, 1683 insertions(+), 1228 deletions(-)
 create mode 100644 include/ModemManager-enums-messaging.h

diff --git a/cli/Makefile.am b/cli/Makefile.am
index c7da7f1..6005f06 100644
--- a/cli/Makefile.am
+++ b/cli/Makefile.am
@@ -20,7 +20,6 @@ mmcli_SOURCES = \
 	mmcli-modem-3gpp.c \
 	mmcli-modem-cdma.c \
 	mmcli-modem-simple.c \
-	mmcli-modem-messaging.c \
 	mmcli-modem-voice.c \
 	mmcli-modem-time.c \
 	mmcli-modem-firmware.c \
@@ -28,7 +27,6 @@ mmcli_SOURCES = \
 	mmcli-modem-oma.c \
 	mmcli-bearer.c \
 	mmcli-sim.c \
-	mmcli-sms.c \
 	mmcli-call.c \
 	$(NULL)
 
@@ -36,6 +34,13 @@ if WITH_INTERFACE_LOCATION
 mmcli_SOURCES += mmcli-modem-location.c
 endif
 
+if WITH_INTERFACE_MESSAGING
+mmcli_SOURCES += \
+	mmcli-modem-messaging.c \
+	mmcli-sms.c \
+	$(NULL)
+endif
+
 mmcli_LDADD = \
 	$(MMCLI_LIBS) \
 	$(top_builddir)/libmm-glib/libmm-glib.la \
diff --git a/cli/mmcli-common.c b/cli/mmcli-common.c
index f48dd9c..4c03bfd 100644
--- a/cli/mmcli-common.c
+++ b/cli/mmcli-common.c
@@ -825,6 +825,8 @@ mmcli_get_sim_sync (GDBusConnection *connection,
     return found;
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 typedef struct {
     GSimpleAsyncResult *result;
     GCancellable *cancellable;
@@ -1095,6 +1097,8 @@ mmcli_get_sms_sync (GDBusConnection *connection,
     return found;
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 const gchar *
 mmcli_get_state_reason_string (MMModemStateChangeReason reason)
 {
@@ -1388,7 +1392,9 @@ mmcli_get_call_sync (GDBusConnection *connection,
 static gchar *modem_str;
 static gchar *bearer_str;
 static gchar *sim_str;
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 static gchar *sms_str;
+#endif
 static gchar *call_str;
 
 static GOptionEntry entries[] = {
@@ -1404,10 +1410,12 @@ static GOptionEntry entries[] = {
       "Specify SIM card by path or index. Shows SIM card information if no action specified.",
       "[PATH|INDEX]"
     },
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     { "sms", 's', 0, G_OPTION_ARG_STRING, &sms_str,
       "Specify SMS by path or index. Shows SMS information if no action specified.",
       "[PATH|INDEX]"
     },
+#endif
     { "call", 'o', 0, G_OPTION_ARG_STRING, &call_str,
       "Specify Call by path or index. Shows Call information if no action specified.",
       "[PATH|INDEX]"
@@ -1449,11 +1457,13 @@ mmcli_get_common_sim_string (void)
     return sim_str;
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 const gchar *
 mmcli_get_common_sms_string (void)
 {
     return sms_str;
 }
+#endif
 
 const gchar *
 mmcli_get_common_call_string (void)
diff --git a/cli/mmcli-common.h b/cli/mmcli-common.h
index f38429b..376f6cd 100644
--- a/cli/mmcli-common.h
+++ b/cli/mmcli-common.h
@@ -71,6 +71,8 @@ MMSim *mmcli_get_sim_sync   (GDBusConnection *connection,
                              MMManager **manager,
                              MMObject **object);
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 void   mmcli_get_sms        (GDBusConnection *connection,
                              const gchar *path_or_index,
                              GCancellable *cancellable,
@@ -84,6 +86,8 @@ MMSms *mmcli_get_sms_sync   (GDBusConnection *connection,
                              MMManager **manager,
                              MMObject **object);
 
+#endif
+
 void    mmcli_get_call        (GDBusConnection *connection,
                                const gchar *path_or_index,
                                GCancellable *cancellable,
@@ -104,7 +108,9 @@ GOptionGroup *mmcli_get_common_option_group (void);
 const gchar  *mmcli_get_common_modem_string (void);
 const gchar  *mmcli_get_common_bearer_string (void);
 const gchar  *mmcli_get_common_sim_string (void);
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 const gchar  *mmcli_get_common_sms_string (void);
+#endif
 const gchar  *mmcli_get_common_call_string (void);
 
 gchar *mmcli_prefix_newlines (const gchar *prefix,
diff --git a/cli/mmcli.c b/cli/mmcli.c
index 02362f8..039100c 100644
--- a/cli/mmcli.c
+++ b/cli/mmcli.c
@@ -204,8 +204,10 @@ main (gint argc, gchar **argv)
     g_option_context_add_group (context,
                                 mmcli_modem_location_get_option_group ());
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     g_option_context_add_group (context,
                                 mmcli_modem_messaging_get_option_group ());
+#endif
     g_option_context_add_group (context,
                                 mmcli_modem_voice_get_option_group ());
     g_option_context_add_group (context,
@@ -220,8 +222,10 @@ main (gint argc, gchar **argv)
                                 mmcli_sim_get_option_group ());
     g_option_context_add_group (context,
                                 mmcli_bearer_get_option_group ());
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     g_option_context_add_group (context,
                                 mmcli_sms_get_option_group ());
+#endif
     g_option_context_add_group (context,
                                 mmcli_call_get_option_group ());
     g_option_context_add_main_entries (context, main_entries, NULL);
@@ -279,6 +283,7 @@ main (gint argc, gchar **argv)
         else
             mmcli_bearer_run_synchronous (connection);
     }
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     /* Sms options? */
     else if (mmcli_sms_options_enabled ()) {
         if (async_flag)
@@ -286,6 +291,7 @@ main (gint argc, gchar **argv)
         else
             mmcli_sms_run_synchronous (connection);
     }
+#endif
     /* Call options? */
     else if (mmcli_call_options_enabled ()) {
         if (async_flag)
@@ -323,6 +329,7 @@ main (gint argc, gchar **argv)
             mmcli_modem_location_run_synchronous (connection);
     }
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     /* Modem Messaging options? */
     else if (mmcli_modem_messaging_options_enabled ()) {
         if (async_flag)
@@ -330,6 +337,7 @@ main (gint argc, gchar **argv)
         else
             mmcli_modem_messaging_run_synchronous (connection);
     }
+#endif
     /* Voice options? */
     else if (mmcli_modem_voice_options_enabled ()) {
         if (async_flag)
@@ -397,8 +405,10 @@ main (gint argc, gchar **argv)
     } else if (mmcli_modem_location_options_enabled ()) {
         mmcli_modem_location_shutdown ();
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     } else if (mmcli_modem_messaging_options_enabled ()) {
         mmcli_modem_messaging_shutdown ();
+#endif
     } else if (mmcli_modem_voice_options_enabled ()) {
            mmcli_modem_voice_shutdown ();
     } else if (mmcli_modem_time_options_enabled ()) {
@@ -413,8 +423,10 @@ main (gint argc, gchar **argv)
         mmcli_sim_shutdown ();
     } else if (mmcli_bearer_options_enabled ()) {
         mmcli_bearer_shutdown ();
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     }  else if (mmcli_sms_options_enabled ()) {
         mmcli_sms_shutdown ();
+#endif
     }  else if (mmcli_call_options_enabled ()) {
         mmcli_call_shutdown ();
     } else if (mmcli_modem_options_enabled ()) {
diff --git a/cli/mmcli.h b/cli/mmcli.h
index 9574ffb..c47588c 100644
--- a/cli/mmcli.h
+++ b/cli/mmcli.h
@@ -79,6 +79,7 @@ void          mmcli_modem_location_run_synchronous    (GDBusConnection *connecti
 void          mmcli_modem_location_shutdown           (void);
 #endif
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 /* Messaging group */
 GOptionGroup *mmcli_modem_messaging_get_option_group   (void);
 gboolean      mmcli_modem_messaging_options_enabled    (void);
@@ -86,6 +87,7 @@ void          mmcli_modem_messaging_run_asynchronous   (GDBusConnection *connect
                                                         GCancellable    *cancellable);
 void          mmcli_modem_messaging_run_synchronous    (GDBusConnection *connection);
 void          mmcli_modem_messaging_shutdown           (void);
+#endif
 
 /* Voice group */
 GOptionGroup *mmcli_modem_voice_get_option_group   (void);
diff --git a/configure.ac b/configure.ac
index 9b57960..f27b33f 100644
--- a/configure.ac
+++ b/configure.ac
@@ -351,6 +351,20 @@ fi
 AC_SUBST(MM_INTERFACE_LOCATION_SUPPORTED)
 
 dnl-----------------------------------------------------------------------------
+dnl Messaging interface
+dnl
+
+AC_ARG_WITH(interface-messaging, AS_HELP_STRING([--without-interface-messaging], [Build without messaging interface support]), [], [with_interface_messaging=yes])
+AM_CONDITIONAL(WITH_INTERFACE_MESSAGING, test "x$with_interface_messaging" = "xyes")
+if test "x$with_interface_messaging" = "xyes"; then
+    MM_INTERFACE_MESSAGING_SUPPORTED=1
+else
+    with_interface_messaging=no
+    MM_INTERFACE_MESSAGING_SUPPORTED=0
+fi
+AC_SUBST(MM_INTERFACE_MESSAGING_SUPPORTED)
+
+dnl-----------------------------------------------------------------------------
 dnl Compiler warnings
 dnl
 
@@ -445,6 +459,7 @@ echo "
 
     Optional interfaces:
       location:                ${with_interface_location}
+      messaging:               ${with_interface_messaging}
 
     Miscellaneous:
       gobject introspection:   ${found_introspection}
diff --git a/include/Makefile.am b/include/Makefile.am
index b022ecb..2dbbb0a 100644
--- a/include/Makefile.am
+++ b/include/Makefile.am
@@ -15,6 +15,10 @@ if WITH_INTERFACE_LOCATION
 include_HEADERS += ModemManager-enums-location.h
 endif
 
+if WITH_INTERFACE_MESSAGING
+include_HEADERS += ModemManager-enums-messaging.h
+endif
+
 ModemManager-names.h: $(XMLS) $(top_srcdir)/build-aux/header-generator.xsl
 	$(AM_V_GEN) $(XSLTPROC) $(top_srcdir)/build-aux/header-generator.xsl $(top_builddir)/introspection/all.xml > $@
 
diff --git a/include/ModemManager-enums-messaging.h b/include/ModemManager-enums-messaging.h
new file mode 100644
index 0000000..775a36e
--- /dev/null
+++ b/include/ModemManager-enums-messaging.h
@@ -0,0 +1,426 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details:
+ *
+ * Copyright (C) 2011 Red Hat, Inc.
+ * Copyright (C) 2011 Google, Inc.
+ * Copyright (C) 2016 Aleksander Morgado <aleksander@aleksander.es>
+ */
+
+#ifndef _MODEMMANAGER_ENUMS_MESSAGING_H_
+#define _MODEMMANAGER_ENUMS_MESSAGING_H_
+
+#if !defined (__MODEM_MANAGER_H_INSIDE__)
+#error "Only <ModemManager.h> can be included directly."
+#endif
+
+/**
+ * SECTION:mm-enums-messaging
+ * @short_description: Messaging-specific enumerations and types in the API.
+ *
+ * This section defines enumerations and types that are used in the
+ * ModemManager Messaging interface.
+ **/
+
+/**
+ * MMSmsPduType:
+ * @MM_SMS_PDU_TYPE_UNKNOWN: Unknown type.
+ * @MM_SMS_PDU_TYPE_DELIVER: 3GPP Mobile-Terminated (MT) message.
+ * @MM_SMS_PDU_TYPE_SUBMIT: 3GPP Mobile-Originated (MO) message.
+ * @MM_SMS_PDU_TYPE_STATUS_REPORT: 3GPP status report (MT).
+ * @MM_SMS_PDU_TYPE_CDMA_DELIVER: 3GPP2 Mobile-Terminated (MT) message.
+ * @MM_SMS_PDU_TYPE_CDMA_SUBMIT: 3GPP2 Mobile-Originated (MO) message.
+ * @MM_SMS_PDU_TYPE_CDMA_CANCELLATION: 3GPP2 Cancellation (MO) message.
+ * @MM_SMS_PDU_TYPE_CDMA_DELIVERY_ACKNOWLEDGEMENT: 3GPP2 Delivery Acknowledgement (MT) message.
+ * @MM_SMS_PDU_TYPE_CDMA_USER_ACKNOWLEDGEMENT: 3GPP2 User Acknowledgement (MT or MO) message.
+ * @MM_SMS_PDU_TYPE_CDMA_READ_ACKNOWLEDGEMENT: 3GPP2 Read Acknowledgement (MT or MO) message.
+ *
+ * Type of PDUs used in the SMS.
+ */
+typedef enum { /*< underscore_name=mm_sms_pdu_type >*/
+    MM_SMS_PDU_TYPE_UNKNOWN = 0,
+    MM_SMS_PDU_TYPE_DELIVER       = 1,
+    MM_SMS_PDU_TYPE_SUBMIT        = 2,
+    MM_SMS_PDU_TYPE_STATUS_REPORT = 3,
+    MM_SMS_PDU_TYPE_CDMA_DELIVER                  = 32,
+    MM_SMS_PDU_TYPE_CDMA_SUBMIT                   = 33,
+    MM_SMS_PDU_TYPE_CDMA_CANCELLATION             = 34,
+    MM_SMS_PDU_TYPE_CDMA_DELIVERY_ACKNOWLEDGEMENT = 35,
+    MM_SMS_PDU_TYPE_CDMA_USER_ACKNOWLEDGEMENT     = 36,
+    MM_SMS_PDU_TYPE_CDMA_READ_ACKNOWLEDGEMENT     = 37,
+} MMSmsPduType;
+
+/**
+ * MMSmsState:
+ * @MM_SMS_STATE_UNKNOWN: State unknown or not reportable.
+ * @MM_SMS_STATE_STORED: The message has been neither received nor yet sent.
+ * @MM_SMS_STATE_RECEIVING: The message is being received but is not yet complete.
+ * @MM_SMS_STATE_RECEIVED: The message has been completely received.
+ * @MM_SMS_STATE_SENDING: The message is queued for delivery.
+ * @MM_SMS_STATE_SENT: The message was successfully sent.
+ *
+ * State of a given SMS.
+ */
+typedef enum { /*< underscore_name=mm_sms_state >*/
+    MM_SMS_STATE_UNKNOWN   = 0,
+    MM_SMS_STATE_STORED    = 1,
+    MM_SMS_STATE_RECEIVING = 2,
+    MM_SMS_STATE_RECEIVED  = 3,
+    MM_SMS_STATE_SENDING   = 4,
+    MM_SMS_STATE_SENT      = 5,
+} MMSmsState;
+
+/**
+ * MMSmsDeliveryState:
+ * @MM_SMS_DELIVERY_STATE_COMPLETED_RECEIVED: Delivery completed, message received by the SME.
+ * @MM_SMS_DELIVERY_STATE_COMPLETED_FORWARDED_UNCONFIRMED: Forwarded by the SC to the SME but the SC is unable to confirm delivery.
+ * @MM_SMS_DELIVERY_STATE_COMPLETED_REPLACED_BY_SC: Message replaced by the SC.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_CONGESTION: Temporary error, congestion.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_SME_BUSY: Temporary error, SME busy.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_NO_RESPONSE_FROM_SME: Temporary error, no response from the SME.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_SERVICE_REJECTED: Temporary error, service rejected.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_QOS_NOT_AVAILABLE: Temporary error, QoS not available.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_IN_SME: Temporary error in the SME.
+ * @MM_SMS_DELIVERY_STATE_ERROR_REMOTE_PROCEDURE: Permanent remote procedure error.
+ * @MM_SMS_DELIVERY_STATE_ERROR_INCOMPATIBLE_DESTINATION: Permanent error, incompatible destination.
+ * @MM_SMS_DELIVERY_STATE_ERROR_CONNECTION_REJECTED: Permanent error, connection rejected by the SME.
+ * @MM_SMS_DELIVERY_STATE_ERROR_NOT_OBTAINABLE: Permanent error, not obtainable.
+ * @MM_SMS_DELIVERY_STATE_ERROR_QOS_NOT_AVAILABLE: Permanent error, QoS not available.
+ * @MM_SMS_DELIVERY_STATE_ERROR_NO_INTERWORKING_AVAILABLE: Permanent error, no interworking available.
+ * @MM_SMS_DELIVERY_STATE_ERROR_VALIDITY_PERIOD_EXPIRED: Permanent error, message validity period expired.
+ * @MM_SMS_DELIVERY_STATE_ERROR_DELETED_BY_ORIGINATING_SME: Permanent error, deleted by originating SME.
+ * @MM_SMS_DELIVERY_STATE_ERROR_DELETED_BY_SC_ADMINISTRATION: Permanent error, deleted by SC administration.
+ * @MM_SMS_DELIVERY_STATE_ERROR_MESSAGE_DOES_NOT_EXIST: Permanent error, message does no longer exist.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_CONGESTION: Permanent error, congestion.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_SME_BUSY: Permanent error, SME busy.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_NO_RESPONSE_FROM_SME: Permanent error, no response from the SME.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_SERVICE_REJECTED: Permanent error, service rejected.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_QOS_NOT_AVAILABLE: Permanent error, QoS not available.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_IN_SME: Permanent error in SME.
+ * @MM_SMS_DELIVERY_STATE_UNKNOWN: Unknown state.
+ * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_ADDRESS_VACANT: Permanent error in network, address vacant.
+ * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE: Permanent error in network, address translation failure.
+ * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE: Permanent error in network, network resource outage.
+ * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_NETWORK_FAILURE: Permanent error in network, network failure.
+ * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_INVALID_TELESERVICE_ID: Permanent error in network, invalid teleservice id.
+ * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_OTHER: Permanent error, other network problem.
+ * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_NO_PAGE_RESPONSE: Permanent error in terminal, no page response.
+ * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_BUSY: Permanent error in terminal, destination busy.
+ * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT: Permanent error in terminal, no acknowledgement.
+ * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE: Permanent error in terminal, destination resource shortage.
+ * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED: Permanent error in terminal, SMS delivery postponed.
+ * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE: Permanent error in terminal, destination out of service.
+ * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS: Permanent error in terminal, destination no longer at this address.
+ * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_OTHER: Permanent error, other terminal problem.
+ * @MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE: Permanent error in radio interface, resource shortage.
+ * @MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY: Permanent error in radio interface, problem incompatibility.
+ * @MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_OTHER: Permanent error, other radio interface problem.
+ * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_ENCODING: Permanent error, encoding.
+ * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED: Permanent error, SMS origination denied.
+ * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_TERMINATION_DENIED: Permanent error, SMS termination denied.
+ * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED: Permanent error, supplementary service not supported.
+ * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_NOT_SUPPORTED: Permanent error, SMS not supported.
+ * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER: Permanent error, missing expected parameter.
+ * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER: Permanent error, missing mandatory parameter.
+ * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE: Permanent error, unrecognized parameter value.
+ * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE: Permanent error, unexpected parameter value.
+ * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR: Permanent error, user data size error.
+ * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_OTHER: Permanent error, other general problem.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_ADDRESS_VACANT: Temporary error in network, address vacant.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE: Temporary error in network, address translation failure.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE: Temporary error in network, network resource outage.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_NETWORK_FAILURE: Temporary error in network, network failure.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_INVALID_TELESERVICE_ID: Temporary error in network, invalid teleservice id.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_OTHER: Temporary error, other network problem.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_NO_PAGE_RESPONSE: Temporary error in terminal, no page response.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_BUSY: Temporary error in terminal, destination busy.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT: Temporary error in terminal, no acknowledgement.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE: Temporary error in terminal, destination resource shortage.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED: Temporary error in terminal, SMS delivery postponed.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE: Temporary error in terminal, destination out of service.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS: Temporary error in terminal, destination no longer at this address.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_OTHER: Temporary error, other terminal problem.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE: Temporary error in radio interface, resource shortage.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY: Temporary error in radio interface, problem incompatibility.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_OTHER: Temporary error, other radio interface problem.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_ENCODING: Temporary error, encoding.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED: Temporary error, SMS origination denied.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_TERMINATION_DENIED: Temporary error, SMS termination denied.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED: Temporary error, supplementary service not supported.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_NOT_SUPPORTED: Temporary error, SMS not supported.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER: Temporary error, missing expected parameter.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER: Temporary error, missing mandatory parameter.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE: Temporary error, unrecognized parameter value.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE: Temporary error, unexpected parameter value.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR: Temporary error, user data size error.
+ * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_OTHER: Temporary error, other general problem.
+ *
+ * Enumeration of known SMS delivery states as defined in 3GPP TS 03.40 and
+ * 3GPP2 N.S0005-O, section 6.5.2.125.
+ *
+ * States out of the known ranges may also be valid (either reserved or SC-specific).
+ */
+typedef enum { /*< underscore_name=mm_sms_delivery_state >*/
+    /* --------------- 3GPP specific errors ---------------------- */
+
+    /* Completed deliveries */
+    MM_SMS_DELIVERY_STATE_COMPLETED_RECEIVED              = 0x00,
+    MM_SMS_DELIVERY_STATE_COMPLETED_FORWARDED_UNCONFIRMED = 0x01,
+    MM_SMS_DELIVERY_STATE_COMPLETED_REPLACED_BY_SC        = 0x02,
+
+    /* Temporary failures */
+    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_CONGESTION           = 0x20,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_SME_BUSY             = 0x21,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_NO_RESPONSE_FROM_SME = 0x22,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_SERVICE_REJECTED     = 0x23,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_QOS_NOT_AVAILABLE    = 0x24,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_IN_SME               = 0x25,
+
+    /* Permanent failures */
+    MM_SMS_DELIVERY_STATE_ERROR_REMOTE_PROCEDURE             = 0x40,
+    MM_SMS_DELIVERY_STATE_ERROR_INCOMPATIBLE_DESTINATION     = 0x41,
+    MM_SMS_DELIVERY_STATE_ERROR_CONNECTION_REJECTED          = 0x42,
+    MM_SMS_DELIVERY_STATE_ERROR_NOT_OBTAINABLE               = 0x43,
+    MM_SMS_DELIVERY_STATE_ERROR_QOS_NOT_AVAILABLE            = 0x44,
+    MM_SMS_DELIVERY_STATE_ERROR_NO_INTERWORKING_AVAILABLE    = 0x45,
+    MM_SMS_DELIVERY_STATE_ERROR_VALIDITY_PERIOD_EXPIRED      = 0x46,
+    MM_SMS_DELIVERY_STATE_ERROR_DELETED_BY_ORIGINATING_SME   = 0x47,
+    MM_SMS_DELIVERY_STATE_ERROR_DELETED_BY_SC_ADMINISTRATION = 0x48,
+    MM_SMS_DELIVERY_STATE_ERROR_MESSAGE_DOES_NOT_EXIST       = 0x49,
+
+    /* Temporary failures that became permanent */
+    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_CONGESTION           = 0x60,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_SME_BUSY             = 0x61,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_NO_RESPONSE_FROM_SME = 0x62,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_SERVICE_REJECTED     = 0x63,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_QOS_NOT_AVAILABLE    = 0x64,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_IN_SME               = 0x65,
+
+    /* Unknown, out of any possible valid value [0x00-0xFF] */
+    MM_SMS_DELIVERY_STATE_UNKNOWN = 0x100,
+
+    /* --------------- 3GPP2 specific errors ---------------------- */
+
+    /* Network problems */
+    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_ADDRESS_VACANT              = 0x200,
+    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE = 0x201,
+    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE     = 0x202,
+    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_NETWORK_FAILURE             = 0x203,
+    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_INVALID_TELESERVICE_ID      = 0x204,
+    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_OTHER                       = 0x205,
+    /* Terminal problems */
+    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_NO_PAGE_RESPONSE                      = 0x220,
+    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_BUSY                      = 0x221,
+    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT                     = 0x222,
+    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE         = 0x223,
+    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED                = 0x224,
+    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE            = 0x225,
+    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS = 0x226,
+    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_OTHER                                 = 0x227,
+    /* Radio problems */
+    MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE = 0x240,
+    MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY   = 0x241,
+    MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_OTHER             = 0x242,
+    /* General problems */
+    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_ENCODING                            = 0x260,
+    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED              = 0x261,
+    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_TERMINATION_DENIED              = 0x262,
+    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED = 0x263,
+    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_NOT_SUPPORTED                   = 0x264,
+    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER          = 0x266,
+    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER         = 0x267,
+    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE        = 0x268,
+    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE          = 0x269,
+    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR                = 0x26A,
+    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_OTHER                               = 0x26B,
+
+    /* Temporary network problems */
+    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_ADDRESS_VACANT              = 0x300,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE = 0x301,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE     = 0x302,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_NETWORK_FAILURE             = 0x303,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_INVALID_TELESERVICE_ID      = 0x304,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_OTHER                       = 0x305,
+    /* Temporary terminal problems */
+    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_NO_PAGE_RESPONSE                      = 0x320,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_BUSY                      = 0x321,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT                     = 0x322,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE         = 0x323,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED                = 0x324,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE            = 0x325,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS = 0x326,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_OTHER                                 = 0x327,
+    /* Temporary radio problems */
+    MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE = 0x340,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY   = 0x341,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_OTHER             = 0x342,
+    /* Temporary general problems */
+    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_ENCODING                            = 0x360,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED              = 0x361,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_TERMINATION_DENIED              = 0x362,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED = 0x363,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_NOT_SUPPORTED                   = 0x364,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER          = 0x366,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER         = 0x367,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE        = 0x368,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE          = 0x369,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR                = 0x36A,
+    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_OTHER                               = 0x36B,
+} MMSmsDeliveryState;
+
+/**
+ * MMSmsStorage:
+ * @MM_SMS_STORAGE_UNKNOWN: Storage unknown.
+ * @MM_SMS_STORAGE_SM: SIM card storage area.
+ * @MM_SMS_STORAGE_ME: Mobile equipment storage area.
+ * @MM_SMS_STORAGE_MT: Sum of SIM and Mobile equipment storages
+ * @MM_SMS_STORAGE_SR: Status report message storage area.
+ * @MM_SMS_STORAGE_BM: Broadcast message storage area.
+ * @MM_SMS_STORAGE_TA: Terminal adaptor message storage area.
+ *
+ * Storage for SMS messages.
+ */
+typedef enum { /*< underscore_name=mm_sms_storage >*/
+    MM_SMS_STORAGE_UNKNOWN = 0,
+    MM_SMS_STORAGE_SM      = 1,
+    MM_SMS_STORAGE_ME      = 2,
+    MM_SMS_STORAGE_MT      = 3,
+    MM_SMS_STORAGE_SR      = 4,
+    MM_SMS_STORAGE_BM      = 5,
+    MM_SMS_STORAGE_TA      = 6,
+} MMSmsStorage;
+
+/**
+ * MMSmsValidityType:
+ * @MM_SMS_VALIDITY_TYPE_UNKNOWN: Validity type unknown.
+ * @MM_SMS_VALIDITY_TYPE_RELATIVE: Relative validity.
+ * @MM_SMS_VALIDITY_TYPE_ABSOLUTE: Absolute validity.
+ * @MM_SMS_VALIDITY_TYPE_ENHANCED: Enhanced validity.
+ *
+ * Type of SMS validity value.
+ */
+typedef enum { /*< underscore_name=mm_sms_validity_type >*/
+    MM_SMS_VALIDITY_TYPE_UNKNOWN  = 0,
+    MM_SMS_VALIDITY_TYPE_RELATIVE = 1,
+    MM_SMS_VALIDITY_TYPE_ABSOLUTE = 2,
+    MM_SMS_VALIDITY_TYPE_ENHANCED = 3,
+} MMSmsValidityType;
+
+/**
+ * MMSmsCdmaTeleserviceId:
+ * @MM_SMS_CDMA_TELESERVICE_ID_UNKNOWN: Unknown.
+ * @MM_SMS_CDMA_TELESERVICE_ID_CMT91: IS-91 Extended Protocol Enhanced Services.
+ * @MM_SMS_CDMA_TELESERVICE_ID_WPT: Wireless Paging Teleservice.
+ * @MM_SMS_CDMA_TELESERVICE_ID_WMT: Wireless Messaging Teleservice.
+ * @MM_SMS_CDMA_TELESERVICE_ID_VMN: Voice Mail Notification.
+ * @MM_SMS_CDMA_TELESERVICE_ID_WAP: Wireless Application Protocol.
+ * @MM_SMS_CDMA_TELESERVICE_ID_WEMT: Wireless Enhanced Messaging Teleservice.
+ * @MM_SMS_CDMA_TELESERVICE_ID_SCPT: Service Category Programming Teleservice.
+ * @MM_SMS_CDMA_TELESERVICE_ID_CATPT: Card Application Toolkit Protocol Teleservice.
+ *
+ * Teleservice IDs supported for CDMA SMS, as defined in 3GPP2 X.S0004-550-E
+ * (section 2.256) and 3GPP2 C.S0015-B (section 3.4.3.1).
+ */
+typedef enum { /*< underscore_name=mm_sms_cdma_teleservice_id >*/
+    MM_SMS_CDMA_TELESERVICE_ID_UNKNOWN = 0x0000,
+    MM_SMS_CDMA_TELESERVICE_ID_CMT91   = 0x1000,
+    MM_SMS_CDMA_TELESERVICE_ID_WPT     = 0x1001,
+    MM_SMS_CDMA_TELESERVICE_ID_WMT     = 0x1002,
+    MM_SMS_CDMA_TELESERVICE_ID_VMN     = 0x1003,
+    MM_SMS_CDMA_TELESERVICE_ID_WAP     = 0x1004,
+    MM_SMS_CDMA_TELESERVICE_ID_WEMT    = 0x1005,
+    MM_SMS_CDMA_TELESERVICE_ID_SCPT    = 0x1006,
+    MM_SMS_CDMA_TELESERVICE_ID_CATPT   = 0x1007,
+} MMSmsCdmaTeleserviceId;
+
+/**
+ * MMSmsCdmaServiceCategory:
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_UNKNOWN: Unknown.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_EMERGENCY_BROADCAST: Emergency broadcast.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_ADMINISTRATIVE: Administrative.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_MAINTENANCE: Maintenance.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_LOCAL: General news (local).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_REGIONAL: General news (regional).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_NATIONAL: General news (national).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_INTERNATIONAL: General news (international).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_LOCAL: Business/Financial news (local).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_REGIONAL: Business/Financial news (regional).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_NATIONAL: Business/Financial news (national).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_INTERNATIONAL: Business/Financial news (international).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_LOCAL: Sports news (local).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_REGIONAL: Sports news (regional).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_NATIONAL: Sports news (national).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_INTERNATIONAL: Sports news (international).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_LOCAL: Entertainment news (local).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_REGIONAL: Entertainment news (regional).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_NATIONAL: Entertainment news (national).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_INTERNATIONAL: Entertainment news (international).
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_LOCAL_WEATHER: Local weather.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_TRAFFIC_REPORT: Area traffic report.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_FLIGHT_SCHEDULES: Local airport flight schedules.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_RESTAURANTS: Restaurants.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_LODGINGS: Lodgings.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_RETAIL_DIRECTORY: Retail directory.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_ADVERTISEMENTS: Advertisements.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_STOCK_QUOTES: Stock quotes.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_EMPLOYMENT: Employment.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_HOSPITALS: Medical / Health / Hospitals.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_TECHNOLOGY_NEWS: Technology news.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_MULTICATEGORY: Multi-category.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_PRESIDENTIAL_ALERT: Presidential alert.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_EXTREME_THREAT: Extreme threat.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_SEVERE_THREAT: Severe threat.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_CHILD_ABDUCTION_EMERGENCY: Child abduction emergency.
+ * @MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_TEST: CMAS test.
+ *
+ * Service category for CDMA SMS, as defined in 3GPP2 C.R1001-D (section 9.3).
+ */
+typedef enum { /*< underscore_name=mm_sms_cdma_service_category >*/
+    MM_SMS_CDMA_SERVICE_CATEGORY_UNKNOWN                          = 0x0000,
+    MM_SMS_CDMA_SERVICE_CATEGORY_EMERGENCY_BROADCAST              = 0x0001,
+    MM_SMS_CDMA_SERVICE_CATEGORY_ADMINISTRATIVE                   = 0x0002,
+    MM_SMS_CDMA_SERVICE_CATEGORY_MAINTENANCE                      = 0x0003,
+    MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_LOCAL               = 0x0004,
+    MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_REGIONAL            = 0x0005,
+    MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_NATIONAL            = 0x0006,
+    MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_INTERNATIONAL       = 0x0007,
+    MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_LOCAL              = 0x0008,
+    MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_REGIONAL           = 0x0009,
+    MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_NATIONAL           = 0x000A,
+    MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_INTERNATIONAL      = 0x000B,
+    MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_LOCAL                = 0x000C,
+    MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_REGIONAL             = 0x000D,
+    MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_NATIONAL             = 0x000E,
+    MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_INTERNATIONAL        = 0x000F,
+    MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_LOCAL         = 0x0010,
+    MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_REGIONAL      = 0x0011,
+    MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_NATIONAL      = 0x0012,
+    MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_INTERNATIONAL = 0x0013,
+    MM_SMS_CDMA_SERVICE_CATEGORY_LOCAL_WEATHER                    = 0x0014,
+    MM_SMS_CDMA_SERVICE_CATEGORY_TRAFFIC_REPORT                   = 0x0015,
+    MM_SMS_CDMA_SERVICE_CATEGORY_FLIGHT_SCHEDULES                 = 0x0016,
+    MM_SMS_CDMA_SERVICE_CATEGORY_RESTAURANTS                      = 0x0017,
+    MM_SMS_CDMA_SERVICE_CATEGORY_LODGINGS                         = 0x0018,
+    MM_SMS_CDMA_SERVICE_CATEGORY_RETAIL_DIRECTORY                 = 0x0019,
+    MM_SMS_CDMA_SERVICE_CATEGORY_ADVERTISEMENTS                   = 0x001A,
+    MM_SMS_CDMA_SERVICE_CATEGORY_STOCK_QUOTES                     = 0x001B,
+    MM_SMS_CDMA_SERVICE_CATEGORY_EMPLOYMENT                       = 0x001C,
+    MM_SMS_CDMA_SERVICE_CATEGORY_HOSPITALS                        = 0x001D,
+    MM_SMS_CDMA_SERVICE_CATEGORY_TECHNOLOGY_NEWS                  = 0x001E,
+    MM_SMS_CDMA_SERVICE_CATEGORY_MULTICATEGORY                    = 0x001F,
+    MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_PRESIDENTIAL_ALERT          = 0x1000,
+    MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_EXTREME_THREAT              = 0x1001,
+    MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_SEVERE_THREAT               = 0x1002,
+    MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_CHILD_ABDUCTION_EMERGENCY   = 0x1003,
+    MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_TEST                        = 0x1004,
+} MMSmsCdmaServiceCategory;
+
+#endif /*  _MODEMMANAGER_ENUMS_MESSAGING_H_ */
diff --git a/include/ModemManager-enums.h b/include/ModemManager-enums.h
index 79f349d..d0eabe9 100644
--- a/include/ModemManager-enums.h
+++ b/include/ModemManager-enums.h
@@ -419,399 +419,6 @@ typedef enum { /*< underscore_name=mm_modem_port_type >*/
 } MMModemPortType;
 
 /**
- * MMSmsPduType:
- * @MM_SMS_PDU_TYPE_UNKNOWN: Unknown type.
- * @MM_SMS_PDU_TYPE_DELIVER: 3GPP Mobile-Terminated (MT) message.
- * @MM_SMS_PDU_TYPE_SUBMIT: 3GPP Mobile-Originated (MO) message.
- * @MM_SMS_PDU_TYPE_STATUS_REPORT: 3GPP status report (MT).
- * @MM_SMS_PDU_TYPE_CDMA_DELIVER: 3GPP2 Mobile-Terminated (MT) message.
- * @MM_SMS_PDU_TYPE_CDMA_SUBMIT: 3GPP2 Mobile-Originated (MO) message.
- * @MM_SMS_PDU_TYPE_CDMA_CANCELLATION: 3GPP2 Cancellation (MO) message.
- * @MM_SMS_PDU_TYPE_CDMA_DELIVERY_ACKNOWLEDGEMENT: 3GPP2 Delivery Acknowledgement (MT) message.
- * @MM_SMS_PDU_TYPE_CDMA_USER_ACKNOWLEDGEMENT: 3GPP2 User Acknowledgement (MT or MO) message.
- * @MM_SMS_PDU_TYPE_CDMA_READ_ACKNOWLEDGEMENT: 3GPP2 Read Acknowledgement (MT or MO) message.
- *
- * Type of PDUs used in the SMS.
- */
-typedef enum { /*< underscore_name=mm_sms_pdu_type >*/
-    MM_SMS_PDU_TYPE_UNKNOWN = 0,
-    MM_SMS_PDU_TYPE_DELIVER       = 1,
-    MM_SMS_PDU_TYPE_SUBMIT        = 2,
-    MM_SMS_PDU_TYPE_STATUS_REPORT = 3,
-    MM_SMS_PDU_TYPE_CDMA_DELIVER                  = 32,
-    MM_SMS_PDU_TYPE_CDMA_SUBMIT                   = 33,
-    MM_SMS_PDU_TYPE_CDMA_CANCELLATION             = 34,
-    MM_SMS_PDU_TYPE_CDMA_DELIVERY_ACKNOWLEDGEMENT = 35,
-    MM_SMS_PDU_TYPE_CDMA_USER_ACKNOWLEDGEMENT     = 36,
-    MM_SMS_PDU_TYPE_CDMA_READ_ACKNOWLEDGEMENT     = 37,
-} MMSmsPduType;
-
-/**
- * MMSmsState:
- * @MM_SMS_STATE_UNKNOWN: State unknown or not reportable.
- * @MM_SMS_STATE_STORED: The message has been neither received nor yet sent.
- * @MM_SMS_STATE_RECEIVING: The message is being received but is not yet complete.
- * @MM_SMS_STATE_RECEIVED: The message has been completely received.
- * @MM_SMS_STATE_SENDING: The message is queued for delivery.
- * @MM_SMS_STATE_SENT: The message was successfully sent.
- *
- * State of a given SMS.
- */
-typedef enum { /*< underscore_name=mm_sms_state >*/
-    MM_SMS_STATE_UNKNOWN   = 0,
-    MM_SMS_STATE_STORED    = 1,
-    MM_SMS_STATE_RECEIVING = 2,
-    MM_SMS_STATE_RECEIVED  = 3,
-    MM_SMS_STATE_SENDING   = 4,
-    MM_SMS_STATE_SENT      = 5,
-} MMSmsState;
-
-/**
- * MMSmsDeliveryState:
- * @MM_SMS_DELIVERY_STATE_COMPLETED_RECEIVED: Delivery completed, message received by the SME.
- * @MM_SMS_DELIVERY_STATE_COMPLETED_FORWARDED_UNCONFIRMED: Forwarded by the SC to the SME but the SC is unable to confirm delivery.
- * @MM_SMS_DELIVERY_STATE_COMPLETED_REPLACED_BY_SC: Message replaced by the SC.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_CONGESTION: Temporary error, congestion.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_SME_BUSY: Temporary error, SME busy.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_NO_RESPONSE_FROM_SME: Temporary error, no response from the SME.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_SERVICE_REJECTED: Temporary error, service rejected.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_QOS_NOT_AVAILABLE: Temporary error, QoS not available.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_IN_SME: Temporary error in the SME.
- * @MM_SMS_DELIVERY_STATE_ERROR_REMOTE_PROCEDURE: Permanent remote procedure error.
- * @MM_SMS_DELIVERY_STATE_ERROR_INCOMPATIBLE_DESTINATION: Permanent error, incompatible destination.
- * @MM_SMS_DELIVERY_STATE_ERROR_CONNECTION_REJECTED: Permanent error, connection rejected by the SME.
- * @MM_SMS_DELIVERY_STATE_ERROR_NOT_OBTAINABLE: Permanent error, not obtainable.
- * @MM_SMS_DELIVERY_STATE_ERROR_QOS_NOT_AVAILABLE: Permanent error, QoS not available.
- * @MM_SMS_DELIVERY_STATE_ERROR_NO_INTERWORKING_AVAILABLE: Permanent error, no interworking available.
- * @MM_SMS_DELIVERY_STATE_ERROR_VALIDITY_PERIOD_EXPIRED: Permanent error, message validity period expired.
- * @MM_SMS_DELIVERY_STATE_ERROR_DELETED_BY_ORIGINATING_SME: Permanent error, deleted by originating SME.
- * @MM_SMS_DELIVERY_STATE_ERROR_DELETED_BY_SC_ADMINISTRATION: Permanent error, deleted by SC administration.
- * @MM_SMS_DELIVERY_STATE_ERROR_MESSAGE_DOES_NOT_EXIST: Permanent error, message does no longer exist.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_CONGESTION: Permanent error, congestion.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_SME_BUSY: Permanent error, SME busy.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_NO_RESPONSE_FROM_SME: Permanent error, no response from the SME.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_SERVICE_REJECTED: Permanent error, service rejected.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_QOS_NOT_AVAILABLE: Permanent error, QoS not available.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_IN_SME: Permanent error in SME.
- * @MM_SMS_DELIVERY_STATE_UNKNOWN: Unknown state.
- * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_ADDRESS_VACANT: Permanent error in network, address vacant.
- * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE: Permanent error in network, address translation failure.
- * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE: Permanent error in network, network resource outage.
- * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_NETWORK_FAILURE: Permanent error in network, network failure.
- * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_INVALID_TELESERVICE_ID: Permanent error in network, invalid teleservice id.
- * @MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_OTHER: Permanent error, other network problem.
- * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_NO_PAGE_RESPONSE: Permanent error in terminal, no page response.
- * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_BUSY: Permanent error in terminal, destination busy.
- * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT: Permanent error in terminal, no acknowledgement.
- * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE: Permanent error in terminal, destination resource shortage.
- * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED: Permanent error in terminal, SMS delivery postponed.
- * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE: Permanent error in terminal, destination out of service.
- * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS: Permanent error in terminal, destination no longer at this address.
- * @MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_OTHER: Permanent error, other terminal problem.
- * @MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE: Permanent error in radio interface, resource shortage.
- * @MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY: Permanent error in radio interface, problem incompatibility.
- * @MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_OTHER: Permanent error, other radio interface problem.
- * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_ENCODING: Permanent error, encoding.
- * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED: Permanent error, SMS origination denied.
- * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_TERMINATION_DENIED: Permanent error, SMS termination denied.
- * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED: Permanent error, supplementary service not supported.
- * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_NOT_SUPPORTED: Permanent error, SMS not supported.
- * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER: Permanent error, missing expected parameter.
- * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER: Permanent error, missing mandatory parameter.
- * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE: Permanent error, unrecognized parameter value.
- * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE: Permanent error, unexpected parameter value.
- * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR: Permanent error, user data size error.
- * @MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_OTHER: Permanent error, other general problem.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_ADDRESS_VACANT: Temporary error in network, address vacant.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE: Temporary error in network, address translation failure.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE: Temporary error in network, network resource outage.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_NETWORK_FAILURE: Temporary error in network, network failure.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_INVALID_TELESERVICE_ID: Temporary error in network, invalid teleservice id.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_OTHER: Temporary error, other network problem.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_NO_PAGE_RESPONSE: Temporary error in terminal, no page response.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_BUSY: Temporary error in terminal, destination busy.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT: Temporary error in terminal, no acknowledgement.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE: Temporary error in terminal, destination resource shortage.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED: Temporary error in terminal, SMS delivery postponed.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE: Temporary error in terminal, destination out of service.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS: Temporary error in terminal, destination no longer at this address.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_OTHER: Temporary error, other terminal problem.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE: Temporary error in radio interface, resource shortage.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY: Temporary error in radio interface, problem incompatibility.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_OTHER: Temporary error, other radio interface problem.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_ENCODING: Temporary error, encoding.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED: Temporary error, SMS origination denied.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_TERMINATION_DENIED: Temporary error, SMS termination denied.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED: Temporary error, supplementary service not supported.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_NOT_SUPPORTED: Temporary error, SMS not supported.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER: Temporary error, missing expected parameter.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER: Temporary error, missing mandatory parameter.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE: Temporary error, unrecognized parameter value.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE: Temporary error, unexpected parameter value.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR: Temporary error, user data size error.
- * @MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_OTHER: Temporary error, other general problem.
- *
- * Enumeration of known SMS delivery states as defined in 3GPP TS 03.40 and
- * 3GPP2 N.S0005-O, section 6.5.2.125.
- *
- * States out of the known ranges may also be valid (either reserved or SC-specific).
- */
-typedef enum { /*< underscore_name=mm_sms_delivery_state >*/
-    /* --------------- 3GPP specific errors ---------------------- */
-
-    /* Completed deliveries */
-    MM_SMS_DELIVERY_STATE_COMPLETED_RECEIVED              = 0x00,
-    MM_SMS_DELIVERY_STATE_COMPLETED_FORWARDED_UNCONFIRMED = 0x01,
-    MM_SMS_DELIVERY_STATE_COMPLETED_REPLACED_BY_SC        = 0x02,
-
-    /* Temporary failures */
-    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_CONGESTION           = 0x20,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_SME_BUSY             = 0x21,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_NO_RESPONSE_FROM_SME = 0x22,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_SERVICE_REJECTED     = 0x23,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_QOS_NOT_AVAILABLE    = 0x24,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_IN_SME               = 0x25,
-
-    /* Permanent failures */
-    MM_SMS_DELIVERY_STATE_ERROR_REMOTE_PROCEDURE             = 0x40,
-    MM_SMS_DELIVERY_STATE_ERROR_INCOMPATIBLE_DESTINATION     = 0x41,
-    MM_SMS_DELIVERY_STATE_ERROR_CONNECTION_REJECTED          = 0x42,
-    MM_SMS_DELIVERY_STATE_ERROR_NOT_OBTAINABLE               = 0x43,
-    MM_SMS_DELIVERY_STATE_ERROR_QOS_NOT_AVAILABLE            = 0x44,
-    MM_SMS_DELIVERY_STATE_ERROR_NO_INTERWORKING_AVAILABLE    = 0x45,
-    MM_SMS_DELIVERY_STATE_ERROR_VALIDITY_PERIOD_EXPIRED      = 0x46,
-    MM_SMS_DELIVERY_STATE_ERROR_DELETED_BY_ORIGINATING_SME   = 0x47,
-    MM_SMS_DELIVERY_STATE_ERROR_DELETED_BY_SC_ADMINISTRATION = 0x48,
-    MM_SMS_DELIVERY_STATE_ERROR_MESSAGE_DOES_NOT_EXIST       = 0x49,
-
-    /* Temporary failures that became permanent */
-    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_CONGESTION           = 0x60,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_SME_BUSY             = 0x61,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_NO_RESPONSE_FROM_SME = 0x62,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_SERVICE_REJECTED     = 0x63,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_QOS_NOT_AVAILABLE    = 0x64,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_IN_SME               = 0x65,
-
-    /* Unknown, out of any possible valid value [0x00-0xFF] */
-    MM_SMS_DELIVERY_STATE_UNKNOWN = 0x100,
-
-    /* --------------- 3GPP2 specific errors ---------------------- */
-
-    /* Network problems */
-    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_ADDRESS_VACANT              = 0x200,
-    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE = 0x201,
-    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE     = 0x202,
-    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_NETWORK_FAILURE             = 0x203,
-    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_INVALID_TELESERVICE_ID      = 0x204,
-    MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_OTHER                       = 0x205,
-    /* Terminal problems */
-    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_NO_PAGE_RESPONSE                      = 0x220,
-    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_BUSY                      = 0x221,
-    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT                     = 0x222,
-    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE         = 0x223,
-    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED                = 0x224,
-    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE            = 0x225,
-    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS = 0x226,
-    MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_OTHER                                 = 0x227,
-    /* Radio problems */
-    MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE = 0x240,
-    MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY   = 0x241,
-    MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_OTHER             = 0x242,
-    /* General problems */
-    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_ENCODING                            = 0x260,
-    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED              = 0x261,
-    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_TERMINATION_DENIED              = 0x262,
-    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED = 0x263,
-    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_NOT_SUPPORTED                   = 0x264,
-    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER          = 0x266,
-    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER         = 0x267,
-    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE        = 0x268,
-    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE          = 0x269,
-    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR                = 0x26A,
-    MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_OTHER                               = 0x26B,
-
-    /* Temporary network problems */
-    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_ADDRESS_VACANT              = 0x300,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE = 0x301,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE     = 0x302,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_NETWORK_FAILURE             = 0x303,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_INVALID_TELESERVICE_ID      = 0x304,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_OTHER                       = 0x305,
-    /* Temporary terminal problems */
-    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_NO_PAGE_RESPONSE                      = 0x320,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_BUSY                      = 0x321,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT                     = 0x322,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE         = 0x323,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED                = 0x324,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE            = 0x325,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS = 0x326,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_OTHER                                 = 0x327,
-    /* Temporary radio problems */
-    MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE = 0x340,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY   = 0x341,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_OTHER             = 0x342,
-    /* Temporary general problems */
-    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_ENCODING                            = 0x360,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED              = 0x361,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_TERMINATION_DENIED              = 0x362,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED = 0x363,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_NOT_SUPPORTED                   = 0x364,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER          = 0x366,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER         = 0x367,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE        = 0x368,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE          = 0x369,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR                = 0x36A,
-    MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_OTHER                               = 0x36B,
-} MMSmsDeliveryState;
-
-/**
- * MMSmsStorage:
- * @MM_SMS_STORAGE_UNKNOWN: Storage unknown.
- * @MM_SMS_STORAGE_SM: SIM card storage area.
- * @MM_SMS_STORAGE_ME: Mobile equipment storage area.
- * @MM_SMS_STORAGE_MT: Sum of SIM and Mobile equipment storages
- * @MM_SMS_STORAGE_SR: Status report message storage area.
- * @MM_SMS_STORAGE_BM: Broadcast message storage area.
- * @MM_SMS_STORAGE_TA: Terminal adaptor message storage area.
- *
- * Storage for SMS messages.
- */
-typedef enum { /*< underscore_name=mm_sms_storage >*/
-    MM_SMS_STORAGE_UNKNOWN = 0,
-    MM_SMS_STORAGE_SM      = 1,
-    MM_SMS_STORAGE_ME      = 2,
-    MM_SMS_STORAGE_MT      = 3,
-    MM_SMS_STORAGE_SR      = 4,
-    MM_SMS_STORAGE_BM      = 5,
-    MM_SMS_STORAGE_TA      = 6,
-} MMSmsStorage;
-
-/**
- * MMSmsValidityType:
- * @MM_SMS_VALIDITY_TYPE_UNKNOWN: Validity type unknown.
- * @MM_SMS_VALIDITY_TYPE_RELATIVE: Relative validity.
- * @MM_SMS_VALIDITY_TYPE_ABSOLUTE: Absolute validity.
- * @MM_SMS_VALIDITY_TYPE_ENHANCED: Enhanced validity.
- *
- * Type of SMS validity value.
- */
-typedef enum { /*< underscore_name=mm_sms_validity_type >*/
-    MM_SMS_VALIDITY_TYPE_UNKNOWN  = 0,
-    MM_SMS_VALIDITY_TYPE_RELATIVE = 1,
-    MM_SMS_VALIDITY_TYPE_ABSOLUTE = 2,
-    MM_SMS_VALIDITY_TYPE_ENHANCED = 3,
-} MMSmsValidityType;
-
-/**
- * MMSmsCdmaTeleserviceId:
- * @MM_SMS_CDMA_TELESERVICE_ID_UNKNOWN: Unknown.
- * @MM_SMS_CDMA_TELESERVICE_ID_CMT91: IS-91 Extended Protocol Enhanced Services.
- * @MM_SMS_CDMA_TELESERVICE_ID_WPT: Wireless Paging Teleservice.
- * @MM_SMS_CDMA_TELESERVICE_ID_WMT: Wireless Messaging Teleservice.
- * @MM_SMS_CDMA_TELESERVICE_ID_VMN: Voice Mail Notification.
- * @MM_SMS_CDMA_TELESERVICE_ID_WAP: Wireless Application Protocol.
- * @MM_SMS_CDMA_TELESERVICE_ID_WEMT: Wireless Enhanced Messaging Teleservice.
- * @MM_SMS_CDMA_TELESERVICE_ID_SCPT: Service Category Programming Teleservice.
- * @MM_SMS_CDMA_TELESERVICE_ID_CATPT: Card Application Toolkit Protocol Teleservice.
- *
- * Teleservice IDs supported for CDMA SMS, as defined in 3GPP2 X.S0004-550-E
- * (section 2.256) and 3GPP2 C.S0015-B (section 3.4.3.1).
- */
-typedef enum { /*< underscore_name=mm_sms_cdma_teleservice_id >*/
-    MM_SMS_CDMA_TELESERVICE_ID_UNKNOWN = 0x0000,
-    MM_SMS_CDMA_TELESERVICE_ID_CMT91   = 0x1000,
-    MM_SMS_CDMA_TELESERVICE_ID_WPT     = 0x1001,
-    MM_SMS_CDMA_TELESERVICE_ID_WMT     = 0x1002,
-    MM_SMS_CDMA_TELESERVICE_ID_VMN     = 0x1003,
-    MM_SMS_CDMA_TELESERVICE_ID_WAP     = 0x1004,
-    MM_SMS_CDMA_TELESERVICE_ID_WEMT    = 0x1005,
-    MM_SMS_CDMA_TELESERVICE_ID_SCPT    = 0x1006,
-    MM_SMS_CDMA_TELESERVICE_ID_CATPT   = 0x1007,
-} MMSmsCdmaTeleserviceId;
-
-/**
- * MMSmsCdmaServiceCategory:
- * @MM_SMS_CDMA_SERVICE_CATEGORY_UNKNOWN: Unknown.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_EMERGENCY_BROADCAST: Emergency broadcast.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_ADMINISTRATIVE: Administrative.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_MAINTENANCE: Maintenance.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_LOCAL: General news (local).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_REGIONAL: General news (regional).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_NATIONAL: General news (national).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_INTERNATIONAL: General news (international).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_LOCAL: Business/Financial news (local).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_REGIONAL: Business/Financial news (regional).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_NATIONAL: Business/Financial news (national).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_INTERNATIONAL: Business/Financial news (international).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_LOCAL: Sports news (local).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_REGIONAL: Sports news (regional).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_NATIONAL: Sports news (national).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_INTERNATIONAL: Sports news (international).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_LOCAL: Entertainment news (local).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_REGIONAL: Entertainment news (regional).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_NATIONAL: Entertainment news (national).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_INTERNATIONAL: Entertainment news (international).
- * @MM_SMS_CDMA_SERVICE_CATEGORY_LOCAL_WEATHER: Local weather.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_TRAFFIC_REPORT: Area traffic report.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_FLIGHT_SCHEDULES: Local airport flight schedules.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_RESTAURANTS: Restaurants.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_LODGINGS: Lodgings.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_RETAIL_DIRECTORY: Retail directory.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_ADVERTISEMENTS: Advertisements.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_STOCK_QUOTES: Stock quotes.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_EMPLOYMENT: Employment.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_HOSPITALS: Medical / Health / Hospitals.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_TECHNOLOGY_NEWS: Technology news.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_MULTICATEGORY: Multi-category.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_PRESIDENTIAL_ALERT: Presidential alert.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_EXTREME_THREAT: Extreme threat.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_SEVERE_THREAT: Severe threat.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_CHILD_ABDUCTION_EMERGENCY: Child abduction emergency.
- * @MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_TEST: CMAS test.
- *
- * Service category for CDMA SMS, as defined in 3GPP2 C.R1001-D (section 9.3).
- */
-typedef enum { /*< underscore_name=mm_sms_cdma_service_category >*/
-    MM_SMS_CDMA_SERVICE_CATEGORY_UNKNOWN                          = 0x0000,
-    MM_SMS_CDMA_SERVICE_CATEGORY_EMERGENCY_BROADCAST              = 0x0001,
-    MM_SMS_CDMA_SERVICE_CATEGORY_ADMINISTRATIVE                   = 0x0002,
-    MM_SMS_CDMA_SERVICE_CATEGORY_MAINTENANCE                      = 0x0003,
-    MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_LOCAL               = 0x0004,
-    MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_REGIONAL            = 0x0005,
-    MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_NATIONAL            = 0x0006,
-    MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_INTERNATIONAL       = 0x0007,
-    MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_LOCAL              = 0x0008,
-    MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_REGIONAL           = 0x0009,
-    MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_NATIONAL           = 0x000A,
-    MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_INTERNATIONAL      = 0x000B,
-    MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_LOCAL                = 0x000C,
-    MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_REGIONAL             = 0x000D,
-    MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_NATIONAL             = 0x000E,
-    MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_INTERNATIONAL        = 0x000F,
-    MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_LOCAL         = 0x0010,
-    MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_REGIONAL      = 0x0011,
-    MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_NATIONAL      = 0x0012,
-    MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_INTERNATIONAL = 0x0013,
-    MM_SMS_CDMA_SERVICE_CATEGORY_LOCAL_WEATHER                    = 0x0014,
-    MM_SMS_CDMA_SERVICE_CATEGORY_TRAFFIC_REPORT                   = 0x0015,
-    MM_SMS_CDMA_SERVICE_CATEGORY_FLIGHT_SCHEDULES                 = 0x0016,
-    MM_SMS_CDMA_SERVICE_CATEGORY_RESTAURANTS                      = 0x0017,
-    MM_SMS_CDMA_SERVICE_CATEGORY_LODGINGS                         = 0x0018,
-    MM_SMS_CDMA_SERVICE_CATEGORY_RETAIL_DIRECTORY                 = 0x0019,
-    MM_SMS_CDMA_SERVICE_CATEGORY_ADVERTISEMENTS                   = 0x001A,
-    MM_SMS_CDMA_SERVICE_CATEGORY_STOCK_QUOTES                     = 0x001B,
-    MM_SMS_CDMA_SERVICE_CATEGORY_EMPLOYMENT                       = 0x001C,
-    MM_SMS_CDMA_SERVICE_CATEGORY_HOSPITALS                        = 0x001D,
-    MM_SMS_CDMA_SERVICE_CATEGORY_TECHNOLOGY_NEWS                  = 0x001E,
-    MM_SMS_CDMA_SERVICE_CATEGORY_MULTICATEGORY                    = 0x001F,
-    MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_PRESIDENTIAL_ALERT          = 0x1000,
-    MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_EXTREME_THREAT              = 0x1001,
-    MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_SEVERE_THREAT               = 0x1002,
-    MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_CHILD_ABDUCTION_EMERGENCY   = 0x1003,
-    MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_TEST                        = 0x1004,
-} MMSmsCdmaServiceCategory;
-
-/**
  * MMModemContactsStorage:
  * @MM_MODEM_CONTACTS_STORAGE_UNKNOWN: Unknown location.
  * @MM_MODEM_CONTACTS_STORAGE_ME: Device's local memory.
diff --git a/include/ModemManager-version.h.in b/include/ModemManager-version.h.in
index cf05f5d..8a9f915 100644
--- a/include/ModemManager-version.h.in
+++ b/include/ModemManager-version.h.in
@@ -81,4 +81,19 @@
  */
 #define MM_INTERFACE_LOCATION_SUPPORTED @MM_INTERFACE_LOCATION_SUPPORTED@
 
+/**
+ * MM_INTERFACE_MESSAGING_SUPPORTED:
+ *
+ * Symbol to expose whether Messaging interface is supported. The symbol is always
+ * defined and set to either or 1 or 0.
+ *
+ * E.g.:
+ * |[
+ *  #if MM_INTERFACE_MESSAGING_SUPPORTED
+ *      // do something
+ *  #endif
+ * ]|
+ */
+#define MM_INTERFACE_MESSAGING_SUPPORTED @MM_INTERFACE_MESSAGING_SUPPORTED@
+
 #endif /* _MM_VERSION_H_ */
diff --git a/include/ModemManager.h b/include/ModemManager.h
index dbdb0ab..8482093 100644
--- a/include/ModemManager.h
+++ b/include/ModemManager.h
@@ -40,6 +40,9 @@
 #if MM_INTERFACE_LOCATION_SUPPORTED
 # include <ModemManager-enums-location.h>
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include <ModemManager-enums-messaging.h>
+#endif
 
 /* Public header with errors */
 #include <ModemManager-errors.h>
diff --git a/introspection/Makefile.am b/introspection/Makefile.am
index 1f0a648..587736b 100644
--- a/introspection/Makefile.am
+++ b/introspection/Makefile.am
@@ -7,6 +7,7 @@ XMLS_FILTERED_OUT = \
 	all.xml \
 	wip-org.freedesktop.ModemManager1.Modem.Contacts.xml \
 	org.freedesktop.ModemManager1.Modem.Location.xml \
+	org.freedesktop.ModemManager1.Modem.Messaging.xml \
 	$(NULL)
 xmldir = $(datadir)/dbus-1/interfaces
 xml_DATA = $(filter-out $(XMLS_FILTERED_OUT), $(XMLS))
@@ -15,6 +16,10 @@ if WITH_INTERFACE_LOCATION
 xml_DATA += org.freedesktop.ModemManager1.Modem.Location.xml
 endif
 
+if WITH_INTERFACE_MESSAGING
+xml_DATA += org.freedesktop.ModemManager1.Modem.Messaging.xml
+endif
+
 all.xml: $(xml_DATA) Makefile
 	$(AM_V_GEN)	\
 		rm -f $@; \
diff --git a/libmm-glib/Makefile.am b/libmm-glib/Makefile.am
index b7e98d1..7ffce06 100644
--- a/libmm-glib/Makefile.am
+++ b/libmm-glib/Makefile.am
@@ -34,10 +34,6 @@ libmm_glib_la_SOURCES = \
 	mm-modem-oma.c \
 	mm-sim.h \
 	mm-sim.c \
-	mm-sms.h \
-	mm-sms.c \
-	mm-modem-messaging.h \
-	mm-modem-messaging.c \
 	mm-modem-voice.h \
 	mm-modem-voice.c \
 	mm-call.h \
@@ -52,8 +48,6 @@ libmm_glib_la_SOURCES = \
 	mm-simple-connect-properties.c \
 	mm-bearer-properties.h \
 	mm-bearer-properties.c \
-	mm-sms-properties.h \
-	mm-sms-properties.c \
 	mm-call-properties.h \
 	mm-call-properties.c \
 	mm-bearer-ip-config.h \
@@ -90,6 +84,17 @@ libmm_glib_la_SOURCES += \
 	$(NULL)
 endif
 
+if WITH_INTERFACE_MESSAGING
+libmm_glib_la_SOURCES += \
+	mm-sms.h \
+	mm-sms.c \
+	mm-modem-messaging.h \
+	mm-modem-messaging.c \
+	mm-sms-properties.h \
+	mm-sms-properties.c \
+	$(NULL)
+endif
+
 libmm_glib_la_CPPFLAGS = \
 	-I$(srcdir) \
 	-I$(top_srcdir) \
@@ -127,21 +132,18 @@ include_HEADERS = \
 	mm-modem-3gpp.h \
 	mm-modem-3gpp-ussd.h \
 	mm-modem-cdma.h \
-	mm-modem-messaging.h \
 	mm-modem-time.h \
 	mm-modem-firmware.h \
 	mm-modem-signal.h \
 	mm-modem-oma.h \
 	mm-modem-simple.h \
 	mm-sim.h \
-	mm-sms.h \
 	mm-modem-voice.h \
 	mm-call.h \
 	mm-bearer.h \
 	mm-simple-status.h \
 	mm-simple-connect-properties.h \
 	mm-bearer-properties.h \
-	mm-sms-properties.h \
 	mm-call-properties.h \
 	mm-bearer-ip-config.h \
 	mm-bearer-stats.h \
@@ -164,6 +166,14 @@ include_HEADERS += \
 	$(NULL)
 endif
 
+if WITH_INTERFACE_MESSAGING
+include_HEADERS += \
+	mm-modem-messaging.h \
+	mm-sms.h \
+	mm-sms-properties.h \
+	$(NULL)
+endif
+
 CLEANFILES =
 
 # Introspection
@@ -175,7 +185,6 @@ GENERATED_H = \
 	mm-errors-types.h \
 	mm-gdbus-manager.h \
 	mm-gdbus-sim.h \
-	mm-gdbus-sms.h \
 	mm-gdbus-bearer.h \
 	mm-gdbus-modem.h \
 	$(NULL)
@@ -186,7 +195,6 @@ GENERATED_C = \
 	mm-errors-quarks.c \
 	mm-gdbus-manager.c \
 	mm-gdbus-sim.c \
-	mm-gdbus-sms.c \
 	mm-gdbus-bearer.c \
 	mm-gdbus-modem.c \
 	$(NULL)
@@ -203,6 +211,12 @@ if WITH_INTERFACE_LOCATION
 PUBLIC_H += ModemManager-enums-location.h
 endif
 
+if WITH_INTERFACE_MESSAGING
+GENERATED_H += mm-gdbus-sms.h
+GENERATED_C += mm-gdbus-sms.c
+PUBLIC_H    += ModemManager-enums-messaging.h
+endif
+
 INTROSPECTION_GIRS = ModemManager-1.0.gir
 INTROSPECTION_SCANNER_ARGS = --warn-all
 INTROSPECTION_COMPILER_ARGS =
diff --git a/libmm-glib/generated/Makefile.am b/libmm-glib/generated/Makefile.am
index 4b4bac2..068f0a4 100644
--- a/libmm-glib/generated/Makefile.am
+++ b/libmm-glib/generated/Makefile.am
@@ -11,7 +11,6 @@ GENERATED_H = \
 	mm-errors-types.h \
 	mm-gdbus-manager.h \
 	mm-gdbus-sim.h \
-	mm-gdbus-sms.h \
 	mm-gdbus-call.h \
 	mm-gdbus-bearer.h \
 	mm-gdbus-modem.h \
@@ -23,7 +22,6 @@ GENERATED_C = \
 	mm-errors-quarks.c \
 	mm-gdbus-manager.c \
 	mm-gdbus-sim.c \
-	mm-gdbus-sms.c \
 	mm-gdbus-call.c \
 	mm-gdbus-bearer.c \
 	mm-gdbus-modem.c   \
@@ -32,11 +30,9 @@ GENERATED_C = \
 GENERATED_DOC = \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Sim.xml \
-	mm-gdbus-doc-org.freedesktop.ModemManager1.Sms.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Call.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Bearer.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.xml \
-	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Messaging.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Voice.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Time.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Firmware.xml \
@@ -52,6 +48,15 @@ if WITH_INTERFACE_LOCATION
 GENERATED_DOC += mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Location.xml
 endif
 
+if WITH_INTERFACE_MESSAGING
+GENERATED_H   += mm-gdbus-sms.h
+GENERATED_C   += mm-gdbus-sms.c
+GENERATED_DOC += \
+	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Messaging.xml \
+	mm-gdbus-doc-org.freedesktop.ModemManager1.Sms.xml \
+	$(NULL)
+endif
+
 BUILT_SOURCES = $(GENERATED_H) $(GENERATED_C) $(GENERATED_DOC)
 
 # Enum types
@@ -63,6 +68,10 @@ if WITH_INTERFACE_LOCATION
 ENUM_FILES += $(top_srcdir)/include/ModemManager-enums-location.h
 endif
 
+if WITH_INTERFACE_MESSAGING
+ENUM_FILES += $(top_srcdir)/include/ModemManager-enums-messaging.h
+endif
+
 mm-enums-types.h: Makefile.am $(ENUM_FILES) $(top_srcdir)/build-aux/mm-enums-template.h
 	$(AM_V_GEN) $(GLIB_MKENUMS) \
 		--fhead "#include <ModemManager.h>\n#ifndef __MM_ENUMS_TYPES_H__\n#define __MM_ENUMS_TYPES_H__\n" \
@@ -121,7 +130,6 @@ mm_gdbus_modem_generated = \
 	mm-gdbus-modem.h \
 	mm-gdbus-modem.c \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.xml \
-	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Messaging.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Voice.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Time.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Firmware.xml \
@@ -137,9 +145,12 @@ if WITH_INTERFACE_LOCATION
 mm_gdbus_modem_generated += mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Location.xml
 endif
 
+if WITH_INTERFACE_MESSAGING
+mm_gdbus_modem_generated += mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Messaging.xml
+endif
+
 mm_gdbus_modem_deps = \
 	$(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.xml \
-	$(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.Messaging.xml \
 	$(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.Voice.xml \
 	$(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.Time.xml \
 	$(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.Firmware.xml \
@@ -155,6 +166,10 @@ if WITH_INTERFACE_LOCATION
 mm_gdbus_modem_deps += $(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.Location.xml
 endif
 
+if WITH_INTERFACE_MESSAGING
+mm_gdbus_modem_deps += $(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.Messaging.xml
+endif
+
 mm-gdbus-modem.c: $(mm_gdbus_modem_deps)
 	$(AM_V_GEN) $(GDBUS_CODEGEN) \
 		--interface-prefix org.freedesktop.ModemManager1. \
@@ -210,6 +225,8 @@ mm-gdbus-bearer.c: $(mm_gdbus_bearer_deps)
 $(filter-out mm-gdbus-bearer.c, $(mm_gdbus_bearer_generated)): $(mm_gdbus_bearer_deps) mm-gdbus-bearer.c
 	@: # nothing to do, generated as a side-effect of the .c
 
+if WITH_INTERFACE_MESSAGING
+
 # SMS interface
 mm_gdbus_sms_generated = \
 	mm-gdbus-sms.h \
@@ -231,6 +248,8 @@ mm-gdbus-sms.c: $(mm_gdbus_sms_deps)
 $(filter-out mm-gdbus-sms.c, $(mm_gdbus_sms_generated)): $(mm_gdbus_sms_deps) mm-gdbus-sms.c
 	@: # nothing to do, generated as a side-effect of the .c
 
+endif
+
 # Call interface
 mm_gdbus_call_generated = \
 	mm-gdbus-call.h \
diff --git a/libmm-glib/libmm-glib.h b/libmm-glib/libmm-glib.h
index d9ca2a6..8c7e643 100644
--- a/libmm-glib/libmm-glib.h
+++ b/libmm-glib/libmm-glib.h
@@ -42,7 +42,9 @@
 # if MM_INTERFACE_LOCATION_SUPPORTED
 #  include <mm-modem-location.h>
 # endif
-# include <mm-modem-messaging.h>
+# if MM_INTERFACE_MESSAGING_SUPPORTED
+#  include <mm-modem-messaging.h>
+# endif
 # include <mm-modem-voice.h>
 # include <mm-modem-time.h>
 # include <mm-modem-firmware.h>
@@ -60,7 +62,9 @@
 #include <mm-helper-types.h>
 #include <mm-simple-status.h>
 #include <mm-simple-connect-properties.h>
-#include <mm-sms-properties.h>
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include <mm-sms-properties.h>
+#endif
 #include <mm-call-properties.h>
 #include <mm-bearer-properties.h>
 #include <mm-bearer-ip-config.h>
@@ -85,7 +89,9 @@
 #include <mm-gdbus-modem.h>
 #include <mm-gdbus-bearer.h>
 #include <mm-gdbus-sim.h>
-#include <mm-gdbus-sms.h>
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include <mm-gdbus-sms.h>
+#endif
 #include <mm-gdbus-call.h>
 
 #endif /* _LIBMM_GLIB_H_ */
diff --git a/libmm-glib/mm-common-helpers.c b/libmm-glib/mm-common-helpers.c
index 7bd845b..ec07971 100644
--- a/libmm-glib/mm-common-helpers.c
+++ b/libmm-glib/mm-common-helpers.c
@@ -103,30 +103,6 @@ mm_common_build_ports_string (const MMModemPortInfo *ports,
 }
 
 gchar *
-mm_common_build_sms_storages_string (const MMSmsStorage *storages,
-                                     guint n_storages)
-{
-    gboolean first = TRUE;
-    GString *str;
-    guint i;
-
-    if (!storages || !n_storages)
-        return g_strdup ("none");
-
-    str = g_string_new ("");
-    for (i = 0; i < n_storages; i++) {
-        g_string_append_printf (str, "%s%s",
-                                first ? "" : ", ",
-                                mm_sms_storage_get_string (storages[i]));
-
-        if (first)
-            first = FALSE;
-    }
-
-    return g_string_free (str, FALSE);
-}
-
-gchar *
 mm_common_build_mode_combinations_string (const MMModemModeCombination *modes,
                                           guint n_modes)
 {
@@ -159,67 +135,6 @@ mm_common_build_mode_combinations_string (const MMModemModeCombination *modes,
 }
 
 GArray *
-mm_common_sms_storages_variant_to_garray (GVariant *variant)
-{
-    GArray *array = NULL;
-
-    if (variant) {
-        GVariantIter iter;
-        guint n;
-
-        g_variant_iter_init (&iter, variant);
-        n = g_variant_iter_n_children (&iter);
-
-        if (n > 0) {
-            guint32 storage;
-
-            array = g_array_sized_new (FALSE, FALSE, sizeof (MMSmsStorage), n);
-            while (g_variant_iter_loop (&iter, "u", &storage))
-                g_array_append_val (array, storage);
-        }
-    }
-
-    return array;
-}
-
-MMSmsStorage *
-mm_common_sms_storages_variant_to_array (GVariant *variant,
-                                         guint *n_storages)
-{
-    GArray *array;
-
-    array = mm_common_sms_storages_variant_to_garray (variant);
-    if (n_storages)
-        *n_storages = array->len;
-    return (MMSmsStorage *) g_array_free (array, FALSE);
-}
-
-GVariant *
-mm_common_sms_storages_array_to_variant (const MMSmsStorage *storages,
-                                         guint n_storages)
-{
-    GVariantBuilder builder;
-    guint i;
-
-    g_variant_builder_init (&builder, G_VARIANT_TYPE ("au"));
-
-    for (i = 0; i < n_storages; i++)
-        g_variant_builder_add_value (&builder,
-                                     g_variant_new_uint32 ((guint32)storages[i]));
-    return g_variant_builder_end (&builder);
-}
-
-GVariant *
-mm_common_sms_storages_garray_to_variant (GArray *array)
-{
-    if (array)
-        return mm_common_sms_storages_array_to_variant ((const MMSmsStorage *)array->data,
-                                                        array->len);
-
-    return mm_common_sms_storages_array_to_variant (NULL, 0);
-}
-
-GArray *
 mm_common_ports_variant_to_garray (GVariant *variant)
 {
     GArray *array = NULL;
@@ -942,72 +857,6 @@ mm_common_get_allowed_auth_from_string (const gchar *str,
     return allowed_auth;
 }
 
-MMSmsStorage
-mm_common_get_sms_storage_from_string (const gchar *str,
-                                       GError **error)
-{
-    GEnumClass *enum_class;
-    guint i;
-
-    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_SMS_STORAGE));
-
-    for (i = 0; enum_class->values[i].value_nick; i++) {
-        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
-            return enum_class->values[i].value;
-    }
-
-    g_set_error (error,
-                 MM_CORE_ERROR,
-                 MM_CORE_ERROR_INVALID_ARGS,
-                 "Couldn't match '%s' with a valid MMSmsStorage value",
-                 str);
-    return MM_SMS_STORAGE_UNKNOWN;
-}
-
-MMSmsCdmaTeleserviceId
-mm_common_get_sms_cdma_teleservice_id_from_string (const gchar *str,
-                                                   GError **error)
-{
-    GEnumClass *enum_class;
-    guint i;
-
-    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_SMS_CDMA_TELESERVICE_ID));
-
-    for (i = 0; enum_class->values[i].value_nick; i++) {
-        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
-            return enum_class->values[i].value;
-    }
-
-    g_set_error (error,
-                 MM_CORE_ERROR,
-                 MM_CORE_ERROR_INVALID_ARGS,
-                 "Couldn't match '%s' with a valid MMSmsCdmaTeleserviceId value",
-                 str);
-    return MM_SMS_CDMA_TELESERVICE_ID_UNKNOWN;
-}
-
-MMSmsCdmaServiceCategory
-mm_common_get_sms_cdma_service_category_from_string (const gchar *str,
-                                                     GError **error)
-{
-    GEnumClass *enum_class;
-    guint i;
-
-    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_SMS_CDMA_SERVICE_CATEGORY));
-
-    for (i = 0; enum_class->values[i].value_nick; i++) {
-        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
-            return enum_class->values[i].value;
-    }
-
-    g_set_error (error,
-                 MM_CORE_ERROR,
-                 MM_CORE_ERROR_INVALID_ARGS,
-                 "Couldn't match '%s' with a valid MMSmsCdmaServiceCategory value",
-                 str);
-    return MM_SMS_CDMA_SERVICE_CATEGORY_UNKNOWN;
-}
-
 MMCallDirection
 mm_common_get_call_direction_from_string (const gchar *str,
                                           GError **error)
@@ -1529,50 +1378,6 @@ mm_get_string_unquoted_from_match_info (GMatchInfo *match_info,
 
 /*****************************************************************************/
 
-const gchar *
-mm_sms_delivery_state_get_string_extended (guint delivery_state)
-{
-    if (delivery_state > 0x02 && delivery_state < 0x20) {
-        if (delivery_state < 0x10)
-            return "completed-reason-reserved";
-        else
-            return "completed-sc-specific-reason";
-    }
-
-    if (delivery_state > 0x25 && delivery_state < 0x40) {
-        if (delivery_state < 0x30)
-            return "temporary-error-reason-reserved";
-        else
-            return "temporary-error-sc-specific-reason";
-    }
-
-    if (delivery_state > 0x49 && delivery_state < 0x60) {
-        if (delivery_state < 0x50)
-            return "error-reason-reserved";
-        else
-            return "error-sc-specific-reason";
-    }
-
-    if (delivery_state > 0x65 && delivery_state < 0x80) {
-        if (delivery_state < 0x70)
-            return "temporary-fatal-error-reason-reserved";
-        else
-            return "temporary-fatal-error-sc-specific-reason";
-    }
-
-    if (delivery_state >= 0x80 && delivery_state < 0x100)
-        return "unknown-reason-reserved";
-
-    if (delivery_state >= 0x100)
-        return "unknown";
-
-    /* Otherwise, use the MMSmsDeliveryState enum as we can match the known
-     * value */
-    return mm_sms_delivery_state_get_string ((MMSmsDeliveryState)delivery_state);
-}
-
-/*****************************************************************************/
-
 /* From hostap, Copyright (c) 2002-2005, Jouni Malinen <jkmaline@cc.hut.fi> */
 
 static gint
@@ -1688,3 +1493,201 @@ mm_utils_check_for_single_value (guint32 value)
 
     return TRUE;
 }
+
+/*****************************************************************************/
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
+gchar *
+mm_common_build_sms_storages_string (const MMSmsStorage *storages,
+                                     guint n_storages)
+{
+    gboolean first = TRUE;
+    GString *str;
+    guint i;
+
+    if (!storages || !n_storages)
+        return g_strdup ("none");
+
+    str = g_string_new ("");
+    for (i = 0; i < n_storages; i++) {
+        g_string_append_printf (str, "%s%s",
+                                first ? "" : ", ",
+                                mm_sms_storage_get_string (storages[i]));
+
+        if (first)
+            first = FALSE;
+    }
+
+    return g_string_free (str, FALSE);
+}
+
+MMSmsStorage
+mm_common_get_sms_storage_from_string (const gchar *str,
+                                       GError **error)
+{
+    GEnumClass *enum_class;
+    guint i;
+
+    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_SMS_STORAGE));
+
+    for (i = 0; enum_class->values[i].value_nick; i++) {
+        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
+            return enum_class->values[i].value;
+    }
+
+    g_set_error (error,
+                 MM_CORE_ERROR,
+                 MM_CORE_ERROR_INVALID_ARGS,
+                 "Couldn't match '%s' with a valid MMSmsStorage value",
+                 str);
+    return MM_SMS_STORAGE_UNKNOWN;
+}
+
+MMSmsCdmaTeleserviceId
+mm_common_get_sms_cdma_teleservice_id_from_string (const gchar *str,
+                                                   GError **error)
+{
+    GEnumClass *enum_class;
+    guint i;
+
+    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_SMS_CDMA_TELESERVICE_ID));
+
+    for (i = 0; enum_class->values[i].value_nick; i++) {
+        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
+            return enum_class->values[i].value;
+    }
+
+    g_set_error (error,
+                 MM_CORE_ERROR,
+                 MM_CORE_ERROR_INVALID_ARGS,
+                 "Couldn't match '%s' with a valid MMSmsCdmaTeleserviceId value",
+                 str);
+    return MM_SMS_CDMA_TELESERVICE_ID_UNKNOWN;
+}
+
+MMSmsCdmaServiceCategory
+mm_common_get_sms_cdma_service_category_from_string (const gchar *str,
+                                                     GError **error)
+{
+    GEnumClass *enum_class;
+    guint i;
+
+    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_SMS_CDMA_SERVICE_CATEGORY));
+
+    for (i = 0; enum_class->values[i].value_nick; i++) {
+        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
+            return enum_class->values[i].value;
+    }
+
+    g_set_error (error,
+                 MM_CORE_ERROR,
+                 MM_CORE_ERROR_INVALID_ARGS,
+                 "Couldn't match '%s' with a valid MMSmsCdmaServiceCategory value",
+                 str);
+    return MM_SMS_CDMA_SERVICE_CATEGORY_UNKNOWN;
+}
+
+GArray *
+mm_common_sms_storages_variant_to_garray (GVariant *variant)
+{
+    GArray *array = NULL;
+
+    if (variant) {
+        GVariantIter iter;
+        guint n;
+
+        g_variant_iter_init (&iter, variant);
+        n = g_variant_iter_n_children (&iter);
+
+        if (n > 0) {
+            guint32 storage;
+
+            array = g_array_sized_new (FALSE, FALSE, sizeof (MMSmsStorage), n);
+            while (g_variant_iter_loop (&iter, "u", &storage))
+                g_array_append_val (array, storage);
+        }
+    }
+
+    return array;
+}
+
+MMSmsStorage *
+mm_common_sms_storages_variant_to_array (GVariant *variant,
+                                         guint *n_storages)
+{
+    GArray *array;
+
+    array = mm_common_sms_storages_variant_to_garray (variant);
+    if (n_storages)
+        *n_storages = array->len;
+    return (MMSmsStorage *) g_array_free (array, FALSE);
+}
+
+GVariant *
+mm_common_sms_storages_array_to_variant (const MMSmsStorage *storages,
+                                         guint n_storages)
+{
+    GVariantBuilder builder;
+    guint i;
+
+    g_variant_builder_init (&builder, G_VARIANT_TYPE ("au"));
+
+    for (i = 0; i < n_storages; i++)
+        g_variant_builder_add_value (&builder,
+                                     g_variant_new_uint32 ((guint32)storages[i]));
+    return g_variant_builder_end (&builder);
+}
+
+GVariant *
+mm_common_sms_storages_garray_to_variant (GArray *array)
+{
+    if (array)
+        return mm_common_sms_storages_array_to_variant ((const MMSmsStorage *)array->data,
+                                                        array->len);
+
+    return mm_common_sms_storages_array_to_variant (NULL, 0);
+}
+
+const gchar *
+mm_sms_delivery_state_get_string_extended (guint delivery_state)
+{
+    if (delivery_state > 0x02 && delivery_state < 0x20) {
+        if (delivery_state < 0x10)
+            return "completed-reason-reserved";
+        else
+            return "completed-sc-specific-reason";
+    }
+
+    if (delivery_state > 0x25 && delivery_state < 0x40) {
+        if (delivery_state < 0x30)
+            return "temporary-error-reason-reserved";
+        else
+            return "temporary-error-sc-specific-reason";
+    }
+
+    if (delivery_state > 0x49 && delivery_state < 0x60) {
+        if (delivery_state < 0x50)
+            return "error-reason-reserved";
+        else
+            return "error-sc-specific-reason";
+    }
+
+    if (delivery_state > 0x65 && delivery_state < 0x80) {
+        if (delivery_state < 0x70)
+            return "temporary-fatal-error-reason-reserved";
+        else
+            return "temporary-fatal-error-sc-specific-reason";
+    }
+
+    if (delivery_state >= 0x80 && delivery_state < 0x100)
+        return "unknown-reason-reserved";
+
+    if (delivery_state >= 0x100)
+        return "unknown";
+
+    /* Otherwise, use the MMSmsDeliveryState enum as we can match the known
+     * value */
+    return mm_sms_delivery_state_get_string ((MMSmsDeliveryState)delivery_state);
+}
+
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
diff --git a/libmm-glib/mm-common-helpers.h b/libmm-glib/mm-common-helpers.h
index 772068e..33bb1cd 100644
--- a/libmm-glib/mm-common-helpers.h
+++ b/libmm-glib/mm-common-helpers.h
@@ -35,9 +35,6 @@ gchar *mm_common_build_bands_string (const MMModemBand *bands,
 gchar *mm_common_build_ports_string (const MMModemPortInfo *ports,
                                      guint n_ports);
 
-gchar *mm_common_build_sms_storages_string (const MMSmsStorage *storages,
-                                            guint n_storages);
-
 gchar *mm_common_build_mode_combinations_string (const MMModemModeCombination *modes,
                                                  guint n_modes);
 
@@ -57,12 +54,6 @@ MMBearerIpFamily      mm_common_get_ip_type_from_string      (const gchar *str,
                                                               GError **error);
 MMBearerAllowedAuth   mm_common_get_allowed_auth_from_string (const gchar *str,
                                                               GError **error);
-MMSmsStorage          mm_common_get_sms_storage_from_string  (const gchar *str,
-                                                              GError **error);
-MMSmsCdmaTeleserviceId   mm_common_get_sms_cdma_teleservice_id_from_string   (const gchar *str,
-                                                                              GError **error);
-MMSmsCdmaServiceCategory mm_common_get_sms_cdma_service_category_from_string (const gchar *str,
-                                                                              GError **error);
 
 MMCallDirection     mm_common_get_call_direction_from_string    (const gchar *str,
                                                                  GError **error);
@@ -83,13 +74,6 @@ GVariant        *mm_common_ports_array_to_variant  (const MMModemPortInfo *ports
                                                     guint n_ports);
 GVariant        *mm_common_ports_garray_to_variant (GArray *array);
 
-GArray       *mm_common_sms_storages_variant_to_garray (GVariant *variant);
-MMSmsStorage *mm_common_sms_storages_variant_to_array  (GVariant *variant,
-                                                        guint *n_storages);
-GVariant     *mm_common_sms_storages_array_to_variant  (const MMSmsStorage *storages,
-                                                        guint n_storages);
-GVariant     *mm_common_sms_storages_garray_to_variant (GArray *array);
-
 GArray      *mm_common_bands_variant_to_garray (GVariant *variant);
 MMModemBand *mm_common_bands_variant_to_array  (GVariant *variant,
                                                 guint *n_bands);
@@ -157,8 +141,6 @@ gboolean  mm_get_double_from_match_info          (GMatchInfo *match_info,
 gchar    *mm_get_string_unquoted_from_match_info (GMatchInfo *match_info,
                                                   guint32 match_index);
 
-const gchar *mm_sms_delivery_state_get_string_extended (guint delivery_state);
-
 gint      mm_utils_hex2byte   (const gchar *hex);
 gchar    *mm_utils_hexstr2bin (const gchar *hex, gsize *out_len);
 gchar    *mm_utils_bin2hexstr (const guint8 *bin, gsize len);
@@ -166,4 +148,23 @@ gboolean  mm_utils_ishexstr   (const gchar *hex);
 
 gboolean  mm_utils_check_for_single_value (guint32 value);
 
+
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+gchar                    *mm_common_build_sms_storages_string                 (const MMSmsStorage *storages,
+                                                                               guint n_storages);
+MMSmsStorage              mm_common_get_sms_storage_from_string               (const gchar *str,
+                                                                               GError **error);
+MMSmsCdmaTeleserviceId    mm_common_get_sms_cdma_teleservice_id_from_string   (const gchar *str,
+                                                                               GError **error);
+MMSmsCdmaServiceCategory  mm_common_get_sms_cdma_service_category_from_string (const gchar *str,
+                                                                               GError **error);
+GArray                   *mm_common_sms_storages_variant_to_garray            (GVariant *variant);
+MMSmsStorage             *mm_common_sms_storages_variant_to_array             (GVariant *variant,
+                                                                               guint *n_storages);
+GVariant                 *mm_common_sms_storages_array_to_variant             (const MMSmsStorage *storages,
+                                                                               guint n_storages);
+GVariant                 *mm_common_sms_storages_garray_to_variant            (GArray *array);
+const gchar              *mm_sms_delivery_state_get_string_extended           (guint delivery_state);
+#endif
+
 #endif /* MM_COMMON_HELPERS_H */
diff --git a/libmm-glib/mm-manager.c b/libmm-glib/mm-manager.c
index 042f470..ae14450 100644
--- a/libmm-glib/mm-manager.c
+++ b/libmm-glib/mm-manager.c
@@ -67,7 +67,9 @@ get_proxy_type (GDBusObjectManagerClient *manager,
     if (g_once_init_enter (&once_init_value)) {
         lookup_hash = g_hash_table_new (g_str_hash, g_str_equal);
         g_hash_table_insert (lookup_hash, "org.freedesktop.ModemManager1.Modem",                GSIZE_TO_POINTER (MM_TYPE_MODEM));
+#if MM_INTERFACE_MESSAGING_SUPPORTED
         g_hash_table_insert (lookup_hash, "org.freedesktop.ModemManager1.Modem.Messaging",      GSIZE_TO_POINTER (MM_TYPE_MODEM_MESSAGING));
+#endif
         g_hash_table_insert (lookup_hash, "org.freedesktop.ModemManager1.Modem.Voice",          GSIZE_TO_POINTER (MM_TYPE_MODEM_VOICE));
 #if MM_INTERFACE_LOCATION_SUPPORTED
         g_hash_table_insert (lookup_hash, "org.freedesktop.ModemManager1.Modem.Location",       GSIZE_TO_POINTER (MM_TYPE_MODEM_LOCATION));
diff --git a/libmm-glib/mm-object.c b/libmm-glib/mm-object.c
index 05e81ac..44bfb98 100644
--- a/libmm-glib/mm-object.c
+++ b/libmm-glib/mm-object.c
@@ -307,6 +307,8 @@ mm_object_peek_modem_location (MMObject *self)
 
 /*****************************************************************************/
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /**
  * mm_object_get_modem_messaging:
  * @self: A #MMObject.
@@ -341,6 +343,8 @@ mm_object_peek_modem_messaging (MMObject *self)
     return (MMModemMessaging *)mm_gdbus_object_peek_modem_messaging (MM_GDBUS_OBJECT (self));
 }
 
+#endif /*  MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 
 /**
diff --git a/libmm-glib/mm-object.h b/libmm-glib/mm-object.h
index 3d67e20..6a44c3c 100644
--- a/libmm-glib/mm-object.h
+++ b/libmm-glib/mm-object.h
@@ -39,7 +39,9 @@
 #if MM_INTERFACE_LOCATION_SUPPORTED
 # include "mm-modem-location.h"
 #endif
-#include "mm-modem-messaging.h"
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-modem-messaging.h"
+#endif
 #include "mm-modem-voice.h"
 #include "mm-modem-time.h"
 #include "mm-modem-firmware.h"
@@ -85,7 +87,6 @@ MMModem3gpp      *mm_object_get_modem_3gpp       (MMObject *self);
 MMModem3gppUssd  *mm_object_get_modem_3gpp_ussd  (MMObject *self);
 MMModemCdma      *mm_object_get_modem_cdma       (MMObject *self);
 MMModemSimple    *mm_object_get_modem_simple     (MMObject *self);
-MMModemMessaging *mm_object_get_modem_messaging  (MMObject *self);
 MMModemVoice     *mm_object_get_modem_voice      (MMObject *self);
 MMModemTime      *mm_object_get_modem_time       (MMObject *self);
 MMModemFirmware  *mm_object_get_modem_firmware   (MMObject *self);
@@ -97,7 +98,6 @@ MMModem3gpp      *mm_object_peek_modem_3gpp      (MMObject *self);
 MMModem3gppUssd  *mm_object_peek_modem_3gpp_ussd (MMObject *self);
 MMModemCdma      *mm_object_peek_modem_cdma      (MMObject *self);
 MMModemSimple    *mm_object_peek_modem_simple    (MMObject *self);
-MMModemMessaging *mm_object_peek_modem_messaging (MMObject *self);
 MMModemVoice     *mm_object_peek_modem_voice     (MMObject *self);
 MMModemTime      *mm_object_peek_modem_time      (MMObject *self);
 MMModemFirmware  *mm_object_peek_modem_firmware  (MMObject *self);
@@ -109,6 +109,11 @@ MMModemLocation  *mm_object_get_modem_location   (MMObject *self);
 MMModemLocation  *mm_object_peek_modem_location  (MMObject *self);
 #endif
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+MMModemMessaging *mm_object_get_modem_messaging  (MMObject *self);
+MMModemMessaging *mm_object_peek_modem_messaging (MMObject *self);
+#endif
+
 G_END_DECLS
 
 #endif /* _MM_OBJECT_H_ */
diff --git a/plugins/altair/mm-broadband-modem-altair-lte.c b/plugins/altair/mm-broadband-modem-altair-lte.c
index 1155a7a..d2fd60c 100644
--- a/plugins/altair/mm-broadband-modem-altair-lte.c
+++ b/plugins/altair/mm-broadband-modem-altair-lte.c
@@ -34,7 +34,9 @@
 #include "mm-iface-modem.h"
 #include "mm-iface-modem-3gpp.h"
 #include "mm-iface-modem-3gpp-ussd.h"
-#include "mm-iface-modem-messaging.h"
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-iface-modem-messaging.h"
+#endif
 #include "mm-log.h"
 #include "mm-modem-helpers.h"
 #include "mm-modem-helpers-altair-lte.h"
@@ -44,13 +46,19 @@
 static void iface_modem_init (MMIfaceModem *iface);
 static void iface_modem_3gpp_init (MMIfaceModem3gpp *iface);
 static void iface_modem_3gpp_ussd_init (MMIfaceModem3gppUssd *iface);
+
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
+#endif
 
 G_DEFINE_TYPE_EXTENDED (MMBroadbandModemAltairLte, mm_broadband_modem_altair_lte, MM_TYPE_BROADBAND_MODEM, 0,
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM, iface_modem_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_3GPP, iface_modem_3gpp_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_3GPP_USSD, iface_modem_3gpp_ussd_init)
-                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init));
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init)
+#endif
+                       )
 
 struct _MMBroadbandModemAltairLtePrivate {
     /* Regex for SIM refresh notifications */
@@ -1468,6 +1476,8 @@ iface_modem_3gpp_init (MMIfaceModem3gpp *iface)
     iface->load_subscription_state_finish = modem_3gpp_load_subscription_state_finish;
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void
 iface_modem_messaging_init (MMIfaceModemMessaging *iface)
 {
@@ -1476,6 +1486,8 @@ iface_modem_messaging_init (MMIfaceModemMessaging *iface)
     iface->check_support_finish = NULL;
 }
 
+#endif
+
 static void
 mm_broadband_modem_altair_lte_class_init (MMBroadbandModemAltairLteClass *klass)
 {
diff --git a/plugins/cinterion/mm-broadband-modem-cinterion.c b/plugins/cinterion/mm-broadband-modem-cinterion.c
index 3eaccf7..1c883e4 100644
--- a/plugins/cinterion/mm-broadband-modem-cinterion.c
+++ b/plugins/cinterion/mm-broadband-modem-cinterion.c
@@ -30,7 +30,9 @@
 #include "mm-errors-types.h"
 #include "mm-iface-modem.h"
 #include "mm-iface-modem-3gpp.h"
-#include "mm-iface-modem-messaging.h"
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-iface-modem-messaging.h"
+#endif
 #if MM_INTERFACE_LOCATION_SUPPORTED
 # include "mm-iface-modem-location.h"
 #endif
@@ -41,7 +43,10 @@
 
 static void iface_modem_init      (MMIfaceModem *iface);
 static void iface_modem_3gpp_init (MMIfaceModem3gpp *iface);
+
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
+#endif
 
 #if MM_INTERFACE_LOCATION_SUPPORTED
 static void iface_modem_location_init (MMIfaceModemLocation *iface);
@@ -52,7 +57,9 @@ static MMIfaceModem *iface_modem_parent;
 G_DEFINE_TYPE_EXTENDED (MMBroadbandModemCinterion, mm_broadband_modem_cinterion, MM_TYPE_BROADBAND_MODEM, 0,
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM, iface_modem_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_3GPP, iface_modem_3gpp_init)
+#if MM_INTERFACE_MESSAGING_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init)
+#endif
 #if MM_INTERFACE_LOCATION_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_LOCATION, iface_modem_location_init)
 #endif
@@ -107,6 +114,8 @@ enable_unsolicited_events (MMIfaceModem3gpp *self,
                               user_data);
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* Enable unsolicited events (SMS indications) (Messaging interface) */
 
@@ -321,6 +330,8 @@ messaging_check_support (MMIfaceModemMessaging *self,
                               result);
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 /* MODEM POWER DOWN */
 
@@ -1747,6 +1758,8 @@ iface_modem_3gpp_init (MMIfaceModem3gpp *iface)
     iface->register_in_network_finish = register_in_network_finish;
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void
 iface_modem_messaging_init (MMIfaceModemMessaging *iface)
 {
@@ -1756,6 +1769,8 @@ iface_modem_messaging_init (MMIfaceModemMessaging *iface)
     iface->enable_unsolicited_events_finish = messaging_enable_unsolicited_events_finish;
 }
 
+#endif
+
 #if MM_INTERFACE_LOCATION_SUPPORTED
 
 static void
diff --git a/plugins/iridium/mm-broadband-modem-iridium.c b/plugins/iridium/mm-broadband-modem-iridium.c
index c64e8d2..bb6231e 100644
--- a/plugins/iridium/mm-broadband-modem-iridium.c
+++ b/plugins/iridium/mm-broadband-modem-iridium.c
@@ -28,7 +28,9 @@
 #include "mm-base-modem-at.h"
 #include "mm-iface-modem.h"
 #include "mm-iface-modem-3gpp.h"
-#include "mm-iface-modem-messaging.h"
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-iface-modem-messaging.h"
+#endif
 #include "mm-broadband-modem-iridium.h"
 #include "mm-sim-iridium.h"
 #include "mm-bearer-iridium.h"
@@ -36,12 +38,18 @@
 
 static void iface_modem_init (MMIfaceModem *iface);
 static void iface_modem_3gpp_init (MMIfaceModem3gpp *iface);
+
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
+#endif
 
 G_DEFINE_TYPE_EXTENDED (MMBroadbandModemIridium, mm_broadband_modem_iridium, MM_TYPE_BROADBAND_MODEM, 0,
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM, iface_modem_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_3GPP, iface_modem_3gpp_init)
-                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init));
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init)
+#endif
+                        )
 
 /*****************************************************************************/
 /* Operator Code and Name loading (3GPP interface) */
@@ -80,6 +88,8 @@ load_operator_name_or_code (MMIfaceModem3gpp *self,
     g_object_unref (result);
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* Enable unsolicited events (SMS indications) (Messaging interface) */
 
@@ -111,6 +121,8 @@ messaging_enable_unsolicited_events (MMIfaceModemMessaging *self,
                               user_data);
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 /* Signal quality (Modem interface) */
 
@@ -426,6 +438,8 @@ iface_modem_3gpp_init (MMIfaceModem3gpp *iface)
     iface->scan_networks_finish = NULL;
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void
 iface_modem_messaging_init (MMIfaceModemMessaging *iface)
 {
@@ -433,6 +447,8 @@ iface_modem_messaging_init (MMIfaceModemMessaging *iface)
     iface->enable_unsolicited_events_finish = messaging_enable_unsolicited_events_finish;
 }
 
+#endif
+
 static void
 mm_broadband_modem_iridium_class_init (MMBroadbandModemIridiumClass *klass)
 {
diff --git a/plugins/nokia/mm-broadband-modem-nokia.c b/plugins/nokia/mm-broadband-modem-nokia.c
index 7b1438c..cbb315a 100644
--- a/plugins/nokia/mm-broadband-modem-nokia.c
+++ b/plugins/nokia/mm-broadband-modem-nokia.c
@@ -28,7 +28,9 @@
 #include "mm-log.h"
 #include "mm-errors-types.h"
 #include "mm-iface-modem.h"
-#include "mm-iface-modem-messaging.h"
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-iface-modem-messaging.h"
+#endif
 #include "mm-iface-modem-3gpp.h"
 #include "mm-modem-helpers.h"
 #include "mm-base-modem-at.h"
@@ -36,13 +38,19 @@
 #include "mm-sim-nokia.h"
 
 static void iface_modem_init (MMIfaceModem *iface);
+
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
+#endif
 
 static MMIfaceModem *iface_modem_parent;
 
 G_DEFINE_TYPE_EXTENDED (MMBroadbandModemNokia, mm_broadband_modem_nokia, MM_TYPE_BROADBAND_MODEM, 0,
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM, iface_modem_init)
-                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init));
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init)
+#endif
+                        )
 
 /*****************************************************************************/
 /* Create SIM (Modem interface) */
@@ -372,6 +380,8 @@ mm_broadband_modem_nokia_init (MMBroadbandModemNokia *self)
 {
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void
 iface_modem_messaging_init (MMIfaceModemMessaging *iface)
 {
@@ -380,6 +390,8 @@ iface_modem_messaging_init (MMIfaceModemMessaging *iface)
     iface->check_support_finish = NULL;
 }
 
+#endif
+
 static void
 iface_modem_init (MMIfaceModem *iface)
 {
diff --git a/plugins/novatel/mm-broadband-modem-novatel-lte.c b/plugins/novatel/mm-broadband-modem-novatel-lte.c
index e5be522..67d5d95 100644
--- a/plugins/novatel/mm-broadband-modem-novatel-lte.c
+++ b/plugins/novatel/mm-broadband-modem-novatel-lte.c
@@ -30,7 +30,6 @@
 #include "mm-errors-types.h"
 #include "mm-iface-modem.h"
 #include "mm-iface-modem-3gpp.h"
-#include "mm-iface-modem-messaging.h"
 #include "mm-log.h"
 #include "mm-modem-helpers.h"
 #include "mm-serial-parsers.h"
diff --git a/plugins/novatel/mm-broadband-modem-novatel.c b/plugins/novatel/mm-broadband-modem-novatel.c
index 9fd14e2..17a2630 100644
--- a/plugins/novatel/mm-broadband-modem-novatel.c
+++ b/plugins/novatel/mm-broadband-modem-novatel.c
@@ -29,7 +29,9 @@
 #include "mm-iface-modem-3gpp.h"
 #include "mm-iface-modem-cdma.h"
 #include "mm-iface-modem-time.h"
-#include "mm-iface-modem-messaging.h"
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-iface-modem-messaging.h"
+#endif
 #include "mm-broadband-modem-novatel.h"
 #include "mm-errors-types.h"
 #include "mm-modem-helpers.h"
@@ -38,15 +40,20 @@
 #include "mm-log.h"
 
 static void iface_modem_init (MMIfaceModem *iface);
-static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
 static void iface_modem_cdma_init (MMIfaceModemCdma *iface);
 static void iface_modem_time_init (MMIfaceModemTime *iface);
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
+#endif
+
 static MMIfaceModem *iface_modem_parent;
 
 G_DEFINE_TYPE_EXTENDED (MMBroadbandModemNovatel, mm_broadband_modem_novatel, MM_TYPE_BROADBAND_MODEM, 0,
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM, iface_modem_init)
+#if MM_INTERFACE_MESSAGING_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init)
+#endif
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_CDMA, iface_modem_cdma_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_TIME, iface_modem_time_init))
 
@@ -865,6 +872,8 @@ modem_load_signal_quality (MMIfaceModem *self,
         result);
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* Enable unsolicited events (SMS indications) (Messaging interface) */
 
@@ -890,6 +899,8 @@ messaging_enable_unsolicited_events (MMIfaceModemMessaging *self,
                               user_data);
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 /* Detailed registration state (CDMA interface) */
 
@@ -1288,6 +1299,8 @@ iface_modem_init (MMIfaceModem *iface)
     iface->load_signal_quality_finish = modem_load_signal_quality_finish;
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void
 iface_modem_messaging_init (MMIfaceModemMessaging *iface)
 {
@@ -1295,6 +1308,8 @@ iface_modem_messaging_init (MMIfaceModemMessaging *iface)
     iface->enable_unsolicited_events_finish = messaging_enable_unsolicited_events_finish;
 }
 
+#endif
+
 static void
 iface_modem_cdma_init (MMIfaceModemCdma *iface)
 {
diff --git a/plugins/pantech/mm-broadband-modem-pantech.c b/plugins/pantech/mm-broadband-modem-pantech.c
index 878806d..c2f0dff 100644
--- a/plugins/pantech/mm-broadband-modem-pantech.c
+++ b/plugins/pantech/mm-broadband-modem-pantech.c
@@ -23,20 +23,29 @@
 
 #include "ModemManager.h"
 #include "mm-iface-modem.h"
-#include "mm-iface-modem-messaging.h"
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-iface-modem-messaging.h"
+#endif
 #include "mm-log.h"
 #include "mm-errors-types.h"
 #include "mm-broadband-modem-pantech.h"
 #include "mm-sim-pantech.h"
 
 static void iface_modem_init (MMIfaceModem *iface);
-static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
 static MMIfaceModemMessaging *iface_modem_messaging_parent;
+#endif
 
 G_DEFINE_TYPE_EXTENDED (MMBroadbandModemPantech, mm_broadband_modem_pantech, MM_TYPE_BROADBAND_MODEM, 0,
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM, iface_modem_init)
-                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init))
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init)
+#endif
+                        )
+
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 
 /*****************************************************************************/
 /* Load supported SMS storages (Messaging interface) */
@@ -83,6 +92,8 @@ load_supported_storages (MMIfaceModemMessaging *self,
     iface_modem_messaging_parent->load_supported_storages (self, callback, user_data);
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 /* Create SIM (Modem interface) */
 
@@ -175,6 +186,8 @@ iface_modem_init (MMIfaceModem *iface)
     iface->modem_after_sim_unlock_finish = modem_after_sim_unlock_finish;
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void
 iface_modem_messaging_init (MMIfaceModemMessaging *iface)
 {
@@ -184,6 +197,8 @@ iface_modem_messaging_init (MMIfaceModemMessaging *iface)
     iface->load_supported_storages_finish = load_supported_storages_finish;
 }
 
+#endif
+
 static void
 mm_broadband_modem_pantech_class_init (MMBroadbandModemPantechClass *klass)
 {
diff --git a/plugins/thuraya/mm-broadband-modem-thuraya.c b/plugins/thuraya/mm-broadband-modem-thuraya.c
index 3fc77f2..aa542c1 100644
--- a/plugins/thuraya/mm-broadband-modem-thuraya.c
+++ b/plugins/thuraya/mm-broadband-modem-thuraya.c
@@ -29,7 +29,9 @@
 #include "mm-base-modem-at.h"
 #include "mm-iface-modem.h"
 #include "mm-iface-modem-3gpp.h"
-#include "mm-iface-modem-messaging.h"
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-iface-modem-messaging.h"
+#endif
 #include "mm-broadband-modem-thuraya.h"
 #include "mm-broadband-bearer.h"
 #include "mm-modem-helpers.h"
@@ -37,12 +39,18 @@
 
 static void iface_modem_init (MMIfaceModem *iface);
 static void iface_modem_3gpp_init (MMIfaceModem3gpp *iface);
+
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
+#endif
 
 G_DEFINE_TYPE_EXTENDED (MMBroadbandModemThuraya, mm_broadband_modem_thuraya, MM_TYPE_BROADBAND_MODEM, 0,
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM, iface_modem_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_3GPP, iface_modem_3gpp_init)
-                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init) );
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init)
+#endif
+                       )
 
 /*****************************************************************************/
 /* Operator Code and Name loading (3GPP interface) */
@@ -119,6 +127,8 @@ load_supported_modes (MMIfaceModem *self,
     g_object_unref (result);
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* Load supported SMS storages (Messaging interface) */
 
@@ -224,6 +234,8 @@ modem_messaging_load_supported_storages (MMIfaceModemMessaging *self,
                               result);
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 
 MMBroadbandModemThuraya *
@@ -282,6 +294,8 @@ iface_modem_3gpp_init (MMIfaceModem3gpp *iface)
     iface->scan_networks_finish = NULL;
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void
 iface_modem_messaging_init (MMIfaceModemMessaging *iface)
 {
@@ -289,6 +303,8 @@ iface_modem_messaging_init (MMIfaceModemMessaging *iface)
     iface->load_supported_storages_finish = modem_messaging_load_supported_storages_finish;
 }
 
+#endif
+
 static void
 mm_broadband_modem_thuraya_class_init (MMBroadbandModemThurayaClass *klass)
 {
diff --git a/plugins/thuraya/mm-modem-helpers-thuraya.c b/plugins/thuraya/mm-modem-helpers-thuraya.c
index b940e63..78db188 100644
--- a/plugins/thuraya/mm-modem-helpers-thuraya.c
+++ b/plugins/thuraya/mm-modem-helpers-thuraya.c
@@ -26,6 +26,8 @@
 #include "mm-modem-helpers.h"
 #include "mm-modem-helpers-thuraya.h"
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*************************************************************************/
 
 static MMSmsStorage
@@ -153,4 +155,4 @@ mm_thuraya_3gpp_parse_cpms_test_response (const gchar *reply,
     return FALSE;
 }
 
-/*****************************************************************************/
+#endif
diff --git a/plugins/thuraya/mm-modem-helpers-thuraya.h b/plugins/thuraya/mm-modem-helpers-thuraya.h
index 454baf4..aad76ca 100644
--- a/plugins/thuraya/mm-modem-helpers-thuraya.h
+++ b/plugins/thuraya/mm-modem-helpers-thuraya.h
@@ -18,10 +18,14 @@
 
 #include <glib.h>
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /* AT+CPMS=? (Preferred SMS storage) response parser */
 gboolean mm_thuraya_3gpp_parse_cpms_test_response (const gchar *reply,
                                                    GArray **mem1,
                                                    GArray **mem2,
                                                    GArray **mem3);
 
+#endif
+
 #endif  /* MM_MODEM_HELPERS_THURAYA_H */
diff --git a/plugins/thuraya/tests/test-mm-modem-helpers-thuraya.c b/plugins/thuraya/tests/test-mm-modem-helpers-thuraya.c
index f3a7ea4..dbd330a 100644
--- a/plugins/thuraya/tests/test-mm-modem-helpers-thuraya.c
+++ b/plugins/thuraya/tests/test-mm-modem-helpers-thuraya.c
@@ -32,6 +32,8 @@
 #define trace(...)
 #endif
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* Test CPMS response */
 
@@ -89,6 +91,8 @@ test_cpms_response_thuraya (void *f, gpointer d)
     g_array_unref (mem3);
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 
 void
@@ -123,7 +127,9 @@ int main (int argc, char **argv)
 
     suite = g_test_get_root ();
 
-    g_test_suite_add (suite, TESTCASE (test_cpms_response_thuraya,      NULL));
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+    g_test_suite_add (suite, TESTCASE (test_cpms_response_thuraya, NULL));
+#endif
 
     result = g_test_run ();
 
diff --git a/src/Makefile.am b/src/Makefile.am
index 9099c97..0bd4b7e 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -74,6 +74,10 @@ libhelpers_la_SOURCES = \
 	mm-modem-helpers.h \
 	mm-charsets.c \
 	mm-charsets.h \
+	$(NULL)
+
+if WITH_INTERFACE_MESSAGING
+libhelpers_la_SOURCES += \
 	mm-sms-part.h \
 	mm-sms-part.c \
 	mm-sms-part-3gpp.h \
@@ -81,6 +85,7 @@ libhelpers_la_SOURCES = \
 	mm-sms-part-cdma.h \
 	mm-sms-part-cdma.c \
 	$(NULL)
+endif
 
 if WITH_QMI
 libhelpers_la_SOURCES += \
@@ -272,12 +277,8 @@ ModemManager_SOURCES = \
 	mm-base-modem-at.c \
 	mm-base-modem.h \
 	mm-base-modem.c \
-	mm-base-sms.h \
-	mm-base-sms.c \
 	mm-base-call.h \
 	mm-base-call.c \
-	mm-sms-list.h \
-	mm-sms-list.c \
 	mm-call-list.h \
 	mm-call-list.c \
 	mm-iface-modem.h \
@@ -290,8 +291,6 @@ ModemManager_SOURCES = \
 	mm-iface-modem-cdma.c \
 	mm-iface-modem-simple.h \
 	mm-iface-modem-simple.c \
-	mm-iface-modem-messaging.h \
-	mm-iface-modem-messaging.c \
 	mm-iface-modem-voice.h \
 	mm-iface-modem-voice.c \
 	mm-iface-modem-time.h \
@@ -319,6 +318,18 @@ ModemManager_SOURCES += \
 	$(NULL)
 endif
 
+if WITH_INTERFACE_MESSAGING
+ModemManager_SOURCES += \
+	mm-base-sms.h \
+	mm-base-sms.c \
+	mm-sms-list.h \
+	mm-sms-list.c \
+	mm-iface-modem-messaging.h \
+	mm-iface-modem-messaging.c \
+	$(NULL)
+endif
+
+
 nodist_ModemManager_SOURCES = $(DAEMON_ENUMS_GENERATED)
 
 # Additional Polkit support
@@ -334,8 +345,6 @@ endif
 # Additional QMI support in ModemManager
 if WITH_QMI
 ModemManager_SOURCES += \
-	mm-sms-qmi.h \
-	mm-sms-qmi.c \
 	mm-sim-qmi.h \
 	mm-sim-qmi.c \
 	mm-bearer-qmi.h \
@@ -343,13 +352,19 @@ ModemManager_SOURCES += \
 	mm-broadband-modem-qmi.h \
 	mm-broadband-modem-qmi.c \
 	$(NULL)
+
+if WITH_INTERFACE_MESSAGING
+ModemManager_SOURCES += \
+	mm-sms-qmi.h \
+	mm-sms-qmi.c \
+	$(NULL)
+endif
+
 endif
 
 # Additional MBIM support in ModemManager
 if WITH_MBIM
 ModemManager_SOURCES += \
-	mm-sms-mbim.h \
-	mm-sms-mbim.c \
 	mm-sim-mbim.h \
 	mm-sim-mbim.c \
 	mm-bearer-mbim.h \
@@ -357,4 +372,12 @@ ModemManager_SOURCES += \
 	mm-broadband-modem-mbim.h \
 	mm-broadband-modem-mbim.c \
 	$(NULL)
+
+if WITH_INTERFACE_MESSAGING
+ModemManager_SOURCES += \
+	mm-sms-mbim.h \
+	mm-sms-mbim.c \
+	$(NULL)
+endif
+
 endif
diff --git a/src/mm-broadband-modem-mbim.c b/src/mm-broadband-modem-mbim.c
index 4e63b19..a123341 100644
--- a/src/mm-broadband-modem-mbim.c
+++ b/src/mm-broadband-modem-mbim.c
@@ -25,7 +25,6 @@
 #include "mm-broadband-modem-mbim.h"
 #include "mm-bearer-mbim.h"
 #include "mm-sim-mbim.h"
-#include "mm-sms-mbim.h"
 
 #include "ModemManager.h"
 #include "mm-log.h"
@@ -35,24 +34,34 @@
 #include "mm-bearer-list.h"
 #include "mm-iface-modem.h"
 #include "mm-iface-modem-3gpp.h"
-#include "mm-iface-modem-messaging.h"
 #include "mm-iface-modem-signal.h"
-#include "mm-sms-part-3gpp.h"
+
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-sms-mbim.h"
+# include "mm-iface-modem-messaging.h"
+# include "mm-sms-part-3gpp.h"
+#endif
 
 #if defined WITH_QMI
 # include <libqmi-glib.h>
 #endif
 
-static void iface_modem_init           (MMIfaceModem          *iface);
-static void iface_modem_3gpp_init      (MMIfaceModem3gpp      *iface);
-static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
+static void iface_modem_init (MMIfaceModem *iface);
+static void iface_modem_3gpp_init (MMIfaceModem3gpp *iface);
 static void iface_modem_signal_init    (MMIfaceModemSignal    *iface);
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
+#endif
+
 G_DEFINE_TYPE_EXTENDED (MMBroadbandModemMbim, mm_broadband_modem_mbim, MM_TYPE_BROADBAND_MODEM, 0,
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM, iface_modem_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_3GPP, iface_modem_3gpp_init)
+#if MM_INTERFACE_MESSAGING_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init)
-                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_SIGNAL, iface_modem_signal_init))
+#endif
+                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_SIGNAL, iface_modem_signal_init)
+                        )
 
 typedef enum {
     PROCESS_NOTIFICATION_FLAG_NONE                 = 0,
@@ -2076,6 +2085,8 @@ basic_connect_notification_packet_service (MMBroadbandModemMbim *self,
     update_access_technologies (self);
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void add_sms_part (MMBroadbandModemMbim *self,
                           const MbimSmsPduReadRecord *pdu);
 
@@ -2106,6 +2117,8 @@ sms_notification_read_sms (MMBroadbandModemMbim *self,
     mbim_sms_pdu_read_record_array_free (pdu_messages);
 }
 
+#endif
+
 static void
 basic_connect_notification (MMBroadbandModemMbim *self,
                             MbimMessage *notification)
@@ -2137,6 +2150,8 @@ basic_connect_notification (MMBroadbandModemMbim *self,
     }
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void
 alert_sms_read_query_ready (MbimDevice *device,
                             GAsyncResult *res,
@@ -2238,6 +2253,8 @@ sms_notification (MMBroadbandModemMbim *self,
     }
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 static void
 device_notification_cb (MbimDevice *device,
                         MbimMessage *notification,
@@ -2255,9 +2272,11 @@ device_notification_cb (MbimDevice *device,
     case MBIM_SERVICE_BASIC_CONNECT:
         basic_connect_notification (self, notification);
         break;
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     case MBIM_SERVICE_SMS:
         sms_notification (self, notification);
         break;
+#endif
     default:
         /* Ignore */
         break;
@@ -2883,6 +2902,8 @@ modem_3gpp_scan_networks (MMIfaceModem3gpp *self,
     mbim_message_unref (message);
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* Check support (Messaging interface) */
 
@@ -3147,6 +3168,8 @@ messaging_create_sms (MMIfaceModemMessaging *self)
     return mm_sms_mbim_new (MM_BASE_MODEM (self));
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 
 MMBroadbandModemMbim *
@@ -3285,6 +3308,8 @@ iface_modem_3gpp_init (MMIfaceModem3gpp *iface)
     iface->scan_networks_finish = modem_3gpp_scan_networks_finish;
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void
 iface_modem_messaging_init (MMIfaceModemMessaging *iface)
 {
@@ -3309,6 +3334,8 @@ iface_modem_messaging_init (MMIfaceModemMessaging *iface)
     iface->create_sms = messaging_create_sms;
 }
 
+#endif
+
 static void
 iface_modem_signal_init (MMIfaceModemSignal *iface)
 {
diff --git a/src/mm-broadband-modem-qmi.c b/src/mm-broadband-modem-qmi.c
index 5b90da4..b3eeeff 100644
--- a/src/mm-broadband-modem-qmi.c
+++ b/src/mm-broadband-modem-qmi.c
@@ -34,7 +34,12 @@
 #include "mm-iface-modem-3gpp.h"
 #include "mm-iface-modem-3gpp-ussd.h"
 #include "mm-iface-modem-cdma.h"
-#include "mm-iface-modem-messaging.h"
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-iface-modem-messaging.h"
+# include "mm-sms-qmi.h"
+# include "mm-sms-part-3gpp.h"
+# include "mm-sms-part-cdma.h"
+#endif
 #if MM_INTERFACE_LOCATION_SUPPORTED
 # include "mm-iface-modem-location.h"
 #endif
@@ -43,20 +48,19 @@
 #include "mm-iface-modem-oma.h"
 #include "mm-sim-qmi.h"
 #include "mm-bearer-qmi.h"
-#include "mm-sms-qmi.h"
-#include "mm-sms-part-3gpp.h"
-#include "mm-sms-part-cdma.h"
 
 static void iface_modem_init (MMIfaceModem *iface);
 static void iface_modem_3gpp_init (MMIfaceModem3gpp *iface);
 static void iface_modem_3gpp_ussd_init (MMIfaceModem3gppUssd *iface);
 static void iface_modem_cdma_init (MMIfaceModemCdma *iface);
-static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
 static void iface_modem_oma_init (MMIfaceModemOma *iface);
 static void iface_modem_firmware_init (MMIfaceModemFirmware *iface);
 static void iface_modem_signal_init (MMIfaceModemSignal *iface);
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
 static MMIfaceModemMessaging *iface_modem_messaging_parent;
+#endif
 
 #if MM_INTERFACE_LOCATION_SUPPORTED
 static void iface_modem_location_init (MMIfaceModemLocation *iface);
@@ -68,7 +72,9 @@ G_DEFINE_TYPE_EXTENDED (MMBroadbandModemQmi, mm_broadband_modem_qmi, MM_TYPE_BRO
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_3GPP, iface_modem_3gpp_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_3GPP_USSD, iface_modem_3gpp_ussd_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_CDMA, iface_modem_cdma_init)
+#if MM_INTERFACE_MESSAGING_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init)
+#endif
 #if MM_INTERFACE_LOCATION_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_LOCATION, iface_modem_location_init)
 #endif
@@ -115,11 +121,13 @@ struct _MMBroadbandModemQmiPrivate {
     guint activation_event_report_indication_id;
     gpointer activation_ctx;
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     /* Messaging helpers */
     gboolean messaging_fallback_at;
     gboolean messaging_unsolicited_events_enabled;
     gboolean messaging_unsolicited_events_setup;
     guint messaging_event_report_indication_id;
+#endif
 
 #if MM_INTERFACE_LOCATION_SUPPORTED
     /* Location helpers */
@@ -7236,6 +7244,8 @@ modem_cdma_setup_unsolicited_events (MMIfaceModemCdma *self,
                                              user_data);
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* Check support (Messaging interface) */
 
@@ -8328,6 +8338,8 @@ messaging_create_sms (MMIfaceModemMessaging *_self)
     return mm_sms_qmi_new (MM_BASE_MODEM (self));
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 #if MM_INTERFACE_LOCATION_SUPPORTED
 
 /*****************************************************************************/
@@ -11324,9 +11336,11 @@ initialization_started (MMBroadbandModem *self,
     i = 0;
     ctx->services[i++] = QMI_SERVICE_DMS;
     ctx->services[i++] = QMI_SERVICE_NAS;
-    ctx->services[i++] = QMI_SERVICE_WMS;
     ctx->services[i++] = QMI_SERVICE_OMA;
     ctx->services[i++] = QMI_SERVICE_UIM;
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+    ctx->services[i++] = QMI_SERVICE_WMS;
+#endif
 #if MM_INTERFACE_LOCATION_SUPPORTED
     ctx->services[i++] = QMI_SERVICE_PDS;
 #endif
@@ -11564,6 +11578,8 @@ iface_modem_cdma_init (MMIfaceModemCdma *iface)
     iface->activate_manual_finish = modem_cdma_activate_manual_finish;
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void
 iface_modem_messaging_init (MMIfaceModemMessaging *iface)
 {
@@ -11590,6 +11606,8 @@ iface_modem_messaging_init (MMIfaceModemMessaging *iface)
     iface->create_sms = messaging_create_sms;
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 #if MM_INTERFACE_LOCATION_SUPPORTED
 
 static void
diff --git a/src/mm-broadband-modem.c b/src/mm-broadband-modem.c
index 66abda9..91eda2b 100644
--- a/src/mm-broadband-modem.c
+++ b/src/mm-broadband-modem.c
@@ -37,7 +37,11 @@
 #if MM_INTERFACE_LOCATION_SUPPORTED
 # include "mm-iface-modem-location.h"
 #endif
-#include "mm-iface-modem-messaging.h"
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-iface-modem-messaging.h"
+# include "mm-sms-list.h"
+# include "mm-sms-part-3gpp.h"
+#endif
 #include "mm-iface-modem-voice.h"
 #include "mm-iface-modem-time.h"
 #include "mm-iface-modem-firmware.h"
@@ -45,8 +49,6 @@
 #include "mm-iface-modem-oma.h"
 #include "mm-broadband-bearer.h"
 #include "mm-bearer-list.h"
-#include "mm-sms-list.h"
-#include "mm-sms-part-3gpp.h"
 #include "mm-call-list.h"
 #include "mm-base-sim.h"
 #include "mm-log.h"
@@ -66,7 +68,9 @@ static void iface_modem_simple_init (MMIfaceModemSimple *iface);
 #if MM_INTERFACE_LOCATION_SUPPORTED
 static void iface_modem_location_init (MMIfaceModemLocation *iface);
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
+#endif
 static void iface_modem_voice_init (MMIfaceModemVoice *iface);
 static void iface_modem_time_init (MMIfaceModemTime *iface);
 static void iface_modem_signal_init (MMIfaceModemSignal *iface);
@@ -82,7 +86,9 @@ G_DEFINE_TYPE_EXTENDED (MMBroadbandModem, mm_broadband_modem, MM_TYPE_BASE_MODEM
 #if MM_INTERFACE_LOCATION_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_LOCATION, iface_modem_location_init)
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init)
+#endif
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_VOICE, iface_modem_voice_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_TIME, iface_modem_time_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_SIGNAL, iface_modem_signal_init)
@@ -99,7 +105,9 @@ enum {
 #if MM_INTERFACE_LOCATION_SUPPORTED
     PROP_MODEM_LOCATION_DBUS_SKELETON,
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     PROP_MODEM_MESSAGING_DBUS_SKELETON,
+#endif
     PROP_MODEM_VOICE_DBUS_SKELETON,
     PROP_MODEM_TIME_DBUS_SKELETON,
     PROP_MODEM_SIGNAL_DBUS_SKELETON,
@@ -117,9 +125,11 @@ enum {
     PROP_MODEM_CDMA_EVDO_REGISTRATION_STATE,
     PROP_MODEM_CDMA_CDMA1X_NETWORK_SUPPORTED,
     PROP_MODEM_CDMA_EVDO_NETWORK_SUPPORTED,
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     PROP_MODEM_MESSAGING_SMS_LIST,
     PROP_MODEM_MESSAGING_SMS_PDU_MODE,
     PROP_MODEM_MESSAGING_SMS_DEFAULT_STORAGE,
+#endif
     PROP_MODEM_VOICE_CALL_LIST,
     PROP_MODEM_SIMPLE_STATUS,
     PROP_MODEM_SIM_HOT_SWAP_SUPPORTED,
@@ -198,6 +208,7 @@ struct _MMBroadbandModemPrivate {
     GObject *modem_location_dbus_skeleton;
 #endif
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     /*<--- Modem Messaging interface --->*/
     /* Properties */
     GObject *modem_messaging_dbus_skeleton;
@@ -210,6 +221,7 @@ struct _MMBroadbandModemPrivate {
     MMSmsStorage current_sms_mem1_storage;
     gboolean mem2_storage_locked;
     MMSmsStorage current_sms_mem2_storage;
+#endif
 
     /*<--- Modem Voice interface --->*/
     /* Properties */
@@ -5139,6 +5151,8 @@ modem_3gpp_ussd_check_support (MMIfaceModem3gppUssd *self,
                               result);
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* Check if Messaging supported (Messaging interface) */
 
@@ -6441,6 +6455,8 @@ modem_messaging_create_sms (MMIfaceModemMessaging *self)
     return mm_base_sms_new (MM_BASE_MODEM (self));
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 /* Check if Voice supported (Voice interface) */
 
@@ -8924,7 +8940,9 @@ typedef enum {
     DISABLING_STEP_IFACE_SIGNAL,
     DISABLING_STEP_IFACE_OMA,
     DISABLING_STEP_IFACE_TIME,
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     DISABLING_STEP_IFACE_MESSAGING,
+#endif
     DISABLING_STEP_IFACE_VOICE,
 #if MM_INTERFACE_LOCATION_SUPPORTED
     DISABLING_STEP_IFACE_LOCATION,
@@ -9037,7 +9055,9 @@ INTERFACE_DISABLE_READY_FN (iface_modem_cdma,      MM_IFACE_MODEM_CDMA,      TRU
 #if MM_INTERFACE_LOCATION_SUPPORTED
 INTERFACE_DISABLE_READY_FN (iface_modem_location,  MM_IFACE_MODEM_LOCATION,  FALSE)
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 INTERFACE_DISABLE_READY_FN (iface_modem_messaging, MM_IFACE_MODEM_MESSAGING, FALSE)
+#endif
 INTERFACE_DISABLE_READY_FN (iface_modem_voice,     MM_IFACE_MODEM_VOICE,     FALSE)
 INTERFACE_DISABLE_READY_FN (iface_modem_signal,    MM_IFACE_MODEM_SIGNAL,    FALSE)
 INTERFACE_DISABLE_READY_FN (iface_modem_time,      MM_IFACE_MODEM_TIME,      FALSE)
@@ -9175,6 +9195,7 @@ disabling_step (DisablingContext *ctx)
         /* Fall down to next step */
         ctx->step++;
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     case DISABLING_STEP_IFACE_MESSAGING:
         if (ctx->self->priv->modem_messaging_dbus_skeleton) {
             mm_dbg ("Modem has messaging capabilities, disabling the Messaging interface...");
@@ -9186,6 +9207,7 @@ disabling_step (DisablingContext *ctx)
         }
         /* Fall down to next step */
         ctx->step++;
+#endif
 
     case DISABLING_STEP_IFACE_VOICE:
         if (ctx->self->priv->modem_voice_dbus_skeleton) {
@@ -9308,7 +9330,9 @@ typedef enum {
 #if MM_INTERFACE_LOCATION_SUPPORTED
     ENABLING_STEP_IFACE_LOCATION,
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     ENABLING_STEP_IFACE_MESSAGING,
+#endif
     ENABLING_STEP_IFACE_VOICE,
     ENABLING_STEP_IFACE_TIME,
     ENABLING_STEP_IFACE_SIGNAL,
@@ -9411,7 +9435,9 @@ INTERFACE_ENABLE_READY_FN (iface_modem_cdma,      MM_IFACE_MODEM_CDMA,      TRUE
 #if MM_INTERFACE_LOCATION_SUPPORTED
 INTERFACE_ENABLE_READY_FN (iface_modem_location,  MM_IFACE_MODEM_LOCATION,  FALSE)
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 INTERFACE_ENABLE_READY_FN (iface_modem_messaging, MM_IFACE_MODEM_MESSAGING, FALSE)
+#endif
 INTERFACE_ENABLE_READY_FN (iface_modem_voice,     MM_IFACE_MODEM_VOICE,     FALSE)
 INTERFACE_ENABLE_READY_FN (iface_modem_signal,    MM_IFACE_MODEM_SIGNAL,    FALSE)
 INTERFACE_ENABLE_READY_FN (iface_modem_time,      MM_IFACE_MODEM_TIME,      FALSE)
@@ -9561,6 +9587,7 @@ enabling_step (EnablingContext *ctx)
         ctx->step++;
 #endif
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     case ENABLING_STEP_IFACE_MESSAGING:
         if (ctx->self->priv->modem_messaging_dbus_skeleton) {
             mm_dbg ("Modem has messaging capabilities, enabling the Messaging interface...");
@@ -9573,6 +9600,7 @@ enabling_step (EnablingContext *ctx)
         }
         /* Fall down to next step */
         ctx->step++;
+#endif
 
     case ENABLING_STEP_IFACE_VOICE:
         if (ctx->self->priv->modem_voice_dbus_skeleton) {
@@ -9746,7 +9774,9 @@ typedef enum {
 #if MM_INTERFACE_LOCATION_SUPPORTED
     INITIALIZE_STEP_IFACE_LOCATION,
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     INITIALIZE_STEP_IFACE_MESSAGING,
+#endif
     INITIALIZE_STEP_IFACE_VOICE,
     INITIALIZE_STEP_IFACE_TIME,
     INITIALIZE_STEP_IFACE_SIGNAL,
@@ -9947,7 +9977,9 @@ INTERFACE_INIT_READY_FN (iface_modem_cdma,      MM_IFACE_MODEM_CDMA,      TRUE)
 #if MM_INTERFACE_LOCATION_SUPPORTED
 INTERFACE_INIT_READY_FN (iface_modem_location,  MM_IFACE_MODEM_LOCATION,  FALSE)
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 INTERFACE_INIT_READY_FN (iface_modem_messaging, MM_IFACE_MODEM_MESSAGING, FALSE)
+#endif
 INTERFACE_INIT_READY_FN (iface_modem_voice,     MM_IFACE_MODEM_VOICE,     FALSE)
 INTERFACE_INIT_READY_FN (iface_modem_time,      MM_IFACE_MODEM_TIME,      FALSE)
 INTERFACE_INIT_READY_FN (iface_modem_signal,    MM_IFACE_MODEM_SIGNAL,    FALSE)
@@ -10050,6 +10082,7 @@ initialize_step (InitializeContext *ctx)
         return;
 #endif
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     case INITIALIZE_STEP_IFACE_MESSAGING:
         /* Initialize the Messaging interface */
         mm_iface_modem_messaging_initialize (MM_IFACE_MODEM_MESSAGING (ctx->self),
@@ -10057,6 +10090,7 @@ initialize_step (InitializeContext *ctx)
                                              (GAsyncReadyCallback)iface_modem_messaging_initialize_ready,
                                              ctx);
         return;
+#endif
 
     case INITIALIZE_STEP_IFACE_VOICE:
         /* Initialize the Voice interface */
@@ -10186,7 +10220,9 @@ initialize_step (InitializeContext *ctx)
 #if MM_INTERFACE_LOCATION_SUPPORTED
                 mm_iface_modem_location_shutdown (MM_IFACE_MODEM_LOCATION (ctx->self));
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
                 mm_iface_modem_messaging_shutdown (MM_IFACE_MODEM_MESSAGING (ctx->self));
+#endif
                 mm_iface_modem_voice_shutdown (MM_IFACE_MODEM_VOICE (ctx->self));
                 mm_iface_modem_time_shutdown (MM_IFACE_MODEM_TIME (ctx->self));
                 mm_iface_modem_simple_shutdown (MM_IFACE_MODEM_SIMPLE (ctx->self));
@@ -10422,10 +10458,12 @@ set_property (GObject *object,
         self->priv->modem_location_dbus_skeleton = g_value_dup_object (value);
         break;
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     case PROP_MODEM_MESSAGING_DBUS_SKELETON:
         g_clear_object (&self->priv->modem_messaging_dbus_skeleton);
         self->priv->modem_messaging_dbus_skeleton = g_value_dup_object (value);
         break;
+#endif
     case PROP_MODEM_VOICE_DBUS_SKELETON:
         g_clear_object (&self->priv->modem_voice_dbus_skeleton);
         self->priv->modem_voice_dbus_skeleton = g_value_dup_object (value);
@@ -10484,20 +10522,22 @@ set_property (GObject *object,
     case PROP_MODEM_CDMA_EVDO_NETWORK_SUPPORTED:
         self->priv->modem_cdma_evdo_network_supported = g_value_get_boolean (value);
         break;
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     case PROP_MODEM_MESSAGING_SMS_LIST:
         g_clear_object (&self->priv->modem_messaging_sms_list);
         self->priv->modem_messaging_sms_list = g_value_dup_object (value);
         break;
-    case PROP_MODEM_VOICE_CALL_LIST:
-        g_clear_object (&self->priv->modem_voice_call_list);
-        self->priv->modem_voice_call_list = g_value_dup_object (value);
-        break;
     case PROP_MODEM_MESSAGING_SMS_PDU_MODE:
         self->priv->modem_messaging_sms_pdu_mode = g_value_get_boolean (value);
         break;
     case PROP_MODEM_MESSAGING_SMS_DEFAULT_STORAGE:
         self->priv->modem_messaging_sms_default_storage = g_value_get_enum (value);
         break;
+#endif
+    case PROP_MODEM_VOICE_CALL_LIST:
+        g_clear_object (&self->priv->modem_voice_call_list);
+        self->priv->modem_voice_call_list = g_value_dup_object (value);
+        break;
     case PROP_MODEM_SIMPLE_STATUS:
         g_clear_object (&self->priv->modem_simple_status);
         self->priv->modem_simple_status = g_value_dup_object (value);
@@ -10540,9 +10580,11 @@ get_property (GObject *object,
         g_value_set_object (value, self->priv->modem_location_dbus_skeleton);
         break;
 #endif
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     case PROP_MODEM_MESSAGING_DBUS_SKELETON:
         g_value_set_object (value, self->priv->modem_messaging_dbus_skeleton);
         break;
+#endif
     case PROP_MODEM_VOICE_DBUS_SKELETON:
         g_value_set_object (value, self->priv->modem_voice_dbus_skeleton);
         break;
@@ -10594,18 +10636,20 @@ get_property (GObject *object,
     case PROP_MODEM_CDMA_EVDO_NETWORK_SUPPORTED:
         g_value_set_boolean (value, self->priv->modem_cdma_evdo_network_supported);
         break;
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     case PROP_MODEM_MESSAGING_SMS_LIST:
         g_value_set_object (value, self->priv->modem_messaging_sms_list);
         break;
-    case PROP_MODEM_VOICE_CALL_LIST:
-        g_value_set_object (value, self->priv->modem_voice_call_list);
-        break;
     case PROP_MODEM_MESSAGING_SMS_PDU_MODE:
         g_value_set_boolean (value, self->priv->modem_messaging_sms_pdu_mode);
         break;
     case PROP_MODEM_MESSAGING_SMS_DEFAULT_STORAGE:
         g_value_set_enum (value, self->priv->modem_messaging_sms_default_storage);
         break;
+#endif
+    case PROP_MODEM_VOICE_CALL_LIST:
+        g_value_set_object (value, self->priv->modem_voice_call_list);
+        break;
     case PROP_MODEM_SIMPLE_STATUS:
         g_value_set_object (value, self->priv->modem_simple_status);
         break;
@@ -10637,10 +10681,14 @@ mm_broadband_modem_init (MMBroadbandModem *self)
     self->priv->modem_cdma_evdo_registration_state = MM_MODEM_CDMA_REGISTRATION_STATE_UNKNOWN;
     self->priv->modem_cdma_cdma1x_network_supported = TRUE;
     self->priv->modem_cdma_evdo_network_supported = TRUE;
+
+    self->priv->sim_hot_swap_supported = FALSE;
+
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     self->priv->modem_messaging_sms_default_storage = MM_SMS_STORAGE_UNKNOWN;
     self->priv->current_sms_mem1_storage = MM_SMS_STORAGE_UNKNOWN;
     self->priv->current_sms_mem2_storage = MM_SMS_STORAGE_UNKNOWN;
-    self->priv->sim_hot_swap_supported = FALSE;
+#endif
 }
 
 static void
@@ -10689,10 +10737,13 @@ dispose (GObject *object)
     }
 #endif
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     if (self->priv->modem_messaging_dbus_skeleton) {
         mm_iface_modem_messaging_shutdown (MM_IFACE_MODEM_MESSAGING (object));
         g_clear_object (&self->priv->modem_messaging_dbus_skeleton);
     }
+    g_clear_object (&self->priv->modem_messaging_sms_list);
+#endif
 
     if (self->priv->modem_voice_dbus_skeleton) {
         mm_iface_modem_voice_shutdown (MM_IFACE_MODEM_VOICE (object));
@@ -10711,7 +10762,6 @@ dispose (GObject *object)
 
     g_clear_object (&self->priv->modem_sim);
     g_clear_object (&self->priv->modem_bearer_list);
-    g_clear_object (&self->priv->modem_messaging_sms_list);
     g_clear_object (&self->priv->modem_voice_call_list);
     g_clear_object (&self->priv->modem_simple_status);
 
@@ -10891,6 +10941,8 @@ iface_modem_location_init (MMIfaceModemLocation *iface)
 
 #endif
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 static void
 iface_modem_messaging_init (MMIfaceModemMessaging *iface)
 {
@@ -10915,6 +10967,8 @@ iface_modem_messaging_init (MMIfaceModemMessaging *iface)
     iface->init_current_storages_finish = modem_messaging_init_current_storages_finish;
 }
 
+#endif
+
 static void
 iface_modem_voice_init (MMIfaceModemVoice *iface)
 {
@@ -11016,9 +11070,11 @@ mm_broadband_modem_class_init (MMBroadbandModemClass *klass)
                                       MM_IFACE_MODEM_LOCATION_DBUS_SKELETON);
 #endif
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     g_object_class_override_property (object_class,
                                       PROP_MODEM_MESSAGING_DBUS_SKELETON,
                                       MM_IFACE_MODEM_MESSAGING_DBUS_SKELETON);
+#endif
 
     g_object_class_override_property (object_class,
                                       PROP_MODEM_VOICE_DBUS_SKELETON,
@@ -11088,21 +11144,23 @@ mm_broadband_modem_class_init (MMBroadbandModemClass *klass)
                                       PROP_MODEM_CDMA_EVDO_NETWORK_SUPPORTED,
                                       MM_IFACE_MODEM_CDMA_EVDO_NETWORK_SUPPORTED);
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     g_object_class_override_property (object_class,
                                       PROP_MODEM_MESSAGING_SMS_LIST,
                                       MM_IFACE_MODEM_MESSAGING_SMS_LIST);
 
     g_object_class_override_property (object_class,
-                                      PROP_MODEM_VOICE_CALL_LIST,
-                                      MM_IFACE_MODEM_VOICE_CALL_LIST);
-
-    g_object_class_override_property (object_class,
                                       PROP_MODEM_MESSAGING_SMS_PDU_MODE,
                                       MM_IFACE_MODEM_MESSAGING_SMS_PDU_MODE);
 
     g_object_class_override_property (object_class,
                                       PROP_MODEM_MESSAGING_SMS_DEFAULT_STORAGE,
                                       MM_IFACE_MODEM_MESSAGING_SMS_DEFAULT_STORAGE);
+#endif
+
+    g_object_class_override_property (object_class,
+                                      PROP_MODEM_VOICE_CALL_LIST,
+                                      MM_IFACE_MODEM_VOICE_CALL_LIST);
 
     g_object_class_override_property (object_class,
                                       PROP_MODEM_SIMPLE_STATUS,
diff --git a/src/mm-broadband-modem.h b/src/mm-broadband-modem.h
index d6b55d9..dc2d6bd 100644
--- a/src/mm-broadband-modem.h
+++ b/src/mm-broadband-modem.h
@@ -114,6 +114,10 @@ MMModemCharset mm_broadband_modem_get_current_charset (MMBroadbandModem *self);
 gchar *mm_broadband_modem_create_device_identifier (MMBroadbandModem *self,
                                                     const gchar *ati,
                                                     const gchar *ati1);
+/* Helper to update SIM hot swap */
+void mm_broadband_modem_update_sim_hot_swap_detected (MMBroadbandModem *self);
+
+#if MM_INTERFACE_MESSAGING_SUPPORTED
 
 /* Locking/unlocking SMS storages */
 void     mm_broadband_modem_lock_sms_storages        (MMBroadbandModem *self,
@@ -127,7 +131,6 @@ gboolean mm_broadband_modem_lock_sms_storages_finish (MMBroadbandModem *self,
 void     mm_broadband_modem_unlock_sms_storages      (MMBroadbandModem *self,
                                                       gboolean mem1,
                                                       gboolean mem2);
-/* Helper to update SIM hot swap */
-void mm_broadband_modem_update_sim_hot_swap_detected (MMBroadbandModem *self);
+#endif
 
 #endif /* MM_BROADBAND_MODEM_H */
diff --git a/src/mm-call-list.c b/src/mm-call-list.c
index 056e293..ee0cf59 100644
--- a/src/mm-call-list.c
+++ b/src/mm-call-list.c
@@ -24,7 +24,6 @@
 #define _LIBMM_INSIDE_MM
 #include <libmm-glib.h>
 
-#include "mm-iface-modem-messaging.h"
 #include "mm-call-list.h"
 #include "mm-base-call.h"
 #include "mm-log.h"
diff --git a/src/mm-modem-helpers-mbim.c b/src/mm-modem-helpers-mbim.c
index 36d5502..081c9e8 100644
--- a/src/mm-modem-helpers-mbim.c
+++ b/src/mm-modem-helpers-mbim.c
@@ -263,6 +263,8 @@ mm_mobile_equipment_error_from_mbim_nw_error (MbimNwError nw_error)
     }
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 
 MMSmsState
@@ -281,3 +283,5 @@ mm_sms_state_from_mbim_message_status (MbimSmsStatus status)
 
     return MM_SMS_STATE_UNKNOWN;
 }
+
+#endif
diff --git a/src/mm-modem-helpers-mbim.h b/src/mm-modem-helpers-mbim.h
index 67b6b57..bda62db 100644
--- a/src/mm-modem-helpers-mbim.h
+++ b/src/mm-modem-helpers-mbim.h
@@ -36,9 +36,13 @@ GList *mm_3gpp_network_info_list_from_mbim_providers (const MbimProvider *const
 
 GError *mm_mobile_equipment_error_from_mbim_nw_error (MbimNwError nw_error);
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* MBIM/SMS to MM translations */
 
 MMSmsState mm_sms_state_from_mbim_message_status (MbimSmsStatus status);
 
+#endif
+
 #endif  /* MM_MODEM_HELPERS_MBIM_H */
diff --git a/src/mm-modem-helpers-qmi.c b/src/mm-modem-helpers-qmi.c
index 778ce9e..2d1b981 100644
--- a/src/mm-modem-helpers-qmi.c
+++ b/src/mm-modem-helpers-qmi.c
@@ -1179,6 +1179,8 @@ mm_modem_cdma_activation_state_from_qmi_activation_state (QmiDmsActivationState
     }
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 
 QmiWmsStorageType
@@ -1225,6 +1227,8 @@ mm_sms_state_from_qmi_message_tag (QmiWmsMessageTagType tag)
     }
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 
 QmiWdsAuthentication
diff --git a/src/mm-modem-helpers-qmi.h b/src/mm-modem-helpers-qmi.h
index a19851f..1b11d16 100644
--- a/src/mm-modem-helpers-qmi.h
+++ b/src/mm-modem-helpers-qmi.h
@@ -82,6 +82,8 @@ MMModemCdmaRegistrationState mm_modem_cdma_registration_state_from_qmi_registrat
 
 MMModemCdmaActivationState mm_modem_cdma_activation_state_from_qmi_activation_state (QmiDmsActivationState state);
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* QMI/WMS to MM translations */
 
@@ -90,6 +92,8 @@ MMSmsStorage mm_sms_storage_from_qmi_storage_type (QmiWmsStorageType qmi_storage
 
 MMSmsState mm_sms_state_from_qmi_message_tag (QmiWmsMessageTagType tag);
 
+#endif
+
 /*****************************************************************************/
 /* QMI/WDS to MM translations */
 
diff --git a/src/mm-modem-helpers.c b/src/mm-modem-helpers.c
index d51f778..1acc2cf 100644
--- a/src/mm-modem-helpers.c
+++ b/src/mm-modem-helpers.c
@@ -28,7 +28,9 @@
 #define _LIBMM_INSIDE_MM
 #include <libmm-glib.h>
 
-#include "mm-sms-part.h"
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+# include "mm-sms-part.h"
+#endif
 #include "mm-modem-helpers.h"
 #include "mm-log.h"
 
@@ -1524,134 +1526,6 @@ mm_3gpp_parse_creg_response (GMatchInfo *info,
     return TRUE;
 }
 
-/*************************************************************************/
-
-#define CMGF_TAG "+CMGF:"
-
-gboolean
-mm_3gpp_parse_cmgf_test_response (const gchar *reply,
-                                  gboolean *sms_pdu_supported,
-                                  gboolean *sms_text_supported,
-                                  GError **error)
-{
-    GRegex *r;
-    GMatchInfo *match_info;
-    gchar *s;
-    guint32 min = -1, max = -1;
-
-    /* Strip whitespace and response tag */
-    if (g_str_has_prefix (reply, CMGF_TAG))
-        reply += strlen (CMGF_TAG);
-    while (isspace (*reply))
-        reply++;
-
-    r = g_regex_new ("\\(?\\s*(\\d+)\\s*[-,]?\\s*(\\d+)?\\s*\\)?", 0, 0, error);
-    if (!r)
-        return FALSE;
-
-    if (!g_regex_match_full (r, reply, strlen (reply), 0, 0, &match_info, NULL)) {
-        g_set_error (error,
-                     MM_CORE_ERROR,
-                     MM_CORE_ERROR_FAILED,
-                     "Failed to parse CMGF query result '%s'",
-                     reply);
-        g_match_info_free (match_info);
-        g_regex_unref (r);
-        return FALSE;
-    }
-
-    s = g_match_info_fetch (match_info, 1);
-    if (s)
-        min = atoi (s);
-    g_free (s);
-
-    s = g_match_info_fetch (match_info, 2);
-    if (s)
-        max = atoi (s);
-    g_free (s);
-
-    /* CMGF=0 for PDU mode */
-    *sms_pdu_supported = (min == 0);
-
-    /* CMGF=1 for Text mode */
-    *sms_text_supported = (max >= 1);
-
-    g_match_info_free (match_info);
-    g_regex_unref (r);
-    return TRUE;
-}
-
-/*************************************************************************/
-
-MM3gppPduInfo *
-mm_3gpp_parse_cmgr_read_response (const gchar *reply,
-                                  guint index,
-                                  GError **error)
-{
-    GRegex *r;
-    GMatchInfo *match_info;
-    gint count;
-    gint status;
-    gchar *pdu;
-    MM3gppPduInfo *info = NULL;
-
-    /* +CMGR: <stat>,<alpha>,<length>(whitespace)<pdu> */
-    /* The <alpha> and <length> fields are matched, but not currently used */
-    r = g_regex_new ("\\+CMGR:\\s*(\\d+)\\s*,([^,]*),\\s*(\\d+)\\s*([^\\r\\n]*)", 0, 0, NULL);
-    g_assert (r);
-
-    if (!g_regex_match_full (r, reply, strlen (reply), 0, 0, &match_info, NULL)) {
-        g_set_error (error,
-                     MM_CORE_ERROR,
-                     MM_CORE_ERROR_FAILED,
-                     "Failed to parse CMGR read result: response didn't match '%s'",
-                     reply);
-        goto done;
-    }
-
-    /* g_match_info_get_match_count includes match #0 */
-    if ((count = g_match_info_get_match_count (match_info)) != 5) {
-        g_set_error (error,
-                     MM_CORE_ERROR,
-                     MM_CORE_ERROR_FAILED,
-                     "Failed to match CMGR fields (matched %d) '%s'",
-                     count,
-                     reply);
-        goto done;
-    }
-
-    if (!mm_get_int_from_match_info (match_info, 1, &status)) {
-        g_set_error (error,
-                     MM_CORE_ERROR,
-                     MM_CORE_ERROR_FAILED,
-                     "Failed to extract CMGR status field '%s'",
-                     reply);
-        goto done;
-    }
-
-
-    pdu = mm_get_string_unquoted_from_match_info (match_info, 4);
-    if (!pdu) {
-        g_set_error (error,
-                     MM_CORE_ERROR,
-                     MM_CORE_ERROR_FAILED,
-                     "Failed to extract CMGR pdu field '%s'",
-                     reply);
-        goto done;
-    }
-
-    info = g_new0 (MM3gppPduInfo, 1);
-    info->index = index;
-    info->status = status;
-    info->pdu = pdu;
-
-done:
-    g_match_info_free (match_info);
-    g_regex_unref (r);
-
-    return info;
-}
-
 /*****************************************************************************/
 /* AT+CRSM response parser */
 
@@ -2222,280 +2096,89 @@ mm_3gpp_parse_cfun_query_generic_response (const gchar        *response,
 
 /*************************************************************************/
 
-static MMSmsStorage
-storage_from_str (const gchar *str)
-{
-    if (g_str_equal (str, "SM"))
-        return MM_SMS_STORAGE_SM;
-    if (g_str_equal (str, "ME"))
-        return MM_SMS_STORAGE_ME;
-    if (g_str_equal (str, "MT"))
-        return MM_SMS_STORAGE_MT;
-    if (g_str_equal (str, "SR"))
-        return MM_SMS_STORAGE_SR;
-    if (g_str_equal (str, "BM"))
-        return MM_SMS_STORAGE_BM;
-    if (g_str_equal (str, "TA"))
-        return MM_SMS_STORAGE_TA;
-    return MM_SMS_STORAGE_UNKNOWN;
-}
-
 gboolean
-mm_3gpp_parse_cpms_test_response (const gchar *reply,
-                                  GArray **mem1,
-                                  GArray **mem2,
-                                  GArray **mem3)
+mm_3gpp_parse_cscs_test_response (const gchar *reply,
+                                  MMModemCharset *out_charsets)
 {
+    MMModemCharset charsets = MM_MODEM_CHARSET_UNKNOWN;
     GRegex *r;
-    gchar **split;
-    guint i;
-    GArray *tmp1 = NULL;
-    GArray *tmp2 = NULL;
-    GArray *tmp3 = NULL;
+    GMatchInfo *match_info;
+    gchar *p, *str;
+    gboolean success = FALSE;
 
-    g_assert (mem1 != NULL);
-    g_assert (mem2 != NULL);
-    g_assert (mem3 != NULL);
+    g_return_val_if_fail (reply != NULL, FALSE);
+    g_return_val_if_fail (out_charsets != NULL, FALSE);
 
-#define N_EXPECTED_GROUPS 3
+    /* Find the first '(' or '"'; the general format is:
+     *
+     * +CSCS: ("IRA","GSM","UCS2")
+     *
+     * but some devices (some Blackberries) don't include the ().
+     */
+    p = strchr (reply, '(');
+    if (p)
+        p++;
+    else {
+        p = strchr (reply, '"');
+        if (!p)
+            return FALSE;
+    }
 
-    split = mm_split_string_groups (mm_strip_tag (reply, "+CPMS:"));
-    if (!split)
+    /* Now parse each charset */
+    r = g_regex_new ("\\s*([^,\\)]+)\\s*", 0, 0, NULL);
+    if (!r)
         return FALSE;
 
-    if (g_strv_length (split) != N_EXPECTED_GROUPS) {
-        mm_warn ("Cannot parse +CPMS test response: invalid number of groups (%u != %u)",
-                 g_strv_length (split), N_EXPECTED_GROUPS);
-        g_strfreev (split);
-        return FALSE;
+    if (g_regex_match_full (r, p, strlen (p), 0, 0, &match_info, NULL)) {
+        while (g_match_info_matches (match_info)) {
+            str = g_match_info_fetch (match_info, 1);
+            charsets |= mm_modem_charset_from_string (str);
+            g_free (str);
+
+            g_match_info_next (match_info, NULL);
+            success = TRUE;
+        }
     }
+    g_match_info_free (match_info);
+    g_regex_unref (r);
 
-    r = g_regex_new ("\\s*\"([^,\\)]+)\"\\s*", 0, 0, NULL);
-    g_assert (r);
+    if (success)
+        *out_charsets = charsets;
 
-    for (i = 0; i < N_EXPECTED_GROUPS; i++) {
-        GMatchInfo *match_info = NULL;
-        GArray *array;
+    return success;
+}
 
-        /* We always return a valid array, even if it may be empty */
-        array = g_array_new (FALSE, FALSE, sizeof (MMSmsStorage));
+/*************************************************************************/
 
-        /* Got a range group to match */
-        if (g_regex_match_full (r, split[i], strlen (split[i]), 0, 0, &match_info, NULL)) {
-            while (g_match_info_matches (match_info)) {
-                gchar *str;
+gboolean
+mm_3gpp_parse_clck_test_response (const gchar *reply,
+                                  MMModem3gppFacility *out_facilities)
+{
+    GRegex *r;
+    GMatchInfo *match_info;
 
-                str = g_match_info_fetch (match_info, 1);
-                if (str) {
-                    MMSmsStorage storage;
+    g_return_val_if_fail (reply != NULL, FALSE);
+    g_return_val_if_fail (out_facilities != NULL, FALSE);
 
-                    storage = storage_from_str (str);
-                    g_array_append_val (array, storage);
-                    g_free (str);
-                }
+    /* the general format is:
+     *
+     * +CLCK: ("SC","AO","AI","PN")
+     */
+    reply = mm_strip_tag (reply, "+CLCK:");
 
-                g_match_info_next (match_info, NULL);
-            }
-        }
-        g_match_info_free (match_info);
-
-        if (!tmp1)
-            tmp1 = array;
-        else if (!tmp2)
-            tmp2 = array;
-        else if (!tmp3)
-            tmp3 = array;
-        else
-            g_assert_not_reached ();
-    }
-
-    g_strfreev (split);
-    g_regex_unref (r);
-
-    g_warn_if_fail (tmp1 != NULL);
-    g_warn_if_fail (tmp2 != NULL);
-    g_warn_if_fail (tmp3 != NULL);
-
-    /* Only return TRUE if all sets have been parsed correctly
-     * (even if the arrays may be empty) */
-    if (tmp1 && tmp2 && tmp3) {
-        *mem1 = tmp1;
-        *mem2 = tmp2;
-        *mem3 = tmp3;
-        return TRUE;
-    }
-
-    /* Otherwise, cleanup and return FALSE */
-    if (tmp1)
-        g_array_unref (tmp1);
-    if (tmp2)
-        g_array_unref (tmp2);
-    if (tmp3)
-        g_array_unref (tmp3);
-    return FALSE;
-}
-
-/**********************************************************************
- * AT+CPMS?
- * +CPMS: <memr>,<usedr>,<totalr>,<memw>,<usedw>,<totalw>, <mems>,<useds>,<totals>
- */
-
-#define CPMS_QUERY_REGEX "\\+CPMS:\\s*\"(?P<memr>.*)\",[0-9]+,[0-9]+,\"(?P<memw>.*)\",[0-9]+,[0-9]+,\"(?P<mems>.*)\",[0-9]+,[0-9]"
-
-gboolean
-mm_3gpp_parse_cpms_query_response (const gchar *reply,
-                                   MMSmsStorage *memr,
-                                   MMSmsStorage *memw,
-                                   GError **error)
-{
-    GRegex *r = NULL;
-    gboolean ret = FALSE;
-    GMatchInfo *match_info = NULL;
-
-    r = g_regex_new (CPMS_QUERY_REGEX, G_REGEX_RAW, 0, NULL);
-
-    g_assert(r);
-
-    if (!g_regex_match (r, reply, 0, &match_info)) {
-        g_set_error (error, MM_CORE_ERROR, MM_CORE_ERROR_FAILED,
-                     "Could not parse CPMS query reponse '%s'", reply);
-        goto end;
-    }
-
-    if (!g_match_info_matches(match_info)) {
-        g_set_error (error, MM_CORE_ERROR, MM_CORE_ERROR_FAILED,
-                     "Could not find matches in CPMS query reply '%s'", reply);
-        goto end;
-    }
-
-    if (!mm_3gpp_get_cpms_storage_match (match_info, "memr", memr, error)) {
-        goto end;
-    }
-
-    if (!mm_3gpp_get_cpms_storage_match (match_info, "memw", memw, error)) {
-        goto end;
-    }
-
-    ret = TRUE;
-
-end:
-    if (r != NULL)
-        g_regex_unref (r);
-
-    if (match_info != NULL)
-        g_match_info_free (match_info);
-
-    return ret;
-}
-
-gboolean
-mm_3gpp_get_cpms_storage_match (GMatchInfo *match_info,
-                                const gchar *match_name,
-                                MMSmsStorage *storage,
-                                GError **error)
-{
-    gboolean ret = TRUE;
-    gchar *str = NULL;
-
-    str = g_match_info_fetch_named(match_info, match_name);
-    if (str == NULL || str[0] == '\0') {
-        g_set_error (error, MM_CORE_ERROR, MM_CORE_ERROR_FAILED,
-                     "Could not find '%s' from CPMS reply", match_name);
-        ret = FALSE;
-    } else {
-        *storage = storage_from_str (str);
-    }
-
-    g_free (str);
-
-    return ret;
-}
-
-/*************************************************************************/
-
-gboolean
-mm_3gpp_parse_cscs_test_response (const gchar *reply,
-                                  MMModemCharset *out_charsets)
-{
-    MMModemCharset charsets = MM_MODEM_CHARSET_UNKNOWN;
-    GRegex *r;
-    GMatchInfo *match_info;
-    gchar *p, *str;
-    gboolean success = FALSE;
-
-    g_return_val_if_fail (reply != NULL, FALSE);
-    g_return_val_if_fail (out_charsets != NULL, FALSE);
-
-    /* Find the first '(' or '"'; the general format is:
-     *
-     * +CSCS: ("IRA","GSM","UCS2")
-     *
-     * but some devices (some Blackberries) don't include the ().
-     */
-    p = strchr (reply, '(');
-    if (p)
-        p++;
-    else {
-        p = strchr (reply, '"');
-        if (!p)
-            return FALSE;
-    }
-
-    /* Now parse each charset */
-    r = g_regex_new ("\\s*([^,\\)]+)\\s*", 0, 0, NULL);
-    if (!r)
-        return FALSE;
-
-    if (g_regex_match_full (r, p, strlen (p), 0, 0, &match_info, NULL)) {
-        while (g_match_info_matches (match_info)) {
-            str = g_match_info_fetch (match_info, 1);
-            charsets |= mm_modem_charset_from_string (str);
-            g_free (str);
-
-            g_match_info_next (match_info, NULL);
-            success = TRUE;
-        }
-    }
-    g_match_info_free (match_info);
-    g_regex_unref (r);
-
-    if (success)
-        *out_charsets = charsets;
-
-    return success;
-}
-
-/*************************************************************************/
-
-gboolean
-mm_3gpp_parse_clck_test_response (const gchar *reply,
-                                  MMModem3gppFacility *out_facilities)
-{
-    GRegex *r;
-    GMatchInfo *match_info;
-
-    g_return_val_if_fail (reply != NULL, FALSE);
-    g_return_val_if_fail (out_facilities != NULL, FALSE);
-
-    /* the general format is:
-     *
-     * +CLCK: ("SC","AO","AI","PN")
-     */
-    reply = mm_strip_tag (reply, "+CLCK:");
-
-    /* Now parse each facility */
-    r = g_regex_new ("\\s*\"([^,\\)]+)\"\\s*", 0, 0, NULL);
-    g_assert (r != NULL);
-
-    *out_facilities = MM_MODEM_3GPP_FACILITY_NONE;
-    if (g_regex_match_full (r, reply, strlen (reply), 0, 0, &match_info, NULL)) {
-        while (g_match_info_matches (match_info)) {
-            gchar *str;
-
-            str = g_match_info_fetch (match_info, 1);
-            if (str) {
-                *out_facilities |= mm_3gpp_acronym_to_facility (str);
-                g_free (str);
+    /* Now parse each facility */
+    r = g_regex_new ("\\s*\"([^,\\)]+)\"\\s*", 0, 0, NULL);
+    g_assert (r != NULL);
+
+    *out_facilities = MM_MODEM_3GPP_FACILITY_NONE;
+    if (g_regex_match_full (r, reply, strlen (reply), 0, 0, &match_info, NULL)) {
+        while (g_match_info_matches (match_info)) {
+            gchar *str;
+
+            str = g_match_info_fetch (match_info, 1);
+            if (str) {
+                *out_facilities |= mm_3gpp_acronym_to_facility (str);
+                g_free (str);
             }
 
             g_match_info_next (match_info, NULL);
@@ -2800,124 +2483,58 @@ done:
 
 /*************************************************************************/
 
-void
-mm_3gpp_pdu_info_free (MM3gppPduInfo *info)
+/* Map two letter facility codes into flag values. There are
+ * many more facilities defined (for various flavors of call
+ * barring); we only map the ones we care about. */
+typedef struct {
+    MMModem3gppFacility facility;
+    gchar *acronym;
+} FacilityAcronym;
+
+static const FacilityAcronym facility_acronyms[] = {
+    { MM_MODEM_3GPP_FACILITY_SIM,           "SC" },
+    { MM_MODEM_3GPP_FACILITY_PH_SIM,        "PS" },
+    { MM_MODEM_3GPP_FACILITY_PH_FSIM,       "PF" },
+    { MM_MODEM_3GPP_FACILITY_FIXED_DIALING, "FD" },
+    { MM_MODEM_3GPP_FACILITY_NET_PERS,      "PN" },
+    { MM_MODEM_3GPP_FACILITY_NET_SUB_PERS,  "PU" },
+    { MM_MODEM_3GPP_FACILITY_PROVIDER_PERS, "PP" },
+    { MM_MODEM_3GPP_FACILITY_CORP_PERS,     "PC" }
+};
+
+MMModem3gppFacility
+mm_3gpp_acronym_to_facility (const gchar *str)
 {
-    g_free (info->pdu);
-    g_free (info);
+    guint i;
+
+    for (i = 0; i < G_N_ELEMENTS (facility_acronyms); i++) {
+        if (g_str_equal (facility_acronyms[i].acronym, str))
+            return facility_acronyms[i].facility;
+    }
+
+    return MM_MODEM_3GPP_FACILITY_NONE;
 }
 
-void
-mm_3gpp_pdu_info_list_free (GList *info_list)
+gchar *
+mm_3gpp_facility_to_acronym (MMModem3gppFacility facility)
 {
-    g_list_free_full (info_list, (GDestroyNotify)mm_3gpp_pdu_info_free);
+    guint i;
+
+    for (i = 0; i < G_N_ELEMENTS (facility_acronyms); i++) {
+        if (facility_acronyms[i].facility == facility)
+            return facility_acronyms[i].acronym;
+    }
+
+    return NULL;
 }
 
-GList *
-mm_3gpp_parse_pdu_cmgl_response (const gchar *str,
-                                 GError **error)
+/*************************************************************************/
+
+MMModemAccessTechnology
+mm_string_to_access_tech (const gchar *string)
 {
-    GError *inner_error = NULL;
-    GList *list = NULL;
-    GMatchInfo *match_info;
-    GRegex *r;
-
-    /*
-     * +CMGL: <index>, <status>, [<alpha>], <length>
-     *   or
-     * +CMGL: <index>, <status>, <length>
-     *
-     * We just read <index>, <stat> and the PDU itself.
-     */
-    r = g_regex_new ("\\+CMGL:\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,(.*)\\r\\n([^\\r\\n]*)(\\r\\n)?",
-                     G_REGEX_RAW | G_REGEX_OPTIMIZE, 0, NULL);
-    g_assert (r != NULL);
-
-    g_regex_match_full (r, str, strlen (str), 0, 0, &match_info, &inner_error);
-    while (!inner_error && g_match_info_matches (match_info)) {
-        MM3gppPduInfo *info;
-
-        info = g_new0 (MM3gppPduInfo, 1);
-        if (mm_get_int_from_match_info (match_info, 1, &info->index) &&
-            mm_get_int_from_match_info (match_info, 2, &info->status) &&
-            (info->pdu = mm_get_string_unquoted_from_match_info (match_info, 4)) != NULL) {
-            /* Append to our list of results and keep on */
-            list = g_list_append (list, info);
-            g_match_info_next (match_info, &inner_error);
-        } else {
-            inner_error = g_error_new (MM_CORE_ERROR,
-                                       MM_CORE_ERROR_FAILED,
-                                       "Error parsing +CMGL response: '%s'",
-                                       str);
-        }
-    }
-
-    g_match_info_free (match_info);
-    g_regex_unref (r);
-
-    if (inner_error) {
-        g_propagate_error (error, inner_error);
-        mm_3gpp_pdu_info_list_free (list);
-        return NULL;
-    }
-
-    return list;
-}
-
-/*************************************************************************/
-
-/* Map two letter facility codes into flag values. There are
- * many more facilities defined (for various flavors of call
- * barring); we only map the ones we care about. */
-typedef struct {
-    MMModem3gppFacility facility;
-    gchar *acronym;
-} FacilityAcronym;
-
-static const FacilityAcronym facility_acronyms[] = {
-    { MM_MODEM_3GPP_FACILITY_SIM,           "SC" },
-    { MM_MODEM_3GPP_FACILITY_PH_SIM,        "PS" },
-    { MM_MODEM_3GPP_FACILITY_PH_FSIM,       "PF" },
-    { MM_MODEM_3GPP_FACILITY_FIXED_DIALING, "FD" },
-    { MM_MODEM_3GPP_FACILITY_NET_PERS,      "PN" },
-    { MM_MODEM_3GPP_FACILITY_NET_SUB_PERS,  "PU" },
-    { MM_MODEM_3GPP_FACILITY_PROVIDER_PERS, "PP" },
-    { MM_MODEM_3GPP_FACILITY_CORP_PERS,     "PC" }
-};
-
-MMModem3gppFacility
-mm_3gpp_acronym_to_facility (const gchar *str)
-{
-    guint i;
-
-    for (i = 0; i < G_N_ELEMENTS (facility_acronyms); i++) {
-        if (g_str_equal (facility_acronyms[i].acronym, str))
-            return facility_acronyms[i].facility;
-    }
-
-    return MM_MODEM_3GPP_FACILITY_NONE;
-}
-
-gchar *
-mm_3gpp_facility_to_acronym (MMModem3gppFacility facility)
-{
-    guint i;
-
-    for (i = 0; i < G_N_ELEMENTS (facility_acronyms); i++) {
-        if (facility_acronyms[i].facility == facility)
-            return facility_acronyms[i].acronym;
-    }
-
-    return NULL;
-}
-
-/*************************************************************************/
-
-MMModemAccessTechnology
-mm_string_to_access_tech (const gchar *string)
-{
-    MMModemAccessTechnology act = MM_MODEM_ACCESS_TECHNOLOGY_UNKNOWN;
-    gsize len;
+    MMModemAccessTechnology act = MM_MODEM_ACCESS_TECHNOLOGY_UNKNOWN;
+    gsize len;
 
     g_return_val_if_fail (string != NULL, MM_MODEM_ACCESS_TECHNOLOGY_UNKNOWN);
 
@@ -3828,3 +3445,396 @@ mm_parse_cclk_response (const char *response,
 
     return ret;
 }
+
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
+/*****************************************************************************/
+/* Messaging specific helpers and utilities */
+/*****************************************************************************/
+
+/*************************************************************************/
+
+#define CMGF_TAG "+CMGF:"
+
+gboolean
+mm_3gpp_parse_cmgf_test_response (const gchar *reply,
+                                  gboolean *sms_pdu_supported,
+                                  gboolean *sms_text_supported,
+                                  GError **error)
+{
+    GRegex *r;
+    GMatchInfo *match_info;
+    gchar *s;
+    guint32 min = -1, max = -1;
+
+    /* Strip whitespace and response tag */
+    if (g_str_has_prefix (reply, CMGF_TAG))
+        reply += strlen (CMGF_TAG);
+    while (isspace (*reply))
+        reply++;
+
+    r = g_regex_new ("\\(?\\s*(\\d+)\\s*[-,]?\\s*(\\d+)?\\s*\\)?", 0, 0, error);
+    if (!r)
+        return FALSE;
+
+    if (!g_regex_match_full (r, reply, strlen (reply), 0, 0, &match_info, NULL)) {
+        g_set_error (error,
+                     MM_CORE_ERROR,
+                     MM_CORE_ERROR_FAILED,
+                     "Failed to parse CMGF query result '%s'",
+                     reply);
+        g_match_info_free (match_info);
+        g_regex_unref (r);
+        return FALSE;
+    }
+
+    s = g_match_info_fetch (match_info, 1);
+    if (s)
+        min = atoi (s);
+    g_free (s);
+
+    s = g_match_info_fetch (match_info, 2);
+    if (s)
+        max = atoi (s);
+    g_free (s);
+
+    /* CMGF=0 for PDU mode */
+    *sms_pdu_supported = (min == 0);
+
+    /* CMGF=1 for Text mode */
+    *sms_text_supported = (max >= 1);
+
+    g_match_info_free (match_info);
+    g_regex_unref (r);
+    return TRUE;
+}
+
+/*************************************************************************/
+
+MM3gppPduInfo *
+mm_3gpp_parse_cmgr_read_response (const gchar *reply,
+                                  guint index,
+                                  GError **error)
+{
+    GRegex *r;
+    GMatchInfo *match_info;
+    gint count;
+    gint status;
+    gchar *pdu;
+    MM3gppPduInfo *info = NULL;
+
+    /* +CMGR: <stat>,<alpha>,<length>(whitespace)<pdu> */
+    /* The <alpha> and <length> fields are matched, but not currently used */
+    r = g_regex_new ("\\+CMGR:\\s*(\\d+)\\s*,([^,]*),\\s*(\\d+)\\s*([^\\r\\n]*)", 0, 0, NULL);
+    g_assert (r);
+
+    if (!g_regex_match_full (r, reply, strlen (reply), 0, 0, &match_info, NULL)) {
+        g_set_error (error,
+                     MM_CORE_ERROR,
+                     MM_CORE_ERROR_FAILED,
+                     "Failed to parse CMGR read result: response didn't match '%s'",
+                     reply);
+        goto done;
+    }
+
+    /* g_match_info_get_match_count includes match #0 */
+    if ((count = g_match_info_get_match_count (match_info)) != 5) {
+        g_set_error (error,
+                     MM_CORE_ERROR,
+                     MM_CORE_ERROR_FAILED,
+                     "Failed to match CMGR fields (matched %d) '%s'",
+                     count,
+                     reply);
+        goto done;
+    }
+
+    if (!mm_get_int_from_match_info (match_info, 1, &status)) {
+        g_set_error (error,
+                     MM_CORE_ERROR,
+                     MM_CORE_ERROR_FAILED,
+                     "Failed to extract CMGR status field '%s'",
+                     reply);
+        goto done;
+    }
+
+
+    pdu = mm_get_string_unquoted_from_match_info (match_info, 4);
+    if (!pdu) {
+        g_set_error (error,
+                     MM_CORE_ERROR,
+                     MM_CORE_ERROR_FAILED,
+                     "Failed to extract CMGR pdu field '%s'",
+                     reply);
+        goto done;
+    }
+
+    info = g_new0 (MM3gppPduInfo, 1);
+    info->index = index;
+    info->status = status;
+    info->pdu = pdu;
+
+done:
+    g_match_info_free (match_info);
+    g_regex_unref (r);
+
+    return info;
+}
+
+/*************************************************************************/
+
+static MMSmsStorage
+storage_from_str (const gchar *str)
+{
+    if (g_str_equal (str, "SM"))
+        return MM_SMS_STORAGE_SM;
+    if (g_str_equal (str, "ME"))
+        return MM_SMS_STORAGE_ME;
+    if (g_str_equal (str, "MT"))
+        return MM_SMS_STORAGE_MT;
+    if (g_str_equal (str, "SR"))
+        return MM_SMS_STORAGE_SR;
+    if (g_str_equal (str, "BM"))
+        return MM_SMS_STORAGE_BM;
+    if (g_str_equal (str, "TA"))
+        return MM_SMS_STORAGE_TA;
+    return MM_SMS_STORAGE_UNKNOWN;
+}
+
+gboolean
+mm_3gpp_parse_cpms_test_response (const gchar *reply,
+                                  GArray **mem1,
+                                  GArray **mem2,
+                                  GArray **mem3)
+{
+    GRegex *r;
+    gchar **split;
+    guint i;
+    GArray *tmp1 = NULL;
+    GArray *tmp2 = NULL;
+    GArray *tmp3 = NULL;
+
+    g_assert (mem1 != NULL);
+    g_assert (mem2 != NULL);
+    g_assert (mem3 != NULL);
+
+#define N_EXPECTED_GROUPS 3
+
+    split = mm_split_string_groups (mm_strip_tag (reply, "+CPMS:"));
+    if (!split)
+        return FALSE;
+
+    if (g_strv_length (split) != N_EXPECTED_GROUPS) {
+        mm_warn ("Cannot parse +CPMS test response: invalid number of groups (%u != %u)",
+                 g_strv_length (split), N_EXPECTED_GROUPS);
+        g_strfreev (split);
+        return FALSE;
+    }
+
+    r = g_regex_new ("\\s*\"([^,\\)]+)\"\\s*", 0, 0, NULL);
+    g_assert (r);
+
+    for (i = 0; i < N_EXPECTED_GROUPS; i++) {
+        GMatchInfo *match_info = NULL;
+        GArray *array;
+
+        /* We always return a valid array, even if it may be empty */
+        array = g_array_new (FALSE, FALSE, sizeof (MMSmsStorage));
+
+        /* Got a range group to match */
+        if (g_regex_match_full (r, split[i], strlen (split[i]), 0, 0, &match_info, NULL)) {
+            while (g_match_info_matches (match_info)) {
+                gchar *str;
+
+                str = g_match_info_fetch (match_info, 1);
+                if (str) {
+                    MMSmsStorage storage;
+
+                    storage = storage_from_str (str);
+                    g_array_append_val (array, storage);
+                    g_free (str);
+                }
+
+                g_match_info_next (match_info, NULL);
+            }
+        }
+        g_match_info_free (match_info);
+
+        if (!tmp1)
+            tmp1 = array;
+        else if (!tmp2)
+            tmp2 = array;
+        else if (!tmp3)
+            tmp3 = array;
+        else
+            g_assert_not_reached ();
+    }
+
+    g_strfreev (split);
+    g_regex_unref (r);
+
+    g_warn_if_fail (tmp1 != NULL);
+    g_warn_if_fail (tmp2 != NULL);
+    g_warn_if_fail (tmp3 != NULL);
+
+    /* Only return TRUE if all sets have been parsed correctly
+     * (even if the arrays may be empty) */
+    if (tmp1 && tmp2 && tmp3) {
+        *mem1 = tmp1;
+        *mem2 = tmp2;
+        *mem3 = tmp3;
+        return TRUE;
+    }
+
+    /* Otherwise, cleanup and return FALSE */
+    if (tmp1)
+        g_array_unref (tmp1);
+    if (tmp2)
+        g_array_unref (tmp2);
+    if (tmp3)
+        g_array_unref (tmp3);
+    return FALSE;
+}
+
+/**********************************************************************
+ * AT+CPMS?
+ * +CPMS: <memr>,<usedr>,<totalr>,<memw>,<usedw>,<totalw>, <mems>,<useds>,<totals>
+ */
+
+#define CPMS_QUERY_REGEX "\\+CPMS:\\s*\"(?P<memr>.*)\",[0-9]+,[0-9]+,\"(?P<memw>.*)\",[0-9]+,[0-9]+,\"(?P<mems>.*)\",[0-9]+,[0-9]"
+
+gboolean
+mm_3gpp_parse_cpms_query_response (const gchar *reply,
+                                   MMSmsStorage *memr,
+                                   MMSmsStorage *memw,
+                                   GError **error)
+{
+    GRegex *r = NULL;
+    gboolean ret = FALSE;
+    GMatchInfo *match_info = NULL;
+
+    r = g_regex_new (CPMS_QUERY_REGEX, G_REGEX_RAW, 0, NULL);
+
+    g_assert(r);
+
+    if (!g_regex_match (r, reply, 0, &match_info)) {
+        g_set_error (error, MM_CORE_ERROR, MM_CORE_ERROR_FAILED,
+                     "Could not parse CPMS query reponse '%s'", reply);
+        goto end;
+    }
+
+    if (!g_match_info_matches(match_info)) {
+        g_set_error (error, MM_CORE_ERROR, MM_CORE_ERROR_FAILED,
+                     "Could not find matches in CPMS query reply '%s'", reply);
+        goto end;
+    }
+
+    if (!mm_3gpp_get_cpms_storage_match (match_info, "memr", memr, error)) {
+        goto end;
+    }
+
+    if (!mm_3gpp_get_cpms_storage_match (match_info, "memw", memw, error)) {
+        goto end;
+    }
+
+    ret = TRUE;
+
+end:
+    if (r != NULL)
+        g_regex_unref (r);
+
+    if (match_info != NULL)
+        g_match_info_free (match_info);
+
+    return ret;
+}
+
+gboolean
+mm_3gpp_get_cpms_storage_match (GMatchInfo *match_info,
+                                const gchar *match_name,
+                                MMSmsStorage *storage,
+                                GError **error)
+{
+    gboolean ret = TRUE;
+    gchar *str = NULL;
+
+    str = g_match_info_fetch_named(match_info, match_name);
+    if (str == NULL || str[0] == '\0') {
+        g_set_error (error, MM_CORE_ERROR, MM_CORE_ERROR_FAILED,
+                     "Could not find '%s' from CPMS reply", match_name);
+        ret = FALSE;
+    } else {
+        *storage = storage_from_str (str);
+    }
+
+    g_free (str);
+
+    return ret;
+}
+
+/*************************************************************************/
+
+void
+mm_3gpp_pdu_info_free (MM3gppPduInfo *info)
+{
+    g_free (info->pdu);
+    g_free (info);
+}
+
+void
+mm_3gpp_pdu_info_list_free (GList *info_list)
+{
+    g_list_free_full (info_list, (GDestroyNotify)mm_3gpp_pdu_info_free);
+}
+
+GList *
+mm_3gpp_parse_pdu_cmgl_response (const gchar *str,
+                                 GError **error)
+{
+    GError *inner_error = NULL;
+    GList *list = NULL;
+    GMatchInfo *match_info;
+    GRegex *r;
+
+    /*
+     * +CMGL: <index>, <status>, [<alpha>], <length>
+     *   or
+     * +CMGL: <index>, <status>, <length>
+     *
+     * We just read <index>, <stat> and the PDU itself.
+     */
+    r = g_regex_new ("\\+CMGL:\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,(.*)\\r\\n([^\\r\\n]*)(\\r\\n)?",
+                     G_REGEX_RAW | G_REGEX_OPTIMIZE, 0, NULL);
+    g_assert (r != NULL);
+
+    g_regex_match_full (r, str, strlen (str), 0, 0, &match_info, &inner_error);
+    while (!inner_error && g_match_info_matches (match_info)) {
+        MM3gppPduInfo *info;
+
+        info = g_new0 (MM3gppPduInfo, 1);
+        if (mm_get_int_from_match_info (match_info, 1, &info->index) &&
+            mm_get_int_from_match_info (match_info, 2, &info->status) &&
+            (info->pdu = mm_get_string_unquoted_from_match_info (match_info, 4)) != NULL) {
+            /* Append to our list of results and keep on */
+            list = g_list_append (list, info);
+            g_match_info_next (match_info, &inner_error);
+        } else {
+            inner_error = g_error_new (MM_CORE_ERROR,
+                                       MM_CORE_ERROR_FAILED,
+                                       "Error parsing +CMGL response: '%s'",
+                                       str);
+        }
+    }
+
+    g_match_info_free (match_info);
+    g_regex_unref (r);
+
+    if (inner_error) {
+        g_propagate_error (error, inner_error);
+        mm_3gpp_pdu_info_list_free (list);
+        return NULL;
+    }
+
+    return list;
+}
+
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
diff --git a/src/mm-modem-helpers.h b/src/mm-modem-helpers.h
index fb7982f..f47e2cd 100644
--- a/src/mm-modem-helpers.h
+++ b/src/mm-modem-helpers.h
@@ -170,28 +170,6 @@ gboolean mm_3gpp_parse_creg_response (GMatchInfo *info,
                                       gboolean *out_cereg,
                                       GError **error);
 
-/* AT+CMGF=? (SMS message format) response parser */
-gboolean mm_3gpp_parse_cmgf_test_response (const gchar *reply,
-                                           gboolean *sms_pdu_supported,
-                                           gboolean *sms_text_supported,
-                                           GError **error);
-
-/* AT+CPMS=? (Preferred SMS storage) response parser */
-gboolean mm_3gpp_parse_cpms_test_response (const gchar *reply,
-                                           GArray **mem1,
-                                           GArray **mem2,
-                                           GArray **mem3);
-
-/* AT+CPMS? (Current SMS storage) response parser */
-gboolean mm_3gpp_parse_cpms_query_response (const gchar *reply,
-                                            MMSmsStorage *mem1,
-                                            MMSmsStorage *mem2,
-                                            GError** error);
-gboolean mm_3gpp_get_cpms_storage_match (GMatchInfo *match_info,
-                                         const gchar *match_name,
-                                         MMSmsStorage *storage,
-                                         GError **error);
-
 /* AT+CSCS=? (Supported charsets) response parser */
 gboolean mm_3gpp_parse_cscs_test_response (const gchar *reply,
                                            MMModemCharset *out_charsets);
@@ -221,23 +199,6 @@ gint         mm_3gpp_cind_response_get_max       (MM3gppCindResponse *r);
 GByteArray *mm_3gpp_parse_cind_read_response (const gchar *reply,
                                               GError **error);
 
-/* AT+CMGL=4 (list sms parts) response parser */
-typedef struct {
-    gint index;
-    gint status;
-    gchar *pdu;
-} MM3gppPduInfo;
-void   mm_3gpp_pdu_info_free           (MM3gppPduInfo *info);
-void   mm_3gpp_pdu_info_list_free      (GList *info_list);
-GList *mm_3gpp_parse_pdu_cmgl_response (const gchar *str,
-                                        GError **error);
-
-/* AT+CMGR (Read message) response parser */
-MM3gppPduInfo *mm_3gpp_parse_cmgr_read_response (const gchar *reply,
-                                                 guint index,
-                                                 GError **error);
-
-
 /* AT+CRSM response parser */
 gboolean mm_3gpp_parse_crsm_response (const gchar *reply,
                                       guint *sw1,
@@ -304,6 +265,52 @@ MMBearerIpFamily  mm_3gpp_get_ip_family_from_pdp_type (const gchar *pdp_type);
 
 char *mm_3gpp_parse_iccid (const char *raw_iccid, GError **error);
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
+/*****************************************************************************/
+/* Messaging specific helpers and utilities */
+/*****************************************************************************/
+
+/* AT+CMGF=? (SMS message format) response parser */
+gboolean mm_3gpp_parse_cmgf_test_response (const gchar *reply,
+                                           gboolean *sms_pdu_supported,
+                                           gboolean *sms_text_supported,
+                                           GError **error);
+
+/* AT+CPMS=? (Preferred SMS storage) response parser */
+gboolean mm_3gpp_parse_cpms_test_response (const gchar *reply,
+                                           GArray **mem1,
+                                           GArray **mem2,
+                                           GArray **mem3);
+
+/* AT+CPMS? (Current SMS storage) response parser */
+gboolean mm_3gpp_parse_cpms_query_response (const gchar *reply,
+                                            MMSmsStorage *mem1,
+                                            MMSmsStorage *mem2,
+                                            GError** error);
+gboolean mm_3gpp_get_cpms_storage_match (GMatchInfo *match_info,
+                                         const gchar *match_name,
+                                         MMSmsStorage *storage,
+                                         GError **error);
+
+/* AT+CMGL=4 (list sms parts) response parser */
+typedef struct {
+    gint index;
+    gint status;
+    gchar *pdu;
+} MM3gppPduInfo;
+void   mm_3gpp_pdu_info_free           (MM3gppPduInfo *info);
+void   mm_3gpp_pdu_info_list_free      (GList *info_list);
+GList *mm_3gpp_parse_pdu_cmgl_response (const gchar *str,
+                                        GError **error);
+
+/* AT+CMGR (Read message) response parser */
+MM3gppPduInfo *mm_3gpp_parse_cmgr_read_response (const gchar *reply,
+                                                 guint index,
+                                                 GError **error);
+
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 /* CDMA specific helpers and utilities */
 /*****************************************************************************/
diff --git a/src/tests/Makefile.am b/src/tests/Makefile.am
index c5bb61d..ea814b1 100644
--- a/src/tests/Makefile.am
+++ b/src/tests/Makefile.am
@@ -49,10 +49,15 @@ noinst_PROGRAMS = \
 	test-charsets \
 	test-qcdm-serial-port \
 	test-at-serial-port \
+	$(NULL)
+
+if WITH_INTERFACE_MESSAGING
+noinst_PROGRAMS += \
 	test-sms-part-3gpp \
 	test-sms-part-cdma \
 	test-udev-rules \
 	$(NULL)
+endif
 
 if WITH_QMI
 noinst_PROGRAMS += test-modem-helpers-qmi
diff --git a/src/tests/test-modem-helpers.c b/src/tests/test-modem-helpers.c
index 0afa22f..757a108 100644
--- a/src/tests/test-modem-helpers.c
+++ b/src/tests/test-modem-helpers.c
@@ -29,9 +29,12 @@
 #define trace(...)
 #endif
 
+
 #define g_assert_cmpfloat_tolerance(val1, val2, tolerance)  \
     g_assert_cmpfloat (fabs (val1 - val2), <, tolerance)
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* Test CMGL responses */
 
@@ -262,6 +265,8 @@ test_cmgr_response_telit (void *f, gpointer d)
     test_cmgr_response (str, &expected);
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 /* Test COPS responses */
 
@@ -2057,7 +2062,7 @@ test_cgdcont_read_response_samsung (void *f, gpointer d)
 }
 
 /*****************************************************************************/
-/* Test CGDCONT read responses */
+/* Test CGACT read responses */
 
 static void
 test_cgact_read_results (const gchar *desc,
@@ -2143,6 +2148,8 @@ test_cgact_read_response_multiple (void)
     test_cgact_read_results ("multiple", reply, &expected[0], G_N_ELEMENTS (expected));
 }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
+
 /*****************************************************************************/
 /* Test CPMS responses */
 
@@ -2346,6 +2353,8 @@ test_cpms_query_response (void *f, gpointer d) {
     }
 }
 
+#endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
 /*****************************************************************************/
 /* Test CNUM responses */
 
@@ -3485,6 +3494,7 @@ int main (int argc, char **argv)
         item++;
     }
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     g_test_suite_add (suite, TESTCASE (test_cpms_response_cinterion,    NULL));
     g_test_suite_add (suite, TESTCASE (test_cpms_response_huawei_mu609, NULL));
     g_test_suite_add (suite, TESTCASE (test_cpms_response_nokia_c6,     NULL));
@@ -3492,6 +3502,7 @@ int main (int argc, char **argv)
     g_test_suite_add (suite, TESTCASE (test_cpms_response_mixed_spaces, NULL));
     g_test_suite_add (suite, TESTCASE (test_cpms_response_empty_fields, NULL));
     g_test_suite_add (suite, TESTCASE (test_cpms_query_response,        NULL));
+#endif
 
     g_test_suite_add (suite, TESTCASE (test_cmp_apn_name, NULL));
 
@@ -3522,6 +3533,7 @@ int main (int argc, char **argv)
 
     g_test_suite_add (suite, TESTCASE (test_cdma_parse_gsn, NULL));
 
+#if MM_INTERFACE_MESSAGING_SUPPORTED
     g_test_suite_add (suite, TESTCASE (test_cmgl_response_generic, NULL));
     g_test_suite_add (suite, TESTCASE (test_cmgl_response_generic_multiple, NULL));
     g_test_suite_add (suite, TESTCASE (test_cmgl_response_pantech, NULL));
@@ -3529,6 +3541,7 @@ int main (int argc, char **argv)
 
     g_test_suite_add (suite, TESTCASE (test_cmgr_response_generic, NULL));
     g_test_suite_add (suite, TESTCASE (test_cmgr_response_telit, NULL));
+#endif
 
     g_test_suite_add (suite, TESTCASE (test_supported_mode_filter, NULL));
 
-- 
2.10.2

