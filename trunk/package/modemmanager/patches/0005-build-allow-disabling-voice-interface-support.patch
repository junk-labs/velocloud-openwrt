From 9883bffb3c10e2912d3f98dfb920c766eebf4049 Mon Sep 17 00:00:00 2001
From: Aleksander Morgado <aleksander@aleksander.es>
Date: Fri, 22 Jul 2016 09:27:07 +0200
Subject: [PATCH 05/11] build: allow disabling voice interface support

---
 cli/Makefile.am                              |   9 +-
 cli/mmcli-common.c                           |  10 ++
 cli/mmcli-common.h                           |   5 +
 cli/mmcli.c                                  |  12 +++
 cli/mmcli.h                                  |   2 +
 configure.ac                                 |  15 +++
 docs/reference/api/ModemManager-sections.txt |   1 +
 include/Makefile.am                          |   4 +
 include/ModemManager-enums-voice.h           |  89 ++++++++++++++++++
 include/ModemManager-enums.h                 |  56 -----------
 include/ModemManager-version.h.in            |  15 +++
 include/ModemManager.h                       |   3 +
 introspection/Makefile.am                    |   9 +-
 libmm-glib/Makefile.am                       |  34 +++++--
 libmm-glib/generated/Makefile.am             |  31 ++++--
 libmm-glib/libmm-glib.h                      |  12 ++-
 libmm-glib/mm-common-helpers.c               | 136 ++++++++++++++-------------
 libmm-glib/mm-common-helpers.h               |  16 ++--
 libmm-glib/mm-manager.c                      |   2 +
 libmm-glib/mm-object.c                       |   4 +
 libmm-glib/mm-object.h                       |  11 ++-
 plugins/Makefile.am                          |  10 +-
 plugins/huawei/mm-broadband-modem-huawei.c   |  52 +++++++---
 src/Makefile.am                              |  17 ++--
 src/mm-broadband-modem.c                     |  60 +++++++++++-
 25 files changed, 438 insertions(+), 177 deletions(-)
 create mode 100644 include/ModemManager-enums-voice.h

diff --git a/cli/Makefile.am b/cli/Makefile.am
index b34f99b8..60f3d293 100644
--- a/cli/Makefile.am
+++ b/cli/Makefile.am
@@ -20,13 +20,11 @@ mmcli_SOURCES = \
 	mmcli-modem-3gpp.c \
 	mmcli-modem-cdma.c \
 	mmcli-modem-simple.c \
-	mmcli-modem-voice.c \
 	mmcli-modem-firmware.c \
 	mmcli-modem-signal.c \
 	mmcli-modem-oma.c \
 	mmcli-bearer.c \
 	mmcli-sim.c \
-	mmcli-call.c \
 	$(NULL)
 
 if WITH_INTERFACE_LOCATION
@@ -44,6 +42,13 @@ if WITH_INTERFACE_TIME
 mmcli_SOURCES += mmcli-modem-time.c
 endif
 
+if WITH_INTERFACE_VOICE
+mmcli_SOURCES += \
+	mmcli-modem-voice.c \
+	mmcli-call.c \
+	$(NULL)
+endif
+
 mmcli_LDADD = \
 	$(MMCLI_LIBS) \
 	$(top_builddir)/libmm-glib/libmm-glib.la \
diff --git a/cli/mmcli-common.c b/cli/mmcli-common.c
index 0e2941b9..64b10300 100644
--- a/cli/mmcli-common.c
+++ b/cli/mmcli-common.c
@@ -1117,6 +1117,8 @@ mmcli_get_state_reason_string (MMModemStateChangeReason reason)
     return NULL;
 }
 
+#if MM_INTERFACE_VOICE_SUPPORTED
+
 typedef struct {
     GSimpleAsyncResult *result;
     GCancellable *cancellable;
@@ -1388,6 +1390,8 @@ mmcli_get_call_sync (GDBusConnection *connection,
     return found;
 }
 
+#endif /* MM_INTERFACE_VOICE_SUPPORTED */
+
 /* Common options */
 static gchar *modem_str;
 static gchar *bearer_str;
@@ -1395,7 +1399,9 @@ static gchar *sim_str;
 #if MM_INTERFACE_MESSAGING_SUPPORTED
 static gchar *sms_str;
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
 static gchar *call_str;
+#endif
 
 static GOptionEntry entries[] = {
     { "modem", 'm', 0, G_OPTION_ARG_STRING, &modem_str,
@@ -1416,10 +1422,12 @@ static GOptionEntry entries[] = {
       "[PATH|INDEX]"
     },
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     { "call", 'o', 0, G_OPTION_ARG_STRING, &call_str,
       "Specify Call by path or index. Shows Call information if no action specified.",
       "[PATH|INDEX]"
     },
+#endif
     { NULL }
 };
 
@@ -1465,11 +1473,13 @@ mmcli_get_common_sms_string (void)
 }
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
 const gchar *
 mmcli_get_common_call_string (void)
 {
     return call_str;
 }
+#endif
 
 gchar *
 mmcli_prefix_newlines (const gchar *prefix,
diff --git a/cli/mmcli-common.h b/cli/mmcli-common.h
index 376f6cdd..0d981179 100644
--- a/cli/mmcli-common.h
+++ b/cli/mmcli-common.h
@@ -88,6 +88,8 @@ MMSms *mmcli_get_sms_sync   (GDBusConnection *connection,
 
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
+
 void    mmcli_get_call        (GDBusConnection *connection,
                                const gchar *path_or_index,
                                GCancellable *cancellable,
@@ -101,6 +103,7 @@ MMCall *mmcli_get_call_sync   (GDBusConnection *connection,
                                MMManager **manager,
                                MMObject **object);
 
+#endif
 
 const gchar *mmcli_get_state_reason_string (MMModemStateChangeReason reason);
 
@@ -111,7 +114,9 @@ const gchar  *mmcli_get_common_sim_string (void);
 #if MM_INTERFACE_MESSAGING_SUPPORTED
 const gchar  *mmcli_get_common_sms_string (void);
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
 const gchar  *mmcli_get_common_call_string (void);
+#endif
 
 gchar *mmcli_prefix_newlines (const gchar *prefix,
                               const gchar *str);
diff --git a/cli/mmcli.c b/cli/mmcli.c
index a0cc7fc6..a4973e91 100644
--- a/cli/mmcli.c
+++ b/cli/mmcli.c
@@ -206,8 +206,10 @@ main (gint argc, gchar **argv)
     g_option_context_add_group (context,
                                 mmcli_modem_messaging_get_option_group ());
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     g_option_context_add_group (context,
                                 mmcli_modem_voice_get_option_group ());
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
     g_option_context_add_group (context,
                                 mmcli_modem_time_get_option_group ());
@@ -226,8 +228,10 @@ main (gint argc, gchar **argv)
     g_option_context_add_group (context,
                                 mmcli_sms_get_option_group ());
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     g_option_context_add_group (context,
                                 mmcli_call_get_option_group ());
+#endif
     g_option_context_add_main_entries (context, main_entries, NULL);
     g_option_context_parse (context, &argc, &argv, NULL);
     g_option_context_free (context);
@@ -292,6 +296,7 @@ main (gint argc, gchar **argv)
             mmcli_sms_run_synchronous (connection);
     }
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     /* Call options? */
     else if (mmcli_call_options_enabled ()) {
         if (async_flag)
@@ -299,6 +304,7 @@ main (gint argc, gchar **argv)
         else
             mmcli_call_run_synchronous (connection);
     }
+#endif
     /* Modem 3GPP options? */
     else if (mmcli_modem_3gpp_options_enabled ()) {
         if (async_flag)
@@ -338,6 +344,7 @@ main (gint argc, gchar **argv)
             mmcli_modem_messaging_run_synchronous (connection);
     }
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     /* Voice options? */
     else if (mmcli_modem_voice_options_enabled ()) {
         if (async_flag)
@@ -345,6 +352,7 @@ main (gint argc, gchar **argv)
         else
             mmcli_modem_voice_run_synchronous (connection);
     }
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
     /* Modem Time options? */
     else if (mmcli_modem_time_options_enabled ()) {
@@ -411,8 +419,10 @@ main (gint argc, gchar **argv)
     } else if (mmcli_modem_messaging_options_enabled ()) {
         mmcli_modem_messaging_shutdown ();
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     } else if (mmcli_modem_voice_options_enabled ()) {
         mmcli_modem_voice_shutdown ();
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
     } else if (mmcli_modem_time_options_enabled ()) {
         mmcli_modem_time_shutdown ();
@@ -431,8 +441,10 @@ main (gint argc, gchar **argv)
     }  else if (mmcli_sms_options_enabled ()) {
         mmcli_sms_shutdown ();
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     }  else if (mmcli_call_options_enabled ()) {
         mmcli_call_shutdown ();
+#endif
     } else if (mmcli_modem_options_enabled ()) {
         mmcli_modem_shutdown ();
     }
diff --git a/cli/mmcli.h b/cli/mmcli.h
index eb5435d2..b13dd2d0 100644
--- a/cli/mmcli.h
+++ b/cli/mmcli.h
@@ -89,6 +89,7 @@ void          mmcli_modem_messaging_run_synchronous    (GDBusConnection *connect
 void          mmcli_modem_messaging_shutdown           (void);
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
 /* Voice group */
 GOptionGroup *mmcli_modem_voice_get_option_group   (void);
 gboolean      mmcli_modem_voice_options_enabled    (void);
@@ -96,6 +97,7 @@ void          mmcli_modem_voice_run_asynchronous   (GDBusConnection *connection,
                                                         GCancellable    *cancellable);
 void          mmcli_modem_voice_run_synchronous    (GDBusConnection *connection);
 void          mmcli_modem_voice_shutdown           (void);
+#endif
 
 #if MM_INTERFACE_TIME_SUPPORTED
 /* Time group */
diff --git a/configure.ac b/configure.ac
index 3d373cba..bd2e015b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -403,6 +403,20 @@ else
 fi
 AC_SUBST(MM_INTERFACE_TIME_SUPPORTED)
 
+dnl-----------------------------------------------------------------------------
+dnl Voice interface
+dnl
+
+AC_ARG_WITH(interface-voice, AS_HELP_STRING([--without-interface-voice], [Build without voice interface support]), [], [with_interface_voice=yes])
+AM_CONDITIONAL(WITH_INTERFACE_VOICE, test "x$with_interface_voice" = "xyes")
+if test "x$with_interface_voice" = "xyes"; then
+    MM_INTERFACE_VOICE_SUPPORTED=1
+else
+    with_interface_voice=no
+    MM_INTERFACE_VOICE_SUPPORTED=0
+fi
+AC_SUBST(MM_INTERFACE_VOICE_SUPPORTED)
+
 dnl-----------------------------------------------------------------------------
 dnl Compiler warnings
 dnl
@@ -500,6 +514,7 @@ echo "
       location:                ${with_interface_location}
       messaging:               ${with_interface_messaging}
       time:                    ${with_interface_time}
+      voice:                   ${with_interface_voice}
 
     Miscellaneous:
       gobject introspection:   ${found_introspection}
diff --git a/docs/reference/api/ModemManager-sections.txt b/docs/reference/api/ModemManager-sections.txt
index 54dfe124..963f7838 100644
--- a/docs/reference/api/ModemManager-sections.txt
+++ b/docs/reference/api/ModemManager-sections.txt
@@ -8,6 +8,7 @@ MM_CHECK_VERSION
 MM_INTERFACE_LOCATION_SUPPORTED
 MM_INTERFACE_MESSAGING_SUPPORTED
 MM_INTERFACE_TIME_SUPPORTED
+MM_INTERFACE_VOICE_SUPPORTED
 </SECTION>
 
 <SECTION>
diff --git a/include/Makefile.am b/include/Makefile.am
index efa9ef25..b9614fc9 100644
--- a/include/Makefile.am
+++ b/include/Makefile.am
@@ -20,6 +20,10 @@ if WITH_INTERFACE_MESSAGING
 include_HEADERS += ModemManager-enums-messaging.h
 endif
 
+if WITH_INTERFACE_VOICE
+include_HEADERS += ModemManager-enums-voice.h
+endif
+
 ModemManager-names.h: $(XMLS) $(top_srcdir)/build-aux/header-generator.xsl
 	$(AM_V_GEN) $(XSLTPROC) $(top_srcdir)/build-aux/header-generator.xsl $(top_builddir)/introspection/all.xml > $@
 
diff --git a/include/ModemManager-enums-voice.h b/include/ModemManager-enums-voice.h
new file mode 100644
index 00000000..98bfdb60
--- /dev/null
+++ b/include/ModemManager-enums-voice.h
@@ -0,0 +1,89 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details:
+ *
+ * Copyright (C) 2011 Red Hat, Inc.
+ * Copyright (C) 2011 Google, Inc.
+ * Copyright (C) 2016 Aleksander Morgado <aleksander@aleksander.es>
+ */
+
+#ifndef _MODEMMANAGER_ENUMS_VOICE_H_
+#define _MODEMMANAGER_ENUMS_VOICE_H_
+
+#if !defined (__MODEM_MANAGER_H_INSIDE__)
+#error "Only <ModemManager.h> can be included directly."
+#endif
+
+/**
+ * SECTION:mm-enums-voice
+ * @short_description: Common enumerations and types in the API.
+ *
+ * This section defines enumerations and types that are used in the
+ * ModemManager Voice interface.
+ **/
+
+/**
+ * MMCallState:
+ * @MM_CALL_STATE_UNKNOWN: default state for a new outgoing call.
+ * @MM_CALL_STATE_DIALING: outgoing call started. Wait for free channel.
+ * @MM_CALL_STATE_RINGING_IN: outgoing call attached to GSM network, waiting for an answer.
+ * @MM_CALL_STATE_RINGING_OUT: incoming call is waiting for an answer.
+ * @MM_CALL_STATE_ACTIVE: call is active between two peers.
+ * @MM_CALL_STATE_HELD: held call (by +CHLD AT command).
+ * @MM_CALL_STATE_WAITING: waiting call (by +CCWA AT command).
+ * @MM_CALL_STATE_TERMINATED: call is terminated.
+ *
+ * State of Call
+ */
+typedef enum { /*< underscore_name=mm_call_state >*/
+    MM_CALL_STATE_UNKNOWN       = 0,
+    MM_CALL_STATE_DIALING       = 1,
+    MM_CALL_STATE_RINGING_OUT   = 2,
+    MM_CALL_STATE_RINGING_IN    = 3,
+    MM_CALL_STATE_ACTIVE        = 4,
+    MM_CALL_STATE_HELD          = 5,
+    MM_CALL_STATE_WAITING       = 6,
+    MM_CALL_STATE_TERMINATED    = 7
+} MMCallState;
+
+/**
+ * MMCallStateReason:
+ * @MM_CALL_STATE_REASON_UNKNOWN: Default value for a new outgoing call.
+ * @MM_CALL_STATE_REASON_OUTGOING_STARTED: Outgoing call is started.
+ * @MM_CALL_STATE_REASON_INCOMING_NEW: Received a new incoming call.
+ * @MM_CALL_STATE_REASON_ACCEPTED: Dialing or Ringing call is accepted.
+ * @MM_CALL_STATE_REASON_TERMINATED: Call is correctly terminated.
+ * @MM_CALL_STATE_REASON_REFUSED_OR_BUSY: Remote peer is busy or refused call
+ * @MM_CALL_STATE_REASON_ERROR: Wrong number or generic network error.
+ */
+typedef enum { /*< underscore_name=mm_call_state_reason >*/
+    MM_CALL_STATE_REASON_UNKNOWN            = 0,
+    MM_CALL_STATE_REASON_OUTGOING_STARTED   = 1,
+    MM_CALL_STATE_REASON_INCOMING_NEW       = 2,
+    MM_CALL_STATE_REASON_ACCEPTED           = 3,
+    MM_CALL_STATE_REASON_TERMINATED         = 4,
+    MM_CALL_STATE_REASON_REFUSED_OR_BUSY    = 5,
+    MM_CALL_STATE_REASON_ERROR              = 6
+} MMCallStateReason;
+
+/**
+ * MMCallDirection:
+ * @MM_CALL_DIRECTION_UNKNOWN: unknown.
+ * @MM_CALL_DIRECTION_INCOMING: call from network.
+ * @MM_CALL_DIRECTION_OUTGOING: call to network.
+ */
+typedef enum { /*< underscore_name=mm_call_direction >*/
+    MM_CALL_DIRECTION_UNKNOWN   = 0,
+    MM_CALL_DIRECTION_INCOMING  = 1,
+    MM_CALL_DIRECTION_OUTGOING  = 2
+} MMCallDirection;
+
+#endif /*  _MODEMMANAGER_ENUMS_VOICE_H_ */
diff --git a/include/ModemManager-enums.h b/include/ModemManager-enums.h
index 83b892fb..7c9f53f5 100644
--- a/include/ModemManager-enums.h
+++ b/include/ModemManager-enums.h
@@ -846,60 +846,4 @@ typedef enum { /*< underscore_name=mm_oma_session_state_failed_reason >*/
     MM_OMA_SESSION_STATE_FAILED_REASON_SESSION_CANCELLED     = 5
 } MMOmaSessionStateFailedReason;
 
-/**
- * MMCallState:
- * @MM_CALL_STATE_UNKNOWN: default state for a new outgoing call.
- * @MM_CALL_STATE_DIALING: outgoing call started. Wait for free channel.
- * @MM_CALL_STATE_RINGING_IN: outgoing call attached to GSM network, waiting for an answer.
- * @MM_CALL_STATE_RINGING_OUT: incoming call is waiting for an answer.
- * @MM_CALL_STATE_ACTIVE: call is active between two peers.
- * @MM_CALL_STATE_HELD: held call (by +CHLD AT command).
- * @MM_CALL_STATE_WAITING: waiting call (by +CCWA AT command).
- * @MM_CALL_STATE_TERMINATED: call is terminated.
- *
- * State of Call
- */
-typedef enum { /*< underscore_name=mm_call_state >*/
-    MM_CALL_STATE_UNKNOWN       = 0,
-    MM_CALL_STATE_DIALING       = 1,
-    MM_CALL_STATE_RINGING_OUT   = 2,
-    MM_CALL_STATE_RINGING_IN    = 3,
-    MM_CALL_STATE_ACTIVE        = 4,
-    MM_CALL_STATE_HELD          = 5,
-    MM_CALL_STATE_WAITING       = 6,
-    MM_CALL_STATE_TERMINATED    = 7
-} MMCallState;
-
-/**
- * MMCallStateReason:
- * @MM_CALL_STATE_REASON_UNKNOWN: Default value for a new outgoing call.
- * @MM_CALL_STATE_REASON_OUTGOING_STARTED: Outgoing call is started.
- * @MM_CALL_STATE_REASON_INCOMING_NEW: Received a new incoming call.
- * @MM_CALL_STATE_REASON_ACCEPTED: Dialing or Ringing call is accepted.
- * @MM_CALL_STATE_REASON_TERMINATED: Call is correctly terminated.
- * @MM_CALL_STATE_REASON_REFUSED_OR_BUSY: Remote peer is busy or refused call
- * @MM_CALL_STATE_REASON_ERROR: Wrong number or generic network error.
- */
-typedef enum { /*< underscore_name=mm_call_state_reason >*/
-    MM_CALL_STATE_REASON_UNKNOWN            = 0,
-    MM_CALL_STATE_REASON_OUTGOING_STARTED   = 1,
-    MM_CALL_STATE_REASON_INCOMING_NEW       = 2,
-    MM_CALL_STATE_REASON_ACCEPTED           = 3,
-    MM_CALL_STATE_REASON_TERMINATED         = 4,
-    MM_CALL_STATE_REASON_REFUSED_OR_BUSY    = 5,
-    MM_CALL_STATE_REASON_ERROR              = 6
-} MMCallStateReason;
-
-/**
- * MMCallDirection:
- * @MM_CALL_DIRECTION_UNKNOWN: unknown.
- * @MM_CALL_DIRECTION_INCOMING: call from network.
- * @MM_CALL_DIRECTION_OUTGOING: call to network.
- */
-typedef enum { /*< underscore_name=mm_call_direction >*/
-    MM_CALL_DIRECTION_UNKNOWN   = 0,
-    MM_CALL_DIRECTION_INCOMING  = 1,
-    MM_CALL_DIRECTION_OUTGOING  = 2
-} MMCallDirection;
-
 #endif /*  _MODEMMANAGER_ENUMS_H_ */
diff --git a/include/ModemManager-version.h.in b/include/ModemManager-version.h.in
index b0944395..19abfe83 100644
--- a/include/ModemManager-version.h.in
+++ b/include/ModemManager-version.h.in
@@ -112,4 +112,19 @@
  */
 #define MM_INTERFACE_TIME_SUPPORTED @MM_INTERFACE_TIME_SUPPORTED@
 
+/**
+ * MM_INTERFACE_VOICE_SUPPORTED:
+ *
+ * Symbol to expose whether Voice interface is supported. The symbol is always
+ * defined and set to either or 1 or 0.
+ *
+ * E.g.:
+ * |[
+ *  #if MM_INTERFACE_VOICE_SUPPORTED
+ *      // do something
+ *  #endif
+ * ]|
+ */
+#define MM_INTERFACE_VOICE_SUPPORTED @MM_INTERFACE_VOICE_SUPPORTED@
+
 #endif /* _MM_VERSION_H_ */
diff --git a/include/ModemManager.h b/include/ModemManager.h
index d231c39f..7b8e97f4 100644
--- a/include/ModemManager.h
+++ b/include/ModemManager.h
@@ -43,6 +43,9 @@
 #if MM_INTERFACE_MESSAGING_SUPPORTED
 # include <ModemManager-enums-messaging.h>
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
+# include <ModemManager-enums-voice.h>
+#endif
 
 /* Public header with errors */
 #include <ModemManager-errors.h>
diff --git a/introspection/Makefile.am b/introspection/Makefile.am
index 719ee3ac..54b5d0ae 100644
--- a/introspection/Makefile.am
+++ b/introspection/Makefile.am
@@ -16,8 +16,6 @@ xml_DATA = \
 	org.freedesktop.ModemManager1.Modem.Firmware.xml \
 	org.freedesktop.ModemManager1.Modem.Oma.xml \
 	org.freedesktop.ModemManager1.Modem.Signal.xml \
-	org.freedesktop.ModemManager1.Modem.Voice.xml \
-	org.freedesktop.ModemManager1.Call.xml \
 	$(NULL)
 
 if WITH_INTERFACE_LOCATION
@@ -32,6 +30,13 @@ if WITH_INTERFACE_TIME
 xml_DATA += org.freedesktop.ModemManager1.Modem.Time.xml
 endif
 
+if WITH_INTERFACE_VOICE
+xml_DATA += \
+	org.freedesktop.ModemManager1.Modem.Voice.xml \
+	org.freedesktop.ModemManager1.Call.xml \
+	$(NULL)
+endif
+
 all.xml: $(xml_DATA) Makefile
 	$(AM_V_GEN)	\
 		rm -f $@; \
diff --git a/libmm-glib/Makefile.am b/libmm-glib/Makefile.am
index 436feaf2..0bdf3d74 100644
--- a/libmm-glib/Makefile.am
+++ b/libmm-glib/Makefile.am
@@ -32,10 +32,6 @@ libmm_glib_la_SOURCES = \
 	mm-modem-oma.c \
 	mm-sim.h \
 	mm-sim.c \
-	mm-modem-voice.h \
-	mm-modem-voice.c \
-	mm-call.h \
-	mm-call.c \
 	mm-bearer.h \
 	mm-bearer.c \
 	mm-common-helpers.h \
@@ -46,8 +42,6 @@ libmm_glib_la_SOURCES = \
 	mm-simple-connect-properties.c \
 	mm-bearer-properties.h \
 	mm-bearer-properties.c \
-	mm-call-properties.h \
-	mm-call-properties.c \
 	mm-bearer-ip-config.h \
 	mm-bearer-ip-config.c \
 	mm-bearer-stats.h \
@@ -100,6 +94,17 @@ libmm_glib_la_SOURCES += \
 	$(NULL)
 endif
 
+if WITH_INTERFACE_VOICE
+libmm_glib_la_SOURCES += \
+	mm-call.h \
+	mm-call.c \
+	mm-modem-voice.h \
+	mm-modem-voice.c \
+	mm-call-properties.h \
+	mm-call-properties.c \
+	$(NULL)
+endif
+
 libmm_glib_la_CPPFLAGS = \
 	-I$(srcdir) \
 	-I$(top_srcdir) \
@@ -142,13 +147,10 @@ include_HEADERS = \
 	mm-modem-oma.h \
 	mm-modem-simple.h \
 	mm-sim.h \
-	mm-modem-voice.h \
-	mm-call.h \
 	mm-bearer.h \
 	mm-simple-status.h \
 	mm-simple-connect-properties.h \
 	mm-bearer-properties.h \
-	mm-call-properties.h \
 	mm-bearer-ip-config.h \
 	mm-bearer-stats.h \
 	mm-unlock-retries.h \
@@ -184,6 +186,14 @@ include_HEADERS += \
 	$(NULL)
 endif
 
+if WITH_INTERFACE_VOICE
+include_HEADERS += \
+	mm-modem-voice.h \
+	mm-call.h \
+	mm-call-properties.h \
+	$(NULL)
+endif
+
 CLEANFILES =
 
 # Introspection
@@ -228,6 +238,12 @@ GENERATED_C += mm-gdbus-sms.c
 PUBLIC_H    += ModemManager-enums-messaging.h
 endif
 
+if WITH_INTERFACE_VOICE
+GENERATED_H += mm-gdbus-call.h
+GENERATED_C += mm-gdbus-call.c
+PUBLIC_H    += ModemManager-enums-voice.h
+endif
+
 INTROSPECTION_GIRS = ModemManager-1.0.gir
 INTROSPECTION_SCANNER_ARGS = --warn-all
 INTROSPECTION_COMPILER_ARGS =
diff --git a/libmm-glib/generated/Makefile.am b/libmm-glib/generated/Makefile.am
index 44310ddd..227d3c1c 100644
--- a/libmm-glib/generated/Makefile.am
+++ b/libmm-glib/generated/Makefile.am
@@ -11,7 +11,6 @@ GENERATED_H = \
 	mm-errors-types.h \
 	mm-gdbus-manager.h \
 	mm-gdbus-sim.h \
-	mm-gdbus-call.h \
 	mm-gdbus-bearer.h \
 	mm-gdbus-modem.h \
 	$(NULL)
@@ -22,7 +21,6 @@ GENERATED_C = \
 	mm-errors-quarks.c \
 	mm-gdbus-manager.c \
 	mm-gdbus-sim.c \
-	mm-gdbus-call.c \
 	mm-gdbus-bearer.c \
 	mm-gdbus-modem.c   \
 	$(NULL)
@@ -30,10 +28,8 @@ GENERATED_C = \
 GENERATED_DOC = \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Sim.xml \
-	mm-gdbus-doc-org.freedesktop.ModemManager1.Call.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Bearer.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.xml \
-	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Voice.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Firmware.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Oma.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.ModemCdma.xml \
@@ -60,6 +56,15 @@ if WITH_INTERFACE_TIME
 GENERATED_DOC += mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Time.xml
 endif
 
+if WITH_INTERFACE_VOICE
+GENERATED_H   += mm-gdbus-call.h
+GENERATED_C   += mm-gdbus-call.c
+GENERATED_DOC += \
+	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Voice.xml \
+	mm-gdbus-doc-org.freedesktop.ModemManager1.Call.xml \
+	$(NULL)
+endif
+
 BUILT_SOURCES = $(GENERATED_H) $(GENERATED_C) $(GENERATED_DOC)
 
 # Enum types
@@ -75,6 +80,10 @@ if WITH_INTERFACE_MESSAGING
 ENUM_FILES += $(top_srcdir)/include/ModemManager-enums-messaging.h
 endif
 
+if WITH_INTERFACE_VOICE
+ENUM_FILES += $(top_srcdir)/include/ModemManager-enums-voice.h
+endif
+
 mm-enums-types.h: Makefile.am $(ENUM_FILES) $(top_srcdir)/build-aux/mm-enums-template.h
 	$(AM_V_GEN) $(GLIB_MKENUMS) \
 		--fhead "#include <ModemManager.h>\n#ifndef __MM_ENUMS_TYPES_H__\n#define __MM_ENUMS_TYPES_H__\n" \
@@ -133,7 +142,6 @@ mm_gdbus_modem_generated = \
 	mm-gdbus-modem.h \
 	mm-gdbus-modem.c \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.xml \
-	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Voice.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Firmware.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Oma.xml \
 	mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.ModemCdma.xml \
@@ -155,9 +163,12 @@ if WITH_INTERFACE_TIME
 mm_gdbus_modem_generated += mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Time.xml
 endif
 
+if WITH_INTERFACE_VOICE
+mm_gdbus_modem_generated += mm-gdbus-doc-org.freedesktop.ModemManager1.Modem.Voice.xml
+endif
+
 mm_gdbus_modem_deps = \
 	$(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.xml \
-	$(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.Voice.xml \
 	$(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.Firmware.xml \
 	$(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.Oma.xml \
 	$(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.ModemCdma.xml \
@@ -179,6 +190,10 @@ if WITH_INTERFACE_TIME
 mm_gdbus_modem_deps += $(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.Time.xml
 endif
 
+if WITH_INTERFACE_VOICE
+mm_gdbus_modem_deps += $(top_srcdir)/introspection/org.freedesktop.ModemManager1.Modem.Voice.xml
+endif
+
 mm-gdbus-modem.c: $(mm_gdbus_modem_deps)
 	$(AM_V_GEN) $(GDBUS_CODEGEN) \
 		--interface-prefix org.freedesktop.ModemManager1. \
@@ -259,6 +274,8 @@ $(filter-out mm-gdbus-sms.c, $(mm_gdbus_sms_generated)): $(mm_gdbus_sms_deps) mm
 
 endif
 
+if WITH_INTERFACE_VOICE
+
 # Call interface
 mm_gdbus_call_generated = \
 	mm-gdbus-call.h \
@@ -279,6 +296,8 @@ mm-gdbus-call.c: $(mm_gdbus_call_deps)
 $(filter-out mm-gdbus-call.c, $(mm_gdbus_call_generated)): $(mm_gdbus_call_deps) mm-gdbus-call.c
 	@: # nothing to do, generated as a side-effect of the .c
 
+endif
+
 nodist_libmm_generated_la_SOURCES = $(GENERATED_H) $(GENERATED_C)
 
 libmm_generated_la_CPPFLAGS = \
diff --git a/libmm-glib/libmm-glib.h b/libmm-glib/libmm-glib.h
index 6695d897..2330ee15 100644
--- a/libmm-glib/libmm-glib.h
+++ b/libmm-glib/libmm-glib.h
@@ -45,7 +45,9 @@
 # if MM_INTERFACE_MESSAGING_SUPPORTED
 #  include <mm-modem-messaging.h>
 # endif
-# include <mm-modem-voice.h>
+# if MM_INTERFACE_VOICE_SUPPORTED
+#  include <mm-modem-voice.h>
+# endif
 # if MM_INTERFACE_TIME_SUPPORTED
 #  include <mm-modem-time.h>
 # endif
@@ -67,7 +69,9 @@
 #if MM_INTERFACE_MESSAGING_SUPPORTED
 # include <mm-sms-properties.h>
 #endif
-#include <mm-call-properties.h>
+#if MM_INTERFACE_VOICE_SUPPORTED
+# include <mm-call-properties.h>
+#endif
 #include <mm-bearer-properties.h>
 #include <mm-bearer-ip-config.h>
 #if MM_INTERFACE_LOCATION_SUPPORTED
@@ -96,6 +100,8 @@
 #if MM_INTERFACE_MESSAGING_SUPPORTED
 # include <mm-gdbus-sms.h>
 #endif
-#include <mm-gdbus-call.h>
+#if MM_INTERFACE_VOICE_SUPPORTED
+# include <mm-gdbus-call.h>
+#endif
 
 #endif /* _LIBMM_GLIB_H_ */
diff --git a/libmm-glib/mm-common-helpers.c b/libmm-glib/mm-common-helpers.c
index 18bd63bc..5f77a4c1 100644
--- a/libmm-glib/mm-common-helpers.c
+++ b/libmm-glib/mm-common-helpers.c
@@ -864,72 +864,6 @@ mm_common_get_allowed_auth_from_string (const gchar *str,
     return allowed_auth;
 }
 
-MMCallDirection
-mm_common_get_call_direction_from_string (const gchar *str,
-                                          GError **error)
-{
-    GEnumClass *enum_class;
-    guint i;
-
-    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_CALL_DIRECTION));
-
-    for (i = 0; enum_class->values[i].value_nick; i++) {
-        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
-            return enum_class->values[i].value;
-    }
-
-    g_set_error (error,
-                 MM_CORE_ERROR,
-                 MM_CORE_ERROR_INVALID_ARGS,
-                 "Couldn't match '%s' with a valid MMCallDirection value",
-                 str);
-    return MM_CALL_DIRECTION_UNKNOWN;
-}
-
-MMCallState
-mm_common_get_call_state_from_string (const gchar *str,
-                                      GError **error)
-{
-    GEnumClass *enum_class;
-    guint i;
-
-    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_CALL_STATE));
-
-    for (i = 0; enum_class->values[i].value_nick; i++) {
-        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
-            return enum_class->values[i].value;
-    }
-
-    g_set_error (error,
-                 MM_CORE_ERROR,
-                 MM_CORE_ERROR_INVALID_ARGS,
-                 "Couldn't match '%s' with a valid MMCallState value",
-                 str);
-    return MM_CALL_STATE_UNKNOWN;
-}
-
-MMCallStateReason
-mm_common_get_call_state_reason_from_string (const gchar *str,
-                                             GError **error)
-{
-    GEnumClass *enum_class;
-    guint i;
-
-    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_CALL_STATE_REASON));
-
-    for (i = 0; enum_class->values[i].value_nick; i++) {
-        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
-            return enum_class->values[i].value;
-    }
-
-    g_set_error (error,
-                 MM_CORE_ERROR,
-                 MM_CORE_ERROR_INVALID_ARGS,
-                 "Couldn't match '%s' with a valid MMCallStateReason value",
-                 str);
-    return MM_CALL_STATE_REASON_UNKNOWN;
-}
-
 MMOmaFeature
 mm_common_get_oma_features_from_string (const gchar *str,
                                         GError **error)
@@ -1698,3 +1632,73 @@ mm_sms_delivery_state_get_string_extended (guint delivery_state)
 }
 
 #endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
+
+#if MM_INTERFACE_VOICE_SUPPORTED
+
+MMCallDirection
+mm_common_get_call_direction_from_string (const gchar *str,
+                                          GError **error)
+{
+    GEnumClass *enum_class;
+    guint i;
+
+    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_CALL_DIRECTION));
+
+    for (i = 0; enum_class->values[i].value_nick; i++) {
+        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
+            return enum_class->values[i].value;
+    }
+
+    g_set_error (error,
+                 MM_CORE_ERROR,
+                 MM_CORE_ERROR_INVALID_ARGS,
+                 "Couldn't match '%s' with a valid MMCallDirection value",
+                 str);
+    return MM_CALL_DIRECTION_UNKNOWN;
+}
+
+MMCallState
+mm_common_get_call_state_from_string (const gchar *str,
+                                      GError **error)
+{
+    GEnumClass *enum_class;
+    guint i;
+
+    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_CALL_STATE));
+
+    for (i = 0; enum_class->values[i].value_nick; i++) {
+        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
+            return enum_class->values[i].value;
+    }
+
+    g_set_error (error,
+                 MM_CORE_ERROR,
+                 MM_CORE_ERROR_INVALID_ARGS,
+                 "Couldn't match '%s' with a valid MMCallState value",
+                 str);
+    return MM_CALL_STATE_UNKNOWN;
+}
+
+MMCallStateReason
+mm_common_get_call_state_reason_from_string (const gchar *str,
+                                             GError **error)
+{
+    GEnumClass *enum_class;
+    guint i;
+
+    enum_class = G_ENUM_CLASS (g_type_class_ref (MM_TYPE_CALL_STATE_REASON));
+
+    for (i = 0; enum_class->values[i].value_nick; i++) {
+        if (!g_ascii_strcasecmp (str, enum_class->values[i].value_nick))
+            return enum_class->values[i].value;
+    }
+
+    g_set_error (error,
+                 MM_CORE_ERROR,
+                 MM_CORE_ERROR_INVALID_ARGS,
+                 "Couldn't match '%s' with a valid MMCallStateReason value",
+                 str);
+    return MM_CALL_STATE_REASON_UNKNOWN;
+}
+
+#endif /* MM_INTERFACE_VOICE_SUPPORTED */
diff --git a/libmm-glib/mm-common-helpers.h b/libmm-glib/mm-common-helpers.h
index 33bb1cd8..e9d49ef9 100644
--- a/libmm-glib/mm-common-helpers.h
+++ b/libmm-glib/mm-common-helpers.h
@@ -55,13 +55,6 @@ MMBearerIpFamily      mm_common_get_ip_type_from_string      (const gchar *str,
 MMBearerAllowedAuth   mm_common_get_allowed_auth_from_string (const gchar *str,
                                                               GError **error);
 
-MMCallDirection     mm_common_get_call_direction_from_string    (const gchar *str,
-                                                                 GError **error);
-MMCallState         mm_common_get_call_state_from_string        (const gchar *str,
-                                                                 GError **error);
-MMCallStateReason   mm_common_get_call_state_reason_from_string (const gchar *str,
-                                                                 GError **error);
-
 MMOmaFeature          mm_common_get_oma_features_from_string (const gchar *str,
                                                               GError **error);
 MMOmaSessionType      mm_common_get_oma_session_type_from_string (const gchar *str,
@@ -167,4 +160,13 @@ GVariant                 *mm_common_sms_storages_garray_to_variant            (G
 const gchar              *mm_sms_delivery_state_get_string_extended           (guint delivery_state);
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
+MMCallDirection     mm_common_get_call_direction_from_string    (const gchar *str,
+                                                                 GError **error);
+MMCallState         mm_common_get_call_state_from_string        (const gchar *str,
+                                                                 GError **error);
+MMCallStateReason   mm_common_get_call_state_reason_from_string (const gchar *str,
+                                                                 GError **error);
+#endif
+
 #endif /* MM_COMMON_HELPERS_H */
diff --git a/libmm-glib/mm-manager.c b/libmm-glib/mm-manager.c
index f5a3d4e8..aaf15c43 100644
--- a/libmm-glib/mm-manager.c
+++ b/libmm-glib/mm-manager.c
@@ -70,7 +70,9 @@ get_proxy_type (GDBusObjectManagerClient *manager,
 #if MM_INTERFACE_MESSAGING_SUPPORTED
         g_hash_table_insert (lookup_hash, "org.freedesktop.ModemManager1.Modem.Messaging",      GSIZE_TO_POINTER (MM_TYPE_MODEM_MESSAGING));
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
         g_hash_table_insert (lookup_hash, "org.freedesktop.ModemManager1.Modem.Voice",          GSIZE_TO_POINTER (MM_TYPE_MODEM_VOICE));
+#endif
 #if MM_INTERFACE_LOCATION_SUPPORTED
         g_hash_table_insert (lookup_hash, "org.freedesktop.ModemManager1.Modem.Location",       GSIZE_TO_POINTER (MM_TYPE_MODEM_LOCATION));
 #endif
diff --git a/libmm-glib/mm-object.c b/libmm-glib/mm-object.c
index 6364114c..7943d1cd 100644
--- a/libmm-glib/mm-object.c
+++ b/libmm-glib/mm-object.c
@@ -345,6 +345,8 @@ mm_object_peek_modem_messaging (MMObject *self)
 
 #endif /*  MM_INTERFACE_MESSAGING_SUPPORTED */
 
+#if MM_INTERFACE_VOICE_SUPPORTED
+
 /*****************************************************************************/
 
 /**
@@ -381,6 +383,8 @@ mm_object_peek_modem_voice (MMObject *self)
     return (MMModemVoice *)mm_gdbus_object_peek_modem_voice (MM_GDBUS_OBJECT (self));
 }
 
+#endif /*  MM_INTERFACE_VOICE_SUPPORTED */
+
 #if MM_INTERFACE_TIME_SUPPORTED
 
 /*****************************************************************************/
diff --git a/libmm-glib/mm-object.h b/libmm-glib/mm-object.h
index 46e2a37b..14d299e5 100644
--- a/libmm-glib/mm-object.h
+++ b/libmm-glib/mm-object.h
@@ -45,7 +45,9 @@
 #if MM_INTERFACE_TIME_SUPPORTED
 # include "mm-modem-time.h"
 #endif
-#include "mm-modem-voice.h"
+#if MM_INTERFACE_VOICE_SUPPORTED
+# include "mm-modem-voice.h"
+#endif
 #include "mm-modem-firmware.h"
 #include "mm-modem-signal.h"
 #include "mm-modem-oma.h"
@@ -89,7 +91,6 @@ MMModem3gpp      *mm_object_get_modem_3gpp       (MMObject *self);
 MMModem3gppUssd  *mm_object_get_modem_3gpp_ussd  (MMObject *self);
 MMModemCdma      *mm_object_get_modem_cdma       (MMObject *self);
 MMModemSimple    *mm_object_get_modem_simple     (MMObject *self);
-MMModemVoice     *mm_object_get_modem_voice      (MMObject *self);
 MMModemFirmware  *mm_object_get_modem_firmware   (MMObject *self);
 MMModemSignal    *mm_object_get_modem_signal     (MMObject *self);
 MMModemOma       *mm_object_get_modem_oma        (MMObject *self);
@@ -99,7 +100,6 @@ MMModem3gpp      *mm_object_peek_modem_3gpp      (MMObject *self);
 MMModem3gppUssd  *mm_object_peek_modem_3gpp_ussd (MMObject *self);
 MMModemCdma      *mm_object_peek_modem_cdma      (MMObject *self);
 MMModemSimple    *mm_object_peek_modem_simple    (MMObject *self);
-MMModemVoice     *mm_object_peek_modem_voice     (MMObject *self);
 MMModemFirmware  *mm_object_peek_modem_firmware  (MMObject *self);
 MMModemSignal    *mm_object_peek_modem_signal    (MMObject *self);
 MMModemOma       *mm_object_peek_modem_oma       (MMObject *self);
@@ -119,6 +119,11 @@ MMModemTime      *mm_object_get_modem_time       (MMObject *self);
 MMModemTime      *mm_object_peek_modem_time      (MMObject *self);
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
+MMModemVoice     *mm_object_get_modem_voice      (MMObject *self);
+MMModemVoice     *mm_object_peek_modem_voice     (MMObject *self);
+#endif
+
 G_END_DECLS
 
 #endif /* _MM_OBJECT_H_ */
diff --git a/plugins/Makefile.am b/plugins/Makefile.am
index 98a95f53..3a5f66c3 100644
--- a/plugins/Makefile.am
+++ b/plugins/Makefile.am
@@ -284,13 +284,19 @@ libmm_plugin_huawei_la_SOURCES = \
 	huawei/mm-plugin-huawei.h \
 	huawei/mm-sim-huawei.c \
 	huawei/mm-sim-huawei.h \
-	huawei/mm-call-huawei.c \
-	huawei/mm-call-huawei.h \
 	huawei/mm-broadband-modem-huawei.c \
 	huawei/mm-broadband-modem-huawei.h \
 	huawei/mm-broadband-bearer-huawei.c \
 	huawei/mm-broadband-bearer-huawei.h \
 	$(NULL)
+
+if WITH_INTERFACE_VOICE
+libmm_plugin_huawei_la_SOURCES += \
+	huawei/mm-call-huawei.c \
+	huawei/mm-call-huawei.h \
+	$(NULL)
+endif
+
 libmm_plugin_huawei_la_CPPFLAGS = $(PLUGIN_COMMON_COMPILER_FLAGS)
 libmm_plugin_huawei_la_LDFLAGS  = $(PLUGIN_COMMON_LINKER_FLAGS)
 libmm_plugin_huawei_la_LIBADD   = $(builddir)/libhelpers-huawei.la
diff --git a/plugins/huawei/mm-broadband-modem-huawei.c b/plugins/huawei/mm-broadband-modem-huawei.c
index 0f133650..1cad5f4a 100644
--- a/plugins/huawei/mm-broadband-modem-huawei.c
+++ b/plugins/huawei/mm-broadband-modem-huawei.c
@@ -39,33 +39,36 @@
 #include "mm-iface-modem.h"
 #include "mm-iface-modem-3gpp.h"
 #include "mm-iface-modem-3gpp-ussd.h"
-#if MM_INTERFACE_LOCATION_SUPPORTED
-# include "mm-iface-modem-location.h"
-#endif
-#if MM_INTERFACE_TIME_SUPPORTED
-# include "mm-iface-modem-time.h"
-#endif
 #include "mm-iface-modem-cdma.h"
 #include "mm-iface-modem-signal.h"
-#include "mm-iface-modem-voice.h"
 #include "mm-broadband-modem-huawei.h"
 #include "mm-broadband-bearer-huawei.h"
 #include "mm-broadband-bearer.h"
 #include "mm-bearer-list.h"
 #include "mm-sim-huawei.h"
-#include "mm-call-huawei.h"
+
+#if MM_INTERFACE_LOCATION_SUPPORTED
+# include "mm-iface-modem-location.h"
+#endif
+
+#if MM_INTERFACE_TIME_SUPPORTED
+# include "mm-iface-modem-time.h"
+#endif
+
+#if MM_INTERFACE_VOICE_SUPPORTED
+# include "mm-iface-modem-voice.h"
+# include "mm-call-huawei.h"
+#endif
 
 static void iface_modem_init (MMIfaceModem *iface);
 static void iface_modem_3gpp_init (MMIfaceModem3gpp *iface);
 static void iface_modem_3gpp_ussd_init (MMIfaceModem3gppUssd *iface);
 static void iface_modem_cdma_init (MMIfaceModemCdma *iface);
-static void iface_modem_voice_init (MMIfaceModemVoice *iface);
 static void iface_modem_signal_init (MMIfaceModemSignal *iface);
 
 static MMIfaceModem *iface_modem_parent;
 static MMIfaceModem3gpp *iface_modem_3gpp_parent;
 static MMIfaceModemCdma *iface_modem_cdma_parent;
-static MMIfaceModemVoice *iface_modem_voice_parent;
 
 #if MM_INTERFACE_LOCATION_SUPPORTED
 static void iface_modem_location_init (MMIfaceModemLocation *iface);
@@ -76,6 +79,11 @@ static MMIfaceModemLocation *iface_modem_location_parent;
 static void iface_modem_time_init (MMIfaceModemTime *iface);
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
+static void iface_modem_voice_init (MMIfaceModemVoice *iface);
+static MMIfaceModemVoice *iface_modem_voice_parent;
+#endif
+
 G_DEFINE_TYPE_EXTENDED (MMBroadbandModemHuawei, mm_broadband_modem_huawei, MM_TYPE_BROADBAND_MODEM, 0,
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM, iface_modem_init)
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_3GPP, iface_modem_3gpp_init)
@@ -87,8 +95,10 @@ G_DEFINE_TYPE_EXTENDED (MMBroadbandModemHuawei, mm_broadband_modem_huawei, MM_TY
 #if MM_INTERFACE_TIME_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_TIME, iface_modem_time_init)
 #endif
-                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_SIGNAL, iface_modem_signal_init)
+#if MM_INTERFACE_VOICE_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_VOICE, iface_modem_voice_init)
+#endif
+                        G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_SIGNAL, iface_modem_signal_init)
                         )
 
 typedef enum {
@@ -118,6 +128,7 @@ struct _MMBroadbandModemHuaweiPrivate {
     GRegex *dsflowrpt_regex;
     GRegex *ndisstat_regex;
 
+#if MM_INTERFACE_VOICE_SUPPORTED
     /* Regex for voice call related notifications */
     GRegex *orig_regex;
     GRegex *conf_regex;
@@ -126,6 +137,7 @@ struct _MMBroadbandModemHuaweiPrivate {
     GRegex *ddtmf_regex;
     GRegex *cschannelinfo_regex;
     GRegex *eons_regex;
+#endif
 
     /* Regex to ignore */
     GRegex *boot_regex;
@@ -2877,6 +2889,8 @@ get_detailed_registration_state (MMIfaceModemCdma *self,
              task);
 }
 
+#if MM_INTERFACE_VOICE_SUPPORTED
+
 /*****************************************************************************/
 /* Setup/Cleanup unsolicited events (Voice interface) */
 
@@ -3246,6 +3260,8 @@ create_call (MMIfaceModemVoice *self)
     return mm_call_huawei_new (MM_BASE_MODEM (self));
 }
 
+#endif /* MM_INTERFACE_VOICE_SUPPORTED */
+
 #if MM_INTERFACE_TIME_SUPPORTED
 
 /*****************************************************************************/
@@ -4214,7 +4230,10 @@ setup_ports (MMBroadbandModem *self)
     /* Now reset the unsolicited messages we'll handle when enabled */
     set_3gpp_unsolicited_events_handlers (MM_BROADBAND_MODEM_HUAWEI (self), FALSE);
     set_cdma_unsolicited_events_handlers (MM_BROADBAND_MODEM_HUAWEI (self), FALSE);
-    set_voice_unsolicited_events_handlers(MM_BROADBAND_MODEM_HUAWEI (self), FALSE);
+
+#if MM_INTERFACE_VOICE_SUPPORTED
+    set_voice_unsolicited_events_handlers (MM_BROADBAND_MODEM_HUAWEI (self), FALSE);
+#endif
 
 #if MM_INTERFACE_LOCATION_SUPPORTED
     {
@@ -4314,6 +4333,7 @@ mm_broadband_modem_huawei_init (MMBroadbandModemHuawei *self)
     self->priv->ltersrp_regex = g_regex_new ("\\r\\n\\^LTERSRP:.+\\r\\n",
                                              G_REGEX_RAW | G_REGEX_OPTIMIZE, 0, NULL);
 
+#if MM_INTERFACE_VOICE_SUPPORTED
     /* Voice related regex
      * <CR><LF>^ORIG: <call_x>,<call_type><CR><LF>
      * <CR><LF>^CONF: <call_x><CR><LF>
@@ -4348,6 +4368,7 @@ mm_broadband_modem_huawei_init (MMBroadbandModemHuawei *self)
      */
     self->priv->eons_regex = g_regex_new ("\\r\\n\\^EONS:\\s*(\\d+)\\r\\n",
                                           G_REGEX_RAW | G_REGEX_OPTIMIZE, 0, NULL);
+#endif
 
     self->priv->ndisdup_support = FEATURE_SUPPORT_UNKNOWN;
     self->priv->rfswitch_support = FEATURE_SUPPORT_UNKNOWN;
@@ -4400,6 +4421,8 @@ finalize (GObject *object)
     g_regex_unref (self->priv->posend_regex);
     g_regex_unref (self->priv->ecclist_regex);
     g_regex_unref (self->priv->ltersrp_regex);
+
+#if MM_INTERFACE_VOICE_SUPPORTED
     g_regex_unref (self->priv->orig_regex);
     g_regex_unref (self->priv->conf_regex);
     g_regex_unref (self->priv->conn_regex);
@@ -4407,6 +4430,7 @@ finalize (GObject *object)
     g_regex_unref (self->priv->ddtmf_regex);
     g_regex_unref (self->priv->cschannelinfo_regex);
     g_regex_unref (self->priv->eons_regex);
+#endif
 
     if (self->priv->syscfg_supported_modes)
         g_array_unref (self->priv->syscfg_supported_modes);
@@ -4524,6 +4548,8 @@ iface_modem_time_init (MMIfaceModemTime *iface)
 
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
+
 static void
 iface_modem_voice_init (MMIfaceModemVoice *iface)
 {
@@ -4541,6 +4567,8 @@ iface_modem_voice_init (MMIfaceModemVoice *iface)
     iface->create_call = create_call;
 }
 
+#endif
+
 static void
 iface_modem_signal_init (MMIfaceModemSignal *iface)
 {
diff --git a/src/Makefile.am b/src/Makefile.am
index bdac92fb..38406baa 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -309,10 +309,6 @@ ModemManager_SOURCES = \
 	mm-base-modem-at.c \
 	mm-base-modem.h \
 	mm-base-modem.c \
-	mm-base-call.h \
-	mm-base-call.c \
-	mm-call-list.h \
-	mm-call-list.c \
 	mm-iface-modem.h \
 	mm-iface-modem.c \
 	mm-iface-modem-3gpp.h \
@@ -323,8 +319,6 @@ ModemManager_SOURCES = \
 	mm-iface-modem-cdma.c \
 	mm-iface-modem-simple.h \
 	mm-iface-modem-simple.c \
-	mm-iface-modem-voice.h \
-	mm-iface-modem-voice.c \
 	mm-iface-modem-firmware.h \
 	mm-iface-modem-firmware.c \
 	mm-iface-modem-signal.h \
@@ -366,6 +360,17 @@ ModemManager_SOURCES += \
 	$(NULL)
 endif
 
+if WITH_INTERFACE_VOICE
+ModemManager_SOURCES += \
+	mm-base-call.h \
+	mm-base-call.c \
+	mm-call-list.h \
+	mm-call-list.c \
+	mm-iface-modem-voice.h \
+	mm-iface-modem-voice.c \
+	$(NULL)
+endif
+
 nodist_ModemManager_SOURCES = $(DAEMON_ENUMS_GENERATED)
 
 # Additional Polkit support
diff --git a/src/mm-broadband-modem.c b/src/mm-broadband-modem.c
index b5257253..8a00e99d 100644
--- a/src/mm-broadband-modem.c
+++ b/src/mm-broadband-modem.c
@@ -42,7 +42,10 @@
 # include "mm-sms-list.h"
 # include "mm-sms-part-3gpp.h"
 #endif
-#include "mm-iface-modem-voice.h"
+#if MM_INTERFACE_VOICE_SUPPORTED
+# include "mm-iface-modem-voice.h"
+# include "mm-call-list.h"
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
 # include "mm-iface-modem-time.h"
 #endif
@@ -51,7 +54,6 @@
 #include "mm-iface-modem-oma.h"
 #include "mm-broadband-bearer.h"
 #include "mm-bearer-list.h"
-#include "mm-call-list.h"
 #include "mm-base-sim.h"
 #include "mm-log.h"
 #include "mm-modem-helpers.h"
@@ -74,7 +76,9 @@ static void iface_modem_location_init (MMIfaceModemLocation *iface);
 #if MM_INTERFACE_MESSAGING_SUPPORTED
 static void iface_modem_messaging_init (MMIfaceModemMessaging *iface);
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
 static void iface_modem_voice_init (MMIfaceModemVoice *iface);
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
 static void iface_modem_time_init (MMIfaceModemTime *iface);
 #endif
@@ -94,7 +98,9 @@ G_DEFINE_TYPE_EXTENDED (MMBroadbandModem, mm_broadband_modem, MM_TYPE_BASE_MODEM
 #if MM_INTERFACE_MESSAGING_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_MESSAGING, iface_modem_messaging_init)
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_VOICE, iface_modem_voice_init)
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
                         G_IMPLEMENT_INTERFACE (MM_TYPE_IFACE_MODEM_TIME, iface_modem_time_init)
 #endif
@@ -115,7 +121,9 @@ enum {
 #if MM_INTERFACE_MESSAGING_SUPPORTED
     PROP_MODEM_MESSAGING_DBUS_SKELETON,
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     PROP_MODEM_VOICE_DBUS_SKELETON,
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
     PROP_MODEM_TIME_DBUS_SKELETON,
 #endif
@@ -139,7 +147,9 @@ enum {
     PROP_MODEM_MESSAGING_SMS_PDU_MODE,
     PROP_MODEM_MESSAGING_SMS_DEFAULT_STORAGE,
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     PROP_MODEM_VOICE_CALL_LIST,
+#endif
     PROP_MODEM_SIMPLE_STATUS,
     PROP_MODEM_SIM_HOT_SWAP_SUPPORTED,
     PROP_MODEM_SIM_HOT_SWAP_CONFIGURED,
@@ -241,10 +251,12 @@ struct _MMBroadbandModemPrivate {
     MMSmsStorage current_sms_mem2_storage;
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
     /*<--- Modem Voice interface --->*/
     /* Properties */
     GObject *modem_voice_dbus_skeleton;
     MMCallList *modem_voice_call_list;
+#endif
 
 #if MM_INTERFACE_TIME_SUPPORTED
     /*<--- Modem Time interface --->*/
@@ -6535,6 +6547,8 @@ modem_messaging_create_sms (MMIfaceModemMessaging *self)
 
 #endif /* MM_INTERFACE_MESSAGING_SUPPORTED */
 
+#if MM_INTERFACE_VOICE_SUPPORTED
+
 /*****************************************************************************/
 /* Check if Voice supported (Voice interface) */
 
@@ -6794,6 +6808,8 @@ modem_voice_create_call (MMIfaceModemVoice *self)
     return mm_base_call_new (MM_BASE_MODEM (self));
 }
 
+#endif /* MM_INTERFACE_VOICE_SUPPORTED */
+
 /*****************************************************************************/
 /* ESN loading (CDMA interface) */
 
@@ -9002,7 +9018,9 @@ typedef enum {
 #if MM_INTERFACE_MESSAGING_SUPPORTED
     DISABLING_STEP_IFACE_MESSAGING,
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     DISABLING_STEP_IFACE_VOICE,
+#endif
 #if MM_INTERFACE_LOCATION_SUPPORTED
     DISABLING_STEP_IFACE_LOCATION,
 #endif
@@ -9098,7 +9116,9 @@ INTERFACE_DISABLE_READY_FN (iface_modem_location,  MM_IFACE_MODEM_LOCATION,  FAL
 #if MM_INTERFACE_MESSAGING_SUPPORTED
 INTERFACE_DISABLE_READY_FN (iface_modem_messaging, MM_IFACE_MODEM_MESSAGING, FALSE)
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
 INTERFACE_DISABLE_READY_FN (iface_modem_voice,     MM_IFACE_MODEM_VOICE,     FALSE)
+#endif
 INTERFACE_DISABLE_READY_FN (iface_modem_signal,    MM_IFACE_MODEM_SIGNAL,    FALSE)
 #if MM_INTERFACE_TIME_SUPPORTED
 INTERFACE_DISABLE_READY_FN (iface_modem_time,      MM_IFACE_MODEM_TIME,      FALSE)
@@ -9263,6 +9283,7 @@ disabling_step (GTask *task)
         ctx->step++;
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
     case DISABLING_STEP_IFACE_VOICE:
         if (ctx->self->priv->modem_voice_dbus_skeleton) {
             mm_dbg ("Modem has voice capabilities, disabling the Voice interface...");
@@ -9274,6 +9295,7 @@ disabling_step (GTask *task)
         }
         /* Fall down to next step */
         ctx->step++;
+#endif
 
 #if MM_INTERFACE_LOCATION_SUPPORTED
     case DISABLING_STEP_IFACE_LOCATION:
@@ -9389,7 +9411,9 @@ typedef enum {
 #if MM_INTERFACE_MESSAGING_SUPPORTED
     ENABLING_STEP_IFACE_MESSAGING,
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     ENABLING_STEP_IFACE_VOICE,
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
     ENABLING_STEP_IFACE_TIME,
 #endif
@@ -9475,7 +9499,9 @@ INTERFACE_ENABLE_READY_FN (iface_modem_location,  MM_IFACE_MODEM_LOCATION,  FALS
 #if MM_INTERFACE_MESSAGING_SUPPORTED
 INTERFACE_ENABLE_READY_FN (iface_modem_messaging, MM_IFACE_MODEM_MESSAGING, FALSE)
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
 INTERFACE_ENABLE_READY_FN (iface_modem_voice,     MM_IFACE_MODEM_VOICE,     FALSE)
+#endif
 INTERFACE_ENABLE_READY_FN (iface_modem_signal,    MM_IFACE_MODEM_SIGNAL,    FALSE)
 #if MM_INTERFACE_TIME_SUPPORTED
 INTERFACE_ENABLE_READY_FN (iface_modem_time,      MM_IFACE_MODEM_TIME,      FALSE)
@@ -9652,6 +9678,7 @@ enabling_step (GTask *task)
         ctx->step++;
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
     case ENABLING_STEP_IFACE_VOICE:
         if (ctx->self->priv->modem_voice_dbus_skeleton) {
             mm_dbg ("Modem has voice capabilities, enabling the Voice interface...");
@@ -9664,6 +9691,7 @@ enabling_step (GTask *task)
         }
         /* Fall down to next step */
         ctx->step++;
+#endif
 
 #if MM_INTERFACE_TIME_SUPPORTED
     case ENABLING_STEP_IFACE_TIME:
@@ -9829,7 +9857,9 @@ typedef enum {
 #if MM_INTERFACE_MESSAGING_SUPPORTED
     INITIALIZE_STEP_IFACE_MESSAGING,
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     INITIALIZE_STEP_IFACE_VOICE,
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
     INITIALIZE_STEP_IFACE_TIME,
 #endif
@@ -10020,7 +10050,9 @@ INTERFACE_INIT_READY_FN (iface_modem_location,  MM_IFACE_MODEM_LOCATION,  FALSE)
 #if MM_INTERFACE_MESSAGING_SUPPORTED
 INTERFACE_INIT_READY_FN (iface_modem_messaging, MM_IFACE_MODEM_MESSAGING, FALSE)
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
 INTERFACE_INIT_READY_FN (iface_modem_voice,     MM_IFACE_MODEM_VOICE,     FALSE)
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
 INTERFACE_INIT_READY_FN (iface_modem_time,      MM_IFACE_MODEM_TIME,      FALSE)
 #endif
@@ -10140,6 +10172,7 @@ initialize_step (GTask *task)
         return;
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
     case INITIALIZE_STEP_IFACE_VOICE:
         /* Initialize the Voice interface */
         mm_iface_modem_voice_initialize (MM_IFACE_MODEM_VOICE (ctx->self),
@@ -10147,6 +10180,7 @@ initialize_step (GTask *task)
                                          (GAsyncReadyCallback)iface_modem_voice_initialize_ready,
                                          task);
         return;
+#endif
 
 #if MM_INTERFACE_TIME_SUPPORTED
     case INITIALIZE_STEP_IFACE_TIME:
@@ -10289,7 +10323,9 @@ sim_hot_swap_enabled:
 #if MM_INTERFACE_MESSAGING_SUPPORTED
                 mm_iface_modem_messaging_shutdown (MM_IFACE_MODEM_MESSAGING (ctx->self));
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
                 mm_iface_modem_voice_shutdown (MM_IFACE_MODEM_VOICE (ctx->self));
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
                 mm_iface_modem_time_shutdown (MM_IFACE_MODEM_TIME (ctx->self));
 #endif
@@ -10533,10 +10569,12 @@ set_property (GObject *object,
         self->priv->modem_messaging_dbus_skeleton = g_value_dup_object (value);
         break;
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     case PROP_MODEM_VOICE_DBUS_SKELETON:
         g_clear_object (&self->priv->modem_voice_dbus_skeleton);
         self->priv->modem_voice_dbus_skeleton = g_value_dup_object (value);
         break;
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
     case PROP_MODEM_TIME_DBUS_SKELETON:
         g_clear_object (&self->priv->modem_time_dbus_skeleton);
@@ -10605,10 +10643,12 @@ set_property (GObject *object,
         self->priv->modem_messaging_sms_default_storage = g_value_get_enum (value);
         break;
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     case PROP_MODEM_VOICE_CALL_LIST:
         g_clear_object (&self->priv->modem_voice_call_list);
         self->priv->modem_voice_call_list = g_value_dup_object (value);
         break;
+#endif
     case PROP_MODEM_SIMPLE_STATUS:
         g_clear_object (&self->priv->modem_simple_status);
         self->priv->modem_simple_status = g_value_dup_object (value);
@@ -10659,9 +10699,11 @@ get_property (GObject *object,
         g_value_set_object (value, self->priv->modem_messaging_dbus_skeleton);
         break;
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     case PROP_MODEM_VOICE_DBUS_SKELETON:
         g_value_set_object (value, self->priv->modem_voice_dbus_skeleton);
         break;
+#endif
 #if MM_INTERFACE_TIME_SUPPORTED
     case PROP_MODEM_TIME_DBUS_SKELETON:
         g_value_set_object (value, self->priv->modem_time_dbus_skeleton);
@@ -10723,9 +10765,11 @@ get_property (GObject *object,
         g_value_set_enum (value, self->priv->modem_messaging_sms_default_storage);
         break;
 #endif
+#if MM_INTERFACE_VOICE_SUPPORTED
     case PROP_MODEM_VOICE_CALL_LIST:
         g_value_set_object (value, self->priv->modem_voice_call_list);
         break;
+#endif
     case PROP_MODEM_SIMPLE_STATUS:
         g_value_set_object (value, self->priv->modem_simple_status);
         break;
@@ -10834,10 +10878,13 @@ dispose (GObject *object)
     g_clear_object (&self->priv->modem_messaging_sms_list);
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
     if (self->priv->modem_voice_dbus_skeleton) {
         mm_iface_modem_voice_shutdown (MM_IFACE_MODEM_VOICE (object));
         g_clear_object (&self->priv->modem_voice_dbus_skeleton);
     }
+    g_clear_object (&self->priv->modem_voice_call_list);
+#endif
 
 #if MM_INTERFACE_TIME_SUPPORTED
     if (self->priv->modem_time_dbus_skeleton) {
@@ -10853,7 +10900,6 @@ dispose (GObject *object)
 
     g_clear_object (&self->priv->modem_sim);
     g_clear_object (&self->priv->modem_bearer_list);
-    g_clear_object (&self->priv->modem_voice_call_list);
     g_clear_object (&self->priv->modem_simple_status);
 
     G_OBJECT_CLASS (mm_broadband_modem_parent_class)->dispose (object);
@@ -11060,6 +11106,8 @@ iface_modem_messaging_init (MMIfaceModemMessaging *iface)
 
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
+
 static void
 iface_modem_voice_init (MMIfaceModemVoice *iface)
 {
@@ -11074,6 +11122,8 @@ iface_modem_voice_init (MMIfaceModemVoice *iface)
     iface->create_call = modem_voice_create_call;
 }
 
+#endif
+
 #if MM_INTERFACE_TIME_SUPPORTED
 
 static void
@@ -11171,9 +11221,11 @@ mm_broadband_modem_class_init (MMBroadbandModemClass *klass)
                                       MM_IFACE_MODEM_MESSAGING_DBUS_SKELETON);
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
     g_object_class_override_property (object_class,
                                       PROP_MODEM_VOICE_DBUS_SKELETON,
                                       MM_IFACE_MODEM_VOICE_DBUS_SKELETON);
+#endif
 
 #if MM_INTERFACE_TIME_SUPPORTED
     g_object_class_override_property (object_class,
@@ -11255,9 +11307,11 @@ mm_broadband_modem_class_init (MMBroadbandModemClass *klass)
                                       MM_IFACE_MODEM_MESSAGING_SMS_DEFAULT_STORAGE);
 #endif
 
+#if MM_INTERFACE_VOICE_SUPPORTED
     g_object_class_override_property (object_class,
                                       PROP_MODEM_VOICE_CALL_LIST,
                                       MM_IFACE_MODEM_VOICE_CALL_LIST);
+#endif
 
     g_object_class_override_property (object_class,
                                       PROP_MODEM_SIMPLE_STATUS,
-- 
2.14.1

