re #19166 Handle old-style network-interfaces config from meta-data

We have already published to some customers the old (pre-0.7.9) way of
passing in network interface configuration via meta-data (the network-interfaces
key, with a custom dict that is openwrt-specific).

In order to support both the new style (the network-config top-level file) as
well as the old one, we move the conversion of the "eni"-style data (the old
style "network-interfaces" blob) into the distro class with a default, and
override it in velocloud.py.

PS The velocloud code now supports both old styles (the old dictionary style,
as well as the old Ubuntu /etc/network/interfaces-style blob).

--- a/cloudinit/distros/__init__.py	2016-12-23 08:37:45.000000000 -0800
+++ b/cloudinit/distros/__init__.py	2017-08-01 15:12:22.083358874 -0700
@@ -128,6 +128,9 @@
             return self._bring_up_interfaces(dev_names)
         return False
 
+    def convert_eni_data(self, network_eni):
+        return eni.convert_eni_data(network_eni)
+
     def _apply_network_from_network_config(self, netconfig, bring_up=True):
         distro = self.__class__
         LOG.warn("apply_network_config is not currently implemented "
--- a/cloudinit/sources/DataSourceNoCloud.py	2016-12-23 08:37:45.000000000 -0800
+++ b/cloudinit/sources/DataSourceNoCloud.py	2017-08-01 15:09:25.564057920 -0700
@@ -12,7 +12,6 @@
 import os
 
 from cloudinit import log as logging
-from cloudinit.net import eni
 from cloudinit import sources
 from cloudinit import util
 
@@ -190,7 +189,7 @@
     def network_config(self):
         if self._network_config is None:
             if self._network_eni is not None:
-                self._network_config = eni.convert_eni_data(self._network_eni)
+                self._network_config = self.distro.convert_eni_data(self._network_eni)
         return self._network_config
 
 
--- a/cloudinit/sources/DataSourceConfigDrive.py	2016-12-23 08:37:45.000000000 -0800
+++ b/cloudinit/sources/DataSourceConfigDrive.py	2017-08-01 15:10:02.754215400 -0700
@@ -12,8 +12,6 @@
 from cloudinit import sources
 from cloudinit import util
 
-from cloudinit.net import eni
-
 from cloudinit.sources.helpers import openstack
 
 LOG = logging.getLogger(__name__)
@@ -146,7 +144,7 @@
                 self._network_config = openstack.convert_net_json(
                     self.network_json, known_macs=self.known_macs)
             elif self.network_eni is not None:
-                self._network_config = eni.convert_eni_data(self.network_eni)
+                self._network_config = self.distro.convert_eni_data(self.network_eni)
                 LOG.debug("network config provided via converted eni data")
             else:
                 LOG.debug("no network configuration available")
